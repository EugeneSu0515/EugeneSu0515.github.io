<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DotnetCore系列文章目錄</title>
    <url>/2021/09/01/dotnetcore-series/</url>
    <content><![CDATA[<a href="/2021/08/21/dotnetcore-socket/" title="[DotnetCore]Socket程式實作">[DotnetCore]Socket程式實作</a>
<br>
<a href="/2021/08/21/dotnetcore-socket-analyze/" title="[DotnetCore]Socket程式實作-解析封包">[DotnetCore]Socket程式實作-解析封包</a>
<br>
<a href="/2021/08/21/dotnetcore-socket-slicing/" title="[DotnetCore]Socket程式實作-切割封包">[DotnetCore]Socket程式實作-切割封包</a>
<br>
<a href="/2021/08/21/dotnetcore-smtp/" title="[DotnetCore]SMTP寄信服務設計">[DotnetCore]SMTP寄信服務設計</a>
<br>
<a href="/2021/08/21/dotnetcore-batch/" title="[DotnetCore]Batch檔案執行及追縱">[DotnetCore]Batch檔案執行及追縱</a>
<br>
<a href="/2021/08/21/dotnetcore-cap/" title="[DotnetCore]EventBus套件CAP:以RabbitMQ為例">[DotnetCore]EventBus套件CAP:以RabbitMQ為例</a>
<br>
<a href="/2021/08/20/dotnetcore-actionfilter/" title="[DotnetCore]ActionFilter實作">[DotnetCore]ActionFilter實作</a>
<br>
<a href="/2021/08/24/fluent-validation/" title="[DotnetCore]後端驗證神器:Fluent Validation">[DotnetCore]後端驗證神器:Fluent Validation</a>
<br>
<span id="more"></span>
<a href="/2021/08/28/reader-series-csv/" title="[DotnetCore]Reader系列-CSV檔案">[DotnetCore]Reader系列-CSV檔案</a>
<br>
<a href="/2021/08/30/excel-reader/" title="[DotnetCore]Reader系列-Excel檔案">[DotnetCore]Reader系列-Excel檔案</a>
<br>
<a href="/2021/09/03/reader-series-pdf/" title="[DotnetCore]Reader系列-Pdf檔案">[DotnetCore]Reader系列-Pdf檔案</a>
<br>
<a href="/2022/05/10/reader-series-pdf-itextsharp/" title="[DotnetCore]Reader系列-Pdf檔案:iTextSharp">[DotnetCore]Reader系列-Pdf檔案:iTextSharp</a>
<br>
<a href="/2022/03/07/reader-series-eml/" title="[DotnetCore]Reader系列-EML檔案">[DotnetCore]Reader系列-EML檔案</a>
<br>
<a href="/2021/08/25/coravel-scheduler/" title="[DotnetCore]排程利器-Coravel:Scheduler篇">[DotnetCore]排程利器-Coravel:Scheduler篇</a>
<br>
<a href="/2021/08/25/coravel-queue/" title="[DotnetCore]排程利器-Coravel:Queue篇">[DotnetCore]排程利器-Coravel:Queue篇</a>
<br>
<a href="/2021/08/27/hangfire-entry/" title="[DotnetCore]排程神器-Hangfire:入門篇">[DotnetCore]排程神器-Hangfire:入門篇</a>
<br>
<a href="/2021/08/27/hangfire-advanced1/" title="[DotnetCore]排程神器-Hangfire:進階篇1">[DotnetCore]排程神器-Hangfire:進階篇1</a>
<br>
<a href="/2021/09/08/hangfire-dynamic1/" title="[DotnetCore]排程神器-Hangfire:動態排程篇1">[DotnetCore]排程神器-Hangfire:動態排程篇1</a>
<br>
<a href="/2021/09/10/hangfire-dynamic2/" title="[DotnetCore]排程神器-Hangfire:動態排程篇2">[DotnetCore]排程神器-Hangfire:動態排程篇2</a>
<br>
<a href="/2021/09/11/hangfire-dynamic3/" title="[DotnetCore]排程神器-Hangfire:動態排程篇3">[DotnetCore]排程神器-Hangfire:動態排程篇3</a>
<br>
<a href="/2021/09/11/hangfire-dynamic4/" title="[DotnetCore]排程神器-Hangfire:動台排程篇4">[DotnetCore]排程神器-Hangfire:動台排程篇4</a>
<br>
<a href="/2021/08/23/nlog/" title="[DotnetCore]NLog使用">[DotnetCore]NLog使用</a>
<br>
<a href="/2021/08/23/nlog-loggermanager/" title="[DotnetCore]NLog-ILoggerManager設計">[DotnetCore]NLog-ILoggerManager設計</a>
<br>
<a href="/2022/05/17/nlog-environment-config/" title="[DotnetCore]NLog-依照Environment使用Nlog.Config檔案">[DotnetCore]NLog-依照Environment使用Nlog.Config檔案</a>
<br>
<a href="/2021/08/31/ftp-download/" title="[DotnetCore]FTP-下載上傳">[DotnetCore]FTP-下載上傳</a>
<br>
<a href="/2021/09/01/sftp-download/" title="[DotnetCore]SFTP-下載上傳">[DotnetCore]SFTP-下載上傳</a>
<br>
<a href="/2021/09/02/ftp-sftp-resolver/" title="[DotnetCore](S)FTP-ServiceResolver">[DotnetCore](S)FTP-ServiceResolver</a>
<br>
<a href="/2021/09/04/orm-series-chloe-entry/" title="[DotnetCore]ORM系列-Chloe:入門篇">[DotnetCore]ORM系列-Chloe:入門篇</a>
<br>
<a href="/2021/09/07/orm-series-chloe-select/" title="[DotnetCore]ORM系列-Chloe:Select篇">[DotnetCore]ORM系列-Chloe:Select篇</a>
<br>
<a href="/2021/09/07/orm-series-chloe-interceptor/" title="[DotnetCore]ORM系列-Chloe:Interceptor篇">[DotnetCore]ORM系列-Chloe:Interceptor篇</a>
<br>
<a href="/2021/11/04/orm-series-chloe-audit-columns/" title="[DotnetCore]ORM系列-Chloe:共同欄位新增、編輯技巧">[DotnetCore]ORM系列-Chloe:共同欄位新增、編輯技巧</a>
<br>
<a href="/2021/09/05/orm-series-efcore-override-savechanges/" title="[DotnetCore]ORM系列-EFCore:資料表共同欄位設定">[DotnetCore]ORM系列-EFCore:資料表共同欄位設定</a>
<br>
<a href="/2021/11/01/orm-series-sqlsugar-entry/" title="[DotnetCore]ORM系列-SqlSugar:入門篇">[DotnetCore]ORM系列-SqlSugar:入門篇</a>
<br>
<a href="/2021/11/02/orm-series-sqlsugar-query/" title="[DotnetCore]ORM系列-SqlSugar:查詢篇1">[DotnetCore]ORM系列-SqlSugar:查詢篇1</a>
<br>
<a href="/2021/11/11/orm-series-sqlsugar-model-generator/" title="[DotnetCore]ORM系列-SqlSugar:實體產生器">[DotnetCore]ORM系列-SqlSugar:實體產生器</a>
<br>
<a href="/2022/05/16/orm-series-sqlsugar-advanced-model-generator/" title="[DotnetCore]ORM系列-SqlSugar:實體產生器-進階">[DotnetCore]ORM系列-SqlSugar:實體產生器-進階</a>
<br>
<a href="/2021/11/12/orm-series-sqlsugar-interceptor/" title="[DotnetCore]ORM系列-SqlSugar:AOP篇">[DotnetCore]ORM系列-SqlSugar:AOP篇</a>
<br>
<a href="/2021/11/15/orm-series-sqlsugar-audit-columns/" title="[DotnetCore]ORM系列-SqlSugar:共同欄位新增、編輯技巧">[DotnetCore]ORM系列-SqlSugar:共同欄位新增、編輯技巧</a>
<br>
<a href="/2022/01/14/dotnetcore-generic-series-model/" title="[DotnetCore]泛型運用系列-Model設計篇">[DotnetCore]泛型運用系列-Model設計篇</a>
<br>
<a href="/2022/01/14/dotnetcore-generic-series-attribute/" title="[DotnetCore]泛型運用系列-Attribute設計篇">[DotnetCore]泛型運用系列-Attribute設計篇</a>
<br>
<a href="/2022/01/14/dotnetcore-generic-series-domain/" title="[DotnetCore]泛型運用系列-商業邏輯實作篇">[DotnetCore]泛型運用系列-商業邏輯實作篇</a>
<br>
<a href="/2022/01/14/dotnetcore-generic-series-DI/" title="[DotnetCore]泛型運用系列-注入篇">[DotnetCore]泛型運用系列-注入篇</a>
<br>
<a href="/2022/12/22/dotnetcore-console-with-configuration-di/" title="[DotnetCore]ConsoleApp擁有Configuration及ServiceCollection機制">[DotnetCore]ConsoleApp擁有Configuration及ServiceCollection機制</a>
<br>
<a href="/2023/02/08/dotnet-series-grpc101-greeting-client/" title="[DotnetCore]gRPC101: Greeting專案:Client篇">[DotnetCore]gRPC101: Greeting專案:Client篇</a>
<br>
<a href="/2023/02/07/dotnet-series-grpc101-greeting-server/" title="[DotnetCore]gRPC101: Gretting專案-Server篇">[DotnetCore]gRPC101: Gretting專案-Server篇</a>
<br>
<a href="/2023/02/10/dotnet-series-grpc101-postman-request/" title="[DotnetCore]gRPC101:Postman發出gRPC Request">[DotnetCore]gRPC101:Postman發出gRPC Request</a>
<br>
<a href="/2023/03/15/dotnetcore-aop-logging/" title="[DotnetCore]AOP初體驗">[DotnetCore]AOP初體驗</a>
<br>
<a href="/2023/07/06/dotnetcore-refit-intro/" title="[DotnetCore]Refit初體驗">[DotnetCore]Refit初體驗</a>
<br>
<a href="/2023/07/06/dotnetcore-refit-webapi/" title="[DotnetCore]Refit:DotnetCore專案套用">[DotnetCore]Refit:DotnetCore專案套用</a>
<br>
---
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>
]]></content>
      <categories>
        <category>dotnetcore</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]ModelBindingMiddleware</title>
    <url>/2023/11/27/dotnetcore-model-binding-middleware/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>延續<a href="/2023/11/27/dotnetcore-refit-api-gateway/" title="[DotnetCore]Refit:類ApiGateway實作">[DotnetCore]Refit:類ApiGateway實作</a>文章，筆者在開發前台，後台這種隔離架構時，還會有一個需求是，比較正式的API規格，會有一些客製化的<code>Header</code>值必須要辨別，不外乎就是<code>AcesssToken</code>，或者必要的<code>Client</code>資訊，及封包簽章等資訊，以前台轉發到後台這段來說，猶如上一篇提到透過<code>Refit</code>完成。</p>
<p>筆者的思路是這樣，驗證這些<code>Client Request</code>資訊的職責來說，止於前台，不需要再原封不動將客製化的<code>Header</code>資訊送到後台，因為後台商業邏輯處理來說也不需要這些資訊，因此某些Header的值必須下放到<code>Model</code>層級，讓後台收到的<code>Request</code>中已經含有商業邏輯處理的必要資訊。</p>
<p>再則前台這一層必須要驗證<code>Request</code>的合理性，一定會讀取<code>Header</code>資訊，若要把這些<code>Header</code>資訊原封不動的送到後台，反而還要額外動工，第一是要製作成Refit的參數，第二是後台還要再拆解一次Header資訊，完全是做了很多不需要的步驟，於是乎，這篇就誕生啦。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>筆者主要目的就是想要把一些<code>Header</code>上的資訊，想要放到<code>Request</code>的<code>Body</code>上，讓<code>API Pipeline</code>走到<code>Action</code>時，已經將<code>Request Model</code>都繫結好了，筆者一開始的方向是<code>Customize Model Binding</code>，找到<code>Microsoft Learn</code>上面的教學<a href="https://learn.microsoft.com/en-us/aspnet/core/mvc/advanced/custom-model-binding?view=aspnetcore-6.0">https://learn.microsoft.com/en-us/aspnet/core/mvc/advanced/custom-model-binding?view=aspnetcore-6.0</a>，看了一下情境都不太符合，</p>
<h2 id="RequestBaseModel"><a href="#RequestBaseModel" class="headerlink" title="RequestBaseModel"></a>RequestBaseModel</h2><p>筆者這邊交代一下，因為這個新系統包含<code>OAuth</code>的驗證，基本上都會有<code>ClientId</code>以及<code>RequestId</code>(識別<code>Request</code>)，筆者這邊僅列出<code>BaseModel</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BaseRequestDto</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> RequestId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ClientId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="HeaderKeyConfigHelper"><a href="#HeaderKeyConfigHelper" class="headerlink" title="HeaderKeyConfigHelper"></a>HeaderKeyConfigHelper</h2><p>後面寫到<code>Middleware</code>時會用到讀取<code>Header</code>中的值，基本上都會有一個定義好的<code>Header Key</code>，筆者這邊習慣會定義好<code>const</code>變數</p>
<ul>
<li>集中<code>Key</code>定義</li>
<li>若有一個以上地方使用後須調整時，只要更改一個地方即可</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HeaderKeyConfigHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> REQUEST_ID= <span class="string">&quot;X-Request-Id&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> CLIENT_ID = <span class="string">&quot;X-Client-Id&quot;</span>;</span><br><span class="line">		<span class="comment">// 目前範例未使用到</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> AUTHORIZATION = <span class="string">&quot;Authorization&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="HeaderModelBindingMiddleware"><a href="#HeaderModelBindingMiddleware" class="headerlink" title="HeaderModelBindingMiddleware"></a>HeaderModelBindingMiddleware</h2><p>這邊主要邏輯是讀出<code>RequestBody</code>，透過<code>dynamic</code>的<code>ExpandObject</code>，指定客製化欄位的值後再變更其<code>RequestBody</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HeaderModelBindingMiddleware</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> RequestDelegate _next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HeaderModelBindingMiddleware</span>(<span class="params">RequestDelegate next</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">InvokeAsync</span>(<span class="params">HttpContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 以上省略</span></span><br><span class="line">        <span class="comment">// Get header value</span></span><br><span class="line">        context.Request.Headers.TryGetValue(HeaderKeyConfigHelper.CLIENT_ID, <span class="keyword">out</span> StringValues clientIdHeaderValue);</span><br><span class="line">        context.Request.Headers.TryGetValue(HeaderKeyConfigHelper.REQUEST_ID, <span class="keyword">out</span> StringValues requestIdHeaderValue);</span><br><span class="line">        <span class="comment">// Read the request body</span></span><br><span class="line">        <span class="keyword">var</span> originalRequestBody = context.Request.Body;</span><br><span class="line">        <span class="keyword">using</span> <span class="keyword">var</span> streamReader = <span class="keyword">new</span> StreamReader(originalRequestBody);</span><br><span class="line">        <span class="keyword">var</span> requestBodyText = <span class="keyword">await</span> streamReader.ReadToEndAsync();</span><br><span class="line">        <span class="built_in">dynamic</span> requestModel = JsonSerializer.Deserialize&lt;ExpandoObject&gt;(requestBodyText);</span><br><span class="line">        <span class="keyword">if</span> (clientIdHeaderValue.Count &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            requestModel.ClientId = clientIdHeaderValue.ToString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (transactionIdHeaderValue.Count &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            requestModel.RequestId= requestIdHeaderValue.ToString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Convert the modified body back to a stream</span></span><br><span class="line">        <span class="keyword">var</span> modifiedRequestBody = <span class="keyword">new</span> MemoryStream(Encoding.UTF8.GetBytes(JsonSerializer.Serialize(requestModel)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set the modified request body</span></span><br><span class="line">        context.Request.Body = modifiedRequestBody;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Continue to the next middleware</span></span><br><span class="line">        <span class="keyword">await</span> _next(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述<code>code</code>中透過<code>ExpandObject</code>擴充其屬性，筆者這個版本好處有幾個</p>
<ul>
<li>若沒有對應的<code>header key</code>也不會壞掉，先判斷有<code>header key</code>對應的<code>value</code>才指定</li>
<li>接著即便是<code>Action</code>所接的<code>Model</code>沒有這些屬性也只是被捨去這些值而已，沒有其他<code>SideEffect</code></li>
</ul>
<p>當然這個版本的缺點就是若沒有再用<code>Endpoint</code>過濾的掛上<code>Middleware</code>的話，每個<code>Action</code>都會經過這個<code>Middleware</code>，若沒有需要這些屬性的<code>Model</code>就顯得多了一些步驟做判斷是否存在<code>header Key</code>及對應的值，筆者這個站台的使用情境是滿符合的，因此要考慮用的讀者可能要思考一下使用情境再做使用。</p>
<h2 id="註冊Middleware"><a href="#註冊Middleware" class="headerlink" title="註冊Middleware"></a>註冊Middleware</h2><p>就註冊在<code>Startup</code>中就可以了</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 以上省略</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 以上省略</span></span><br><span class="line">		app.UseMiddleware&lt;HeaderModelBindingMiddleware&gt;();</span><br><span class="line">		<span class="comment">// 以下省略</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 以下省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這樣<code>Action</code>接的<code>Model</code>只要有繼承<code>BaseRequestDto</code>就會自動<code>Binding</code>裡面的<code>RequestId</code>跟<code>ClientId</code>屬性了</p>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>筆者因有一個前台站台，不處理邏輯，裡面剛好用到的此篇的技巧，轉發到後台時，不用再另外包裝<code>Header</code>值，轉發到後台後，後台站台也不用再另外解析<code>Header</code>的值做商業邏輯處理，省了不少工，此篇就到這邊了，下次見。</p>
<p>參考</p>
<ul>
<li><a href="https://ronsun.github.io/content/20210626-aspnetcore-webapi-read-body.html">https://ronsun.github.io/content/20210626-aspnetcore-webapi-read-body.html</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]Refit:類ApiGateway實作</title>
    <url>/2023/11/27/dotnetcore-refit-api-gateway/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者在公司環境開發系統，依照公司規定有一些<code>Secrurity Policy</code>要遵守，尤其是對外站台(前台)，因為是對外開放的站台，按照資安規定，需要完全是一個乾淨的站台，不連資料庫，不做商業邏輯處理，只接收將客戶端傳來的<code>HttpRequest</code>，轉發到商業邏輯處理站台(後台)，因此筆者才在此篇的標題上打上<code>類APIGateway</code>的字言，因為沒有完全符合<code>ApiGateway</code>該有的功能，類似像<code>LoadBalancing</code>、<code>Caching</code>、<code>Retry Policy</code>等重要指標，<code>ApiGateway</code>完整功能可參考<a href="https://github.com/ThreeMammals/Ocelot%E7%9A%84Features%E6%B8%85%E5%96%AE%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%95%A5%E7%9F%A5%E4%B8%80%E4%BA%8C%E3%80%82">https://github.com/ThreeMammals/Ocelot的Features清單就可以略知一二。</a></p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>講到<code>ApiGateway</code>的其中一個主要功能是<code>Request</code>的轉發，這時候透過<code>Refit</code>轉發是最適合不過了，主要原因</p>
<ul>
<li>完全可以模仿像<code>Ocelot</code>這種<code>ApiGateway</code>的模式:用<code>Json</code>設定其<code>ApiRoute</code>資訊，換到<code>Refit</code>的世界來說，就是定義好<code>Api Repository Interface</code>，與<code>json格式</code>相比，多了一些<code>Request、Response</code>強型別物件的宣告作業，但也多了一份踏實感</li>
<li><code>Response</code>的解析，可以利用<code>Refit</code>提供的<code>ApiResponse&lt;T&gt;</code>來做一些統一的<code>ResponseArragement</code>方法，可以想像一下，若自己透過<code>HttpClient</code>發<code>Request</code>，類似像<code>Validation</code>的<code>ErrorResponse</code>，後台可能會透過<code>400BadRequest</code>的方式回應，對於該<code>HttpRequest</code>請求來說會是一個<code>HttpException</code>，因此必須要做很多的<code>TryCatch</code>來完成一個請求的<code>Respsonse</code>整理，看一下文章後面的程式碼會更有感覺。</li>
</ul>
<h2 id="ApiRepository的宣告"><a href="#ApiRepository的宣告" class="headerlink" title="ApiRepository的宣告"></a>ApiRepository的宣告</h2><p>雖然沒有<code>ApiGateway</code>的一些高大尚的功能，還是要有基本的<code>Authentication</code>功能，因此會有兩個<code>ApiResource</code>要宣告</p>
<ul>
<li>內部<code>AuthServer</code></li>
<li>商業邏輯處站台(後台)</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IAuthServerApiRepository</span></span><br><span class="line">&#123;</span><br><span class="line">		<span class="comment">// 取得AccessToken</span></span><br><span class="line">    [<span class="meta">Post(<span class="string">&quot;/api/v1/oauth/token&quot;</span>)</span>]</span><br><span class="line">    Task&lt;ApiResponse&lt;GetAccessTokenResponseDto&gt;&gt; GetAccessToken([Body(BodySerializationMethod.UrlEncoded)] GetAccessTokenRequestDto request);</span><br><span class="line">		<span class="comment">// 驗證Token</span></span><br><span class="line">    [<span class="meta">Post(<span class="string">&quot;/api/v1/oauth/validate&quot;</span>)</span>]</span><br><span class="line">    Task&lt;ApiResponse&lt;GetPermissionResponseDto&gt;&gt; ValidateToken([Header(<span class="string">&quot;Authorization&quot;</span>)] <span class="built_in">string</span> token, [Header(<span class="string">&quot;X-Client-Id&quot;</span>)] <span class="built_in">string</span> clienId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IAppServerApiRepository</span></span><br><span class="line">&#123;   </span><br><span class="line">		<span class="comment">// 建立訂單</span></span><br><span class="line">    [<span class="meta">Post(<span class="string">&quot;/api/v1/order&quot;</span>)</span>]</span><br><span class="line">    Task&lt;ApiResponse&lt;OrderResponseDto&gt;&gt; OrderCreate(OrderRequestDto orderRequestDto);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="註冊ApiRepository"><a href="#註冊ApiRepository" class="headerlink" title="註冊ApiRepository"></a>註冊ApiRepository</h2><p>這節筆者在其他Refit介紹文章中已經解釋過，不另外特別解釋，直接貼出<code>code</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">services.AddRefitClient&lt;IAppServerApiRepository&gt;()</span><br><span class="line">    .ConfigureHttpClient(x =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        x.BaseAddress = <span class="keyword">new</span> Uri(Configuration[<span class="string">&quot;BaseUrl:AppServer&quot;</span>]);</span><br><span class="line">    &#125;);</span><br><span class="line">services.AddRefitClient&lt;IAuthServerApiRepository&gt;()</span><br><span class="line">    .ConfigureHttpClient(x =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        x.BaseAddress = <span class="keyword">new</span> Uri(Configuration[<span class="string">&quot;BaseUrl:AuthServer&quot;</span>]);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Response解析"><a href="#Response解析" class="headerlink" title="Response解析"></a>Response解析</h2><p>開發思路大概是這樣，以前台來說從<code>Api</code>入口收到<code>Request</code>後，透過<code>Refit</code>轉發<code>HttpRequest</code>，收到<code>HttpResponse</code>後要轉成<code>IActionResult</code>的格式回傳<code>ApiResponse</code>，中間多了一些轉換。</p>
<p>筆者這邊都習慣會先抽一個<code>BaseController</code>或<code>BaseApiController</code>放著，其他各自的<code>Controller</code>都先繼承該<code>BaseController</code>，好處馬上就用到了，這種統一解析<code>Response</code>的功能就可以寫在<code>BaseApiController</code>上面了</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Refit;</span><br><span class="line"><span class="keyword">using</span> System.Text.Json;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">async</span> <span class="title">Task</span>&lt;<span class="title">IActionResult</span>&gt; <span class="title">ResponseArrangement</span>&lt;<span class="title">T</span>&gt;(<span class="params">ApiResponse&lt;T&gt; response</span>)</span></span><br><span class="line"><span class="function">    <span class="keyword">where</span> T : <span class="keyword">class</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 以上省略</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (response.StatusCode)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> System.Net.HttpStatusCode.OK:</span><br><span class="line">            <span class="keyword">return</span> Ok(response.Content);</span><br><span class="line">        <span class="keyword">case</span> System.Net.HttpStatusCode.BadRequest:</span><br><span class="line">            <span class="keyword">return</span> BadRequest(JsonSerializer.Deserialize&lt;Object&gt;(response.Error.Content));</span><br><span class="line">        <span class="literal">default</span>:</span><br><span class="line">            <span class="keyword">return</span> StatusCode(<span class="number">500</span>, JsonSerializer.Deserialize&lt;Object&gt;(response.Error.Content));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看了以上<code>code</code>，不要說其他好處，光程式碼長度就已經是非用它不可的理由，程式碼邏輯清楚，簡短，對於錯誤追縱也是有很大的幫助的。</p>
<p>畢竟前台定位是左手進，右手出，因此不要處理過多的邏輯，出錯機率也會大大的降低，找問題也比較快，因此透過<code>Refit</code>提供的<code>ApiResponse</code>來包裝<code>Response</code>是最好不過的選擇了。</p>
<h2 id="前台Api宣告"><a href="#前台Api宣告" class="headerlink" title="前台Api宣告"></a>前台Api宣告</h2><p>上面把<code>Api</code>處理所需的相關邏輯方法都宣告完畢，進入到最後一個環節，寫<code>Api Controller</code>邏輯，<code>Refit</code>的好處之一，就像呼叫方法一樣呼叫，其實是完成一個<code>HttpRequest</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Route(<span class="string">&quot;api/v&#123;version:apiVersion&#125;/orders&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderController</span> : <span class="title">BaseApiController</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IAppServerApiRepository _appServiceApi;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderController</span>(<span class="params">IAppServerApiRepository appServiceApi, IAuthServerApiRepository authServerApiRepo</span>) : <span class="title">base</span>(<span class="params">authServerApiRepo</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _appServiceApi = appServiceApi;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 訂單建立作業</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;requestDto&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    [<span class="meta">HttpPost(<span class="string">&quot;&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">CreateOrder</span>(<span class="params">OrderRequestDto requestDto</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> response = <span class="keyword">await</span> _appServiceApi.OrderCreate(requestDto);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> ResponseArrangement(response);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>筆者因文章篇幅及<code>AuthServer</code>的使用跟<code>Refit</code>無相關就不在此篇示範呼叫<code>AuthServer</code>的相關程式碼，因為<code>ApiResponse&lt;T&gt;</code>這個已經包含<code>TryCatch</code>的程序，因此只要判斷<code>Response</code>的<code>StatusCode</code>，很輕易地處理<code>BadRequest</code>的回應，對於這種開發前台站台來說，應該是不用到一天就可以完成開發，藉由此篇，祝大家都能早早下班。</p>
<p>參考</p>
<ul>
<li><a href="https://github.com/reactiveui/refit">https://github.com/reactiveui/refit</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>refit</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>refit</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]FluentValidation再續前緣</title>
    <url>/2023/11/27/fluent-validation-new/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者最近在公司負責開發一個全新的<code>API</code>對外系統，因沒有舊系統包袱，可以設計統一<code>Response</code>，統一的<code>ExceptionHandlerMiddleware</code>，只多不嫌少的各種<code>CustomizeException</code>等等，然而接受客戶端的<code>Request</code>時，勢必要進行<code>Validation</code>作業，可以重捨<code>FluentValidation</code>的懷抱了，此篇就以筆者遇到的情境及解法介紹為主，讓我們看下去吧。</p>
<span id="more"></span>

<p>先列一下筆者這邊使用的套件的版本號</p>
<ul>
<li><code>Fluent Validation</code> <code>11.7.1</code></li>
<li><code>Fluent.Validation.AspNetCore</code> <code>11.3.0</code></li>
</ul>
<p>再來敘述一下筆者這邊的環境遇到的問題，因<code>EncryptKey</code>放在資料庫的因素，需要<code>Validator</code>中連線資料庫並取得<code>EncryptKey</code>，這樣才能提早驗證客戶端傳來的加密字串是否可以成功解密，就不用等到商業邏輯處理時才爆錯，<code>DB Access</code>相關程式碼會使用到<code>Async</code>方法，參考<a href="https://docs.fluentvalidation.net/en/latest/async.html">https://docs.fluentvalidation.net/en/latest/async.html</a>此篇中的說明，不適用<code>ASP.Net Core</code>的<code>Validaion Pipeline</code>，等於沒有使用到AutoValidation的好處，自己需要爾外透過<code>IVlidator&lt;T&gt;.Validate</code>這種手動驗證的方式進行驗證，也因此無法透過設定<code>ConfigureApiBehaviorOptions</code>來指定<code>InvalidModelStateResponseFactory</code>的統一<code>Response</code>，稍嫌可惜，筆者說的都在這篇文章上<a href="https://medium.com/codex/custom-error-responses-with-asp-net-core-6-web-api-and-fluentvalidation-888a3b16c80f">https://medium.com/codex/custom-error-responses-with-asp-net-core-6-web-api-and-fluentvalidation-888a3b16c80f</a>。</p>
<h2 id="驗證思路"><a href="#驗證思路" class="headerlink" title="驗證思路"></a>驗證思路</h2><p>筆者想像中，在每一個<code>Action</code>開頭中多了一個<code>Validate</code>的作業，只是型別不一樣，但行為是一致的</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderController</span>: <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">readonly</span> IValidator&lt;OrderRequestDto&gt; _validator;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderController</span>(<span class="params">IValidator&lt;OrderRequestDto&gt; validator</span>)</span></span><br><span class="line">	&#123;</span><br><span class="line">		_validator = validtor;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">Create</span>(<span class="params">OrderRequestDto request</span>)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">var</span> validateResult = <span class="keyword">await</span> _validator.Validate(request);</span><br><span class="line">		<span class="keyword">if</span>(!validateResult.IsValid())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> BadRequest(<span class="keyword">new</span> CommonResponse()&#123; Message = validateResult.Errors.Select(x =&gt; x.ErrorMessage).Aggregate((x, y) =&gt; <span class="string">$&quot;<span class="subst">&#123;x&#125;</span> | <span class="subst">&#123;y&#125;</span>&quot;</span>)&#125;);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 以下省略</span></span><br><span class="line">		<span class="comment">// Call Business Logic Service</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>寫到這邊筆者想起剛開始撰寫<code>MVC5</code>的時候，老是想用上<code>ActionFilter</code>，盡量讓統一行為在<code>ActionFilter</code>中進行，達到<code>DRY</code>的精神。但不外乎常用到的情境就是<code>ModelState</code>的驗證，不過時回應統一的<code>Response</code>，這次情境只是多了一個型別的宣告，那就來用各<code>Generic Action Filter</code>吧，接著就誕生<code>ValidationFilterAttribute</code></p>
<h2 id="實作IAsyncActionFilter"><a href="#實作IAsyncActionFilter" class="headerlink" title="實作IAsyncActionFilter"></a>實作IAsyncActionFilter</h2><p>因為非同步的行為，筆者這邊採用<code>IAsyncActionFilter</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ValidationFilterAttribute</span>&lt;<span class="title">T</span>&gt; : <span class="title">IAsyncActionFilter</span></span><br><span class="line">    <span class="keyword">where</span> <span class="title">T</span> : <span class="keyword">class</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IValidator&lt;T&gt; _validator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ValidationFilterAttribute</span>(<span class="params">IValidator&lt;T&gt; validator</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _validator = validator;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">OnActionExecutionAsync</span>(<span class="params">ActionExecutingContext context, ActionExecutionDelegate next</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> param = context.ActionArguments.First(p =&gt; p.Value <span class="keyword">is</span> T);</span><br><span class="line">        <span class="keyword">var</span> validateResult = <span class="keyword">await</span> _validator.ValidateAsync((T)param.Value);</span><br><span class="line">        <span class="keyword">if</span> (!validateResult.IsValid)</span><br><span class="line">        &#123;</span><br><span class="line">            context.Result = <span class="keyword">new</span> BadRequestObjectResult(<span class="keyword">new</span> CommonResponse()</span><br><span class="line">            &#123;</span><br><span class="line">                Message = validateResult.Errors.Select(x =&gt; x.ErrorMessage).Aggregate((x, y) =&gt; <span class="string">$&quot;<span class="subst">&#123;x&#125;</span> | <span class="subst">&#123;y&#125;</span>&quot;</span>)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">await</span> next();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="註冊IAsyncActionFilter"><a href="#註冊IAsyncActionFilter" class="headerlink" title="註冊IAsyncActionFilter"></a>註冊IAsyncActionFilter</h2><p>註冊方式是滿簡單的，筆者這邊就透過<code>dotnet core</code>預設的DI，註冊為<code>Scope</code>類型服務</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">services.AddScoped(<span class="keyword">typeof</span>(ValidationFilterAttribute&lt;&gt;));</span><br></pre></td></tr></table></figure>

<h2 id="套用IAsyncActionFilter"><a href="#套用IAsyncActionFilter" class="headerlink" title="套用IAsyncActionFilter"></a>套用IAsyncActionFilter</h2><p>撰寫完畢，註冊完成後，將套用在想套用的<code>Action</code>上吧</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderController</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IOrderService _orderService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IMapper _mapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderController</span>(<span class="params">IOrderService orderService, IMapper mapper</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _orderService = orderService;</span><br><span class="line">        _mapper = mapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 建立訂單作業</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;orderRedeemRequestDto&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    [<span class="meta">ServiceFilter(typeof(ValidationFilterAttribute&lt;OrderRequestDto&gt;))</span>]</span><br><span class="line">    [<span class="meta">HttpPost(<span class="string">&quot;create&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">Redeem</span>(<span class="params">OrderRequestDto orderRequestDto</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Ok(<span class="keyword">await</span> _orderService.Create(orderRequestDto););</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="設定CascadeMode"><a href="#設定CascadeMode" class="headerlink" title="設定CascadeMode"></a>設定CascadeMode</h2><p>依照<code>Validate</code>的角度來說，有前後相依性的，以筆者這邊的例子來說，加密字串為空的，根本不需要驗證解密是否可以成功，且解密驗證關係到連線資料庫，若能夠於加密字串為空這個<code>Validation Rule</code>驗證不過時，就不用往下驗證，對於執行效能來說是好的，<code>FluentValidation</code>也有提供其方便設定的方式，依照版本參考對應的設定，筆者這邊的版本11來說，分為</p>
<ul>
<li>Global Level</li>
<li>Class Level</li>
<li>Rule Level</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderRequestValidator</span> : <span class="title">AbstractValidator</span>&lt;<span class="title">OrderRequestDto</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IOrderRepository _orderRepo;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IEncryptService _encryptService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderRedeemRequestValidator</span>(<span class="params">IOrderRepository orderRepo, IEncryptService encryptService</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _orderRepo= orderRepo;</span><br><span class="line">        _encryptService= encryptService;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.ClassLevelCascadeMode = CascadeMode.Stop;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 以下Rule設定省略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>因目前開發的是一個全新的<code>API</code>站台對外系統，比較沒有舊系統的包袱，可以照比較正統的方式設計其系統，各司其職的概念，尚未包含商業邏輯簡單驗證還是交給<code>Fluent Validation</code>，擋在前面，到<code>Service</code>層就專心處理商業邏輯就好，職責明確之外，也少了很多<code>code</code>塞在同一個地方窘境，偵錯起來也不會亂，一舉數得，還不行動嗎?</p>
<p>參考</p>
<ul>
<li><a href="https://docs.fluentvalidation.net/en/latest/index.html">https://docs.fluentvalidation.net/en/latest/index.html</a></li>
<li><a href="https://learn.microsoft.com/zh-tw/aspnet/core/mvc/controllers/filters?view=aspnetcore-7.0#dependency-injection">https://learn.microsoft.com/zh-tw/aspnet/core/mvc/controllers/filters?view=aspnetcore-7.0#dependency-injection</a></li>
<li><a href="/2021/08/24/fluent-validation/" title="[DotnetCore]後端驗證神器:Fluent Validation">[DotnetCore]後端驗證神器:Fluent Validation</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>fluent-validation</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>fluent-validation</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]Refit:Polly應用</title>
    <url>/2023/11/27/dotnetcore-refit-polly/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者在公司負責的系統是跟第三方串接有關的系統，因此經常要串接第三方的<code>API</code>，<code>WebServie</code>，<code>Dll</code>等串接方式，若是<code>API(Http Request)</code>串接則，筆者這邊都全面改用<code>Refit</code>來串接，好處就不再贅述了，即便透過<code>Refit</code>來發<code>Http Request</code>，原本的<code>DotnetCore</code>預設的<code>HttpClient</code>相關的延伸應用，皆可延續使用，以此篇主題來說，筆者這邊想使用<code>Polly</code>做<code>Retry</code>的機制，讓我們繼續看下去。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>筆者這邊對多個第三方串接的經驗來說，<code>HttpRequest</code>發出時的驗證，大概就遇過以下幾類</p>
<ul>
<li>定義好的<code>SecretKey</code>或其他設定值透過<code>Header</code>特定<code>Key</code>設定上去</li>
<li>以第一種設定之外，有些第三方，還會有加密<code>Request Body</code>後塞在某一個<code>HeaderKey</code>上以驗證封包正確性</li>
<li>有獨立<code>Api</code>可以取得<code>AccessToken</code>，並在每個<code>ApiRequest</code>上的<code>Authorization Header</code>上設定其取得的<code>AccessToken</code></li>
</ul>
<p>以獨立取得<code>AccessToken</code>來說，因<code>Http</code>連線成本比較高，若允許使用<code>Redis</code>的狀況下，就可以考慮將取得的<code>AccessToken</code>存於<code>Redis</code>上，並將過期時間設定為取得<code>AccessToken</code>時拿到的<code>ExpireTime</code>往<code>Redis</code>設定<code>ExpireTime</code>。所以會變成會先檢查Redis上面有無對應的<code>AccessToken</code>，有則直接取得並設定於<code>AuthorizationHeader</code>中，若無，則打一次取得<code>AccessToken</code>的<code>API</code>，將結果設定於<code>Redis</code>中，以便之後的<code>Request</code>取用。</p>
<p>但畢竟不是自己的系統，以筆者經驗來說，因時間差或第三方系統問題等等，在<code>Redis</code>上面的值尚未到期之前，還是有機會收到<code>401</code>，若沒有任何處理，可能都會以<code>Redis</code>上的<code>AccessToken</code>往第三方做驗證，止到<code>Redis</code>上面的<code>ExpireTime</code>到期為止，總不可能讓系統無法運作，還是想些辦法來解決這個問題。</p>
<p>筆者的思考脈絡就是，既然系統是靠<code>Redis</code>來決定要不要打取得<code>AccessToken</code>的<code>API</code>，就在<code>Redis</code>上動手腳，搭配<code>Polly</code>上的設定，收到<code>401</code>時的行為如下</p>
<ul>
<li>將<code>Redis</code>上的值刪除</li>
<li>重試一次<ul>
<li>重發一次<code>HttpRequest</code>，這時<code>Redis</code>上的值被刪除，因此會再打一次取得<code>AccessToken</code>的<code>API</code>，將最新的<code>AccessToken</code>設定於<code>Redis</code>中</li>
</ul>
</li>
</ul>
<p>以上兩步驟就能徹底解決問題</p>
<h2 id="客製HttpMessageHandler"><a href="#客製HttpMessageHandler" class="headerlink" title="客製HttpMessageHandler"></a>客製HttpMessageHandler</h2><p>透過<code>HttpMessageHandler</code>，遇到<code>401</code>時將<code>Redis</code>上的值刪除</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UnAuthorizeHttpMessageHandler</span> : <span class="title">MyHttpMessageHandler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IRedisRepository _redisRepo;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnAuthorizeHttpMessageHandler</span>(<span class="params">ApiRequestPipelineModel pipeline, ITimeWrapper timeWrapper, IApiLogRepository apiLogRepo, IRedisRepository redisRepo, IHttpContextAccessor httpContextAccessor</span>) : <span class="title">base</span>(<span class="params">pipeline, timeWrapper, apiLogRepo, httpContextAccessor</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _redisRepo = redisRepo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">async</span> Task&lt;HttpResponseMessage&gt; <span class="title">SendAsync</span>(<span class="params">HttpRequestMessage request, CancellationToken cancellationToken</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> response = <span class="keyword">await</span> <span class="keyword">base</span>.SendAsync(request, cancellationToken);</span><br><span class="line">        <span class="keyword">if</span> (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">await</span> _redisRepo.DeleteAsync(<span class="string">&quot;TOKEN&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面出現的<code>MyHttpMessageHandler</code>為上幾篇有介紹到，需要的朋友請參考 <a href="/2023/11/27/dotnetcore-refit-http-handler/" title="[DotnetCore]Refit:HttpMessageHandler應用">[DotnetCore]Refit:HttpMessageHandler應用</a></p>
<h2 id="Polly套用"><a href="#Polly套用" class="headerlink" title="Polly套用"></a>Polly套用</h2><p>這個部份已被微軟整合進<code>http</code>相關套件中，我們只要安裝<code>Microsoft.Extensions.Http.Policy</code>即可，宣告一下對應的<code>retry</code>機制</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> retryPolicy = HttpPolicyExtensions</span><br><span class="line">  .HandleTransientHttpError()</span><br><span class="line">  .OrResult(response =&gt; response.StatusCode == HttpStatusCode.Unauthorized)</span><br><span class="line">  .RetryAsync(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h2 id="註冊Refit"><a href="#註冊Refit" class="headerlink" title="註冊Refit"></a>註冊Refit</h2><p>透過<code>Refit</code>宣告時將上面宣告好的<code>Retry Policy</code>掛到<code>refit</code>的設定中即可</p>
<ul>
<li>首先安裝<code>Microsoft.Extensions.Http.Polly</code>這個<code>nuget</code>套件</li>
<li>接在<code>AddRefitClient</code>後面即可，<code>ExtensionMethod</code>為<code>AddPolicyHandler</code></li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">services.AddRefitClient&lt;ITestApiRepository&gt;()</span><br><span class="line">    .ConfigureHttpClient(x =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        x.BaseAddress = <span class="keyword">new</span> Uri(config[<span class="string">&quot;BaseUrl:Test&quot;</span>]);</span><br><span class="line">    &#125;)</span><br><span class="line">    .AddHttpMessageHandler&lt;UnAuthorizeHttpMessageHandler&gt;()</span><br><span class="line">    .AddPolicyHandler(retryPolicy);</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>藉由這篇來介紹一下<code>Polly</code>於<code>HttpRequest</code>時的應用，若需要判定<code>HttpResponse</code>的<code>StatusCode</code>要做一些重試的動作，不妨可以試試搭配<code>Polly</code>的<code>RetryPolicy</code>，設定上也方便，與主邏輯也分開，各司其職，肯定比自己手刻的<code>Retry</code>機制好，也比較不會有無法預測的<code>SideEffect</code>的出現，藉由這篇來了解一下，我們下篇見了。</p>
<p>參考</p>
<ul>
<li><a href="https://github.com/App-vNext/Polly.Extensions.Http/blob/master/README.md">https://github.com/App-vNext/Polly.Extensions.Http/blob/master/README.md</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>refit</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>refit</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]Refit:HttpMessageHandler應用</title>
    <url>/2023/11/27/dotnetcore-refit-http-handler/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者在 <a href="/2023/07/06/dotnetcore-refit-intro/" title="[DotnetCore]Refit初體驗">[DotnetCore]Refit初體驗</a>那篇中有說到，選擇的<code>Refit</code>的原因有其中一項是可以繼續沿用自定義<code>HttpMessageHandler</code>，此篇就以<code>Refit</code>註冊的同時也掛上自定義<code>HttpMessageHandler</code>的教學。</p>
<span id="more"></span>

<p>筆者這邊就以<code>ApiLog</code>這個話題延續，就以實作<code>ApiLog</code>為主去完成自定義<code>HttpMessageHandler</code>，大概邏輯就是</p>
<ul>
<li>依照<code>Request</code>，新增<code>ApiLog</code>，取得<code>PK</code>欄位值</li>
<li>執行<code>HttpRequest</code></li>
<li>依照<code>Response</code>及第一步驟<code>PK</code>欄位值，更新<code>ApiLog</code></li>
</ul>
<h2 id="撰寫自定義HttpMessageHandler"><a href="#撰寫自定義HttpMessageHandler" class="headerlink" title="撰寫自定義HttpMessageHandler"></a>撰寫自定義HttpMessageHandler</h2><h3 id="取得Request"><a href="#取得Request" class="headerlink" title="取得Request"></a>取得Request</h3><p>目前這部份會分幾個步驟，首先是解析<code>Request</code>，組<code>ApiLog</code>所需欄位</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> bodyContent = request.Content == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : <span class="keyword">await</span> request.Content.ReadAsStringAsync();</span><br><span class="line"><span class="comment">// 以下僅供參考:組出ApiLog，並新增至DB</span></span><br><span class="line"><span class="keyword">var</span> apiLog = <span class="keyword">new</span> ApiLog(requestId, <span class="string">$&quot;<span class="subst">&#123;request.RequestUri&#125;</span>&quot;</span>, bodyContent, now);</span><br><span class="line">apiLog = <span class="keyword">await</span> _apiLogRepo.AddApiLog(apiLog);</span><br></pre></td></tr></table></figure>

<h3 id="執行HttpRequest"><a href="#執行HttpRequest" class="headerlink" title="執行HttpRequest"></a>執行HttpRequest</h3><p>這邊就單純了，畢竟沒有要特別做任何事，直接執行<code>base</code>的方法即可</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> response = <span class="keyword">await</span> <span class="keyword">base</span>.SendAsync(request, cancellationToken);</span><br></pre></td></tr></table></figure>

<h3 id="取得Response並更新ApiLog"><a href="#取得Response並更新ApiLog" class="headerlink" title="取得Response並更新ApiLog"></a>取得Response並更新ApiLog</h3><p>這邊主要是讀出<code>Response</code>結果，更新<code>ApiLog</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> responseResult = response.Content == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : <span class="keyword">await</span> response.Content.ReadAsStringAsync();</span><br><span class="line"><span class="comment">// 以下僅供參考:更新ApiLog及更新DB(主要紀錄Response中的StatusCode、response內容及response收到時間</span></span><br><span class="line">apiLog.UpdateResponseInfo(((<span class="built_in">int</span>)response.StatusCode).ToString(), responseResult, _timeWrapper.Now);</span><br><span class="line"><span class="keyword">await</span> _apiLogRepo.UpdateApiLog(apiLog);</span><br></pre></td></tr></table></figure>

<p>最後完整的自定義<code>HttpMessageHandler</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyHttpMessageHandler</span> : <span class="title">DelegatingHandler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> ApiRequestPipelineModel _pipeline = <span class="literal">default</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ITimeWrapper _timeWrapper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IApiLogRepository _apiLogRepo;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IHttpContextAccessor _contextAccessor;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyHttpMessageHandler</span>(<span class="params">ApiRequestPipelineModel pipeline, ITimeWrapper timeWrapper, IApiLogRepository apiLogRepo, IHttpContextAccessor contextAccessor</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _pipeline = pipeline;</span><br><span class="line">        _timeWrapper = timeWrapper;</span><br><span class="line">        _apiLogRepo = apiLogRepo;</span><br><span class="line">        _contextAccessor = contextAccessor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">async</span> Task&lt;HttpResponseMessage&gt; <span class="title">SendAsync</span>(<span class="params">HttpRequestMessage request, CancellationToken cancellationToken</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> pipelineModel = _contextAccessor?.HttpContext?.RequestServices.GetRequiredService&lt;ApiRequestPipelineModel&gt;();</span><br><span class="line">        <span class="keyword">if</span>(pipelineModel != <span class="literal">null</span>) &#123; _pipeline = pipelineModel; &#125;</span><br><span class="line">        <span class="keyword">var</span> bodyContent = request.Content == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : <span class="keyword">await</span> request.Content.ReadAsStringAsync();</span><br><span class="line">        <span class="keyword">var</span> apiLog = <span class="keyword">new</span> ApiLog(_pipeline.RequestId, <span class="string">$&quot;<span class="subst">&#123;request.RequestUri&#125;</span>&quot;</span>, bodyContent, _timeWrapper.Now);</span><br><span class="line">        apiLog = <span class="keyword">await</span> _apiLogRepo.AddApiLog(apiLog);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> response = <span class="keyword">await</span> <span class="keyword">base</span>.SendAsync(request, cancellationToken);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> responseResult = response.Content == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : <span class="keyword">await</span> response.Content.ReadAsStringAsync();</span><br><span class="line">        apiLog.UpdateResponseInfo(((<span class="built_in">int</span>)response.StatusCode).ToString(), responseResult, _timeWrapper.Now);</span><br><span class="line">        <span class="keyword">await</span> _apiLogRepo.UpdateApiLog(apiLog);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>裡面用到的部份，簡單解釋一下，僅供參考，還是要依照各位環境中實際應用到的方式撰寫，筆者這邊環境就是<code>ApiLog</code>，因此想盡辦法把<code>Request</code>，<code>Response</code>倒出來記錄</p>
<ul>
<li><code>ApiRequestPipelineModel</code> : 為串起一個<code>Request</code>中的所有<code>ServiceRecord</code>，透過<code>AddScoped</code>特性將取得統一的<code>RequestId</code></li>
<li><code>ITimeWrapper</code> :統一取得時間的<code>Service</code></li>
<li><code>IApiLogRepository</code> : <code>ApiLog DB Acess</code>用<code>Repository</code></li>
<li><code>IHttpContextAccessor</code> : 這個下一篇會詳細解釋原因，為第一項<code>ApiRequestPipelineModel</code>中的<code>RequestId</code>而特地引用</li>
</ul>
<h2 id="註冊自定義HttpMessageHandler"><a href="#註冊自定義HttpMessageHandler" class="headerlink" title="註冊自定義HttpMessageHandler"></a>註冊自定義HttpMessageHandler</h2><p>套用方式也非常簡單</p>
<ul>
<li>首先要安裝<code>Microsoft.Extensions.Http</code>這個<code>nuget</code>套件</li>
<li>最後只要接在<code>AddRefitClient()</code>後面即可，<code>ExtensionMethod</code>為<code>AddHttpMessageHandler</code></li>
</ul>
<p>完整註冊程式碼如下</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">services.AddRefitClient&lt;ITestApiRepository&gt;()</span><br><span class="line">    .ConfigureHttpClient(x =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        x.BaseAddress = <span class="keyword">new</span> Uri(config[<span class="string">&quot;BaseUrl:Test&quot;</span>]);</span><br><span class="line">    &#125;)</span><br><span class="line">    .AddHttpMessageHandler&lt;MyHttpMessageHandler&gt;();<span class="comment">//主要是這行</span></span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>之所以<code>Refit</code>好用的地方在於，不與<code>HttpClient</code>擁有的延伸方法衝突，可繼續使用，不會破壞原有的架構，但發<code>HttpRequest</code>變得更簡易了，不管是撰寫上，或者抓<code>Error</code>上，列幾個筆者喜歡的延伸方法</p>
<ul>
<li><a href="/2023/07/06/dotnetcore-refit-intro/" title="[DotnetCore]Refit初體驗">[DotnetCore]Refit初體驗</a> 提到的透過 `HttpClientFactory` 取得 `HttpClient` 實體</li>
<li>就像本篇可以繼續使用<code>AddHttpMessageHandler</code>方法註冊其<code>Handler</code></li>
<li>接下來會介紹的<code>HttpRequest</code>與<code>Polly</code>的結合</li>
</ul>
<p>此篇就到這邊了，下篇見。</p>
<p>參考</p>
<ul>
<li><a href="https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.ihttpclientbuilder?view=dotnet-plat-ext-7.0">https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.ihttpclientbuilder?view=dotnet-plat-ext-7.0</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>refit</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>refit</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]Refit:API介紹及應用</title>
    <url>/2023/07/08/dotnetcore-refit-api-intro/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者這篇就繼續來介紹<code>Refit</code>的各種用法，依照篇幅會再拆成數篇，筆者會參考官方<code>Document</code>的脈絡，加上筆者已經在工作場合上用到的一些技巧，詳細介紹其用法，好的套件會帶你飛，真的不是說說而已，<code>Refit</code>的API，完全足夠克服於工作場合中遇到的各種挑戰，讓你輕鬆完成<code>Http Request</code>的請求。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><h2 id="API-Atttribute"><a href="#API-Atttribute" class="headerlink" title="API Atttribute"></a>API Atttribute</h2><p>這一節就是設定<code>Http Methods</code>的套用，就很直覺地將Method當作Keyword套上，滿像<code>dotnet mvc</code>的<code>Route</code>設置，只是沒有<code>Http</code>這個<code>Keyword</code>，<code>Refit</code>這邊就只保留<code>Get</code>, <code>Post</code>，其餘跟<code>Route</code>設定十分相像。還有一些<code>AliasAs</code>，<code>Route參數可以為Object的某一個屬性值</code>等進階設定可以使用，筆者這邊目前沒用到就不做特別介紹，有需求的朋友可以到官方<code>Docuement</code>參考其用法</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 與Route設定一樣，Route參數則透過大括弧包住對應參數名稱</span></span><br><span class="line">[<span class="meta">Post(<span class="string">&quot;/postUrl/&#123;apiToken&#125;&quot;</span>)</span>]</span><br><span class="line">Task&lt;ApiResponse&lt;ResponseModel&gt;&gt; Query(RequestModel requestModel, [Header(<span class="string">&quot;X-SecretKey&quot;</span>)] <span class="built_in">string</span> secretKey, <span class="built_in">string</span> apiToken);</span><br></pre></td></tr></table></figure>

<h2 id="Request內容設定"><a href="#Request內容設定" class="headerlink" title="Request內容設定"></a>Request內容設定</h2><p>如筆者在這系列文中的第一篇所說，筆者負責的系統特性，與第三方廠商串接，各種需求都會出現，<code>Refit</code>這邊都有對應的解法，能叫人不愛嗎?以筆者工作場合中用到的為主作介紹，目前碰到的將<code>Request</code>內容傳送的型式為</p>
<ul>
<li>塞於<code>Body</code>，最常見的一種</li>
<li><code>FormPost</code>型式，比較老牌的廠商愛用</li>
<li><code>QueryParameters</code>，偶爾有遇到查詢參數放置於<code>QueryParameters</code>中</li>
</ul>
<h3 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h3><p>這就是最簡單也最常見的一種，以<code>Refit</code>來說，這也是預設的一種，因此沒有套上此<code>Attribute</code>，預設也會透過<code>Body</code>型式傳送，筆者這邊就為容易分辨<code>Body</code>參數或其他<code>Route</code>參數，都會套上<code>[Body]</code>，示意如下</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Post(<span class="string">&quot;/postUrl&quot;</span>)</span>]</span><br><span class="line">Task&lt;ApiResponse&lt;ResponseModel&gt;&gt; QueryProcess([Body]RequestModel requestModel);</span><br></pre></td></tr></table></figure>

<h3 id="FormPost"><a href="#FormPost" class="headerlink" title="FormPost"></a>FormPost</h3><p>若串接的<code>Rest API</code>為<code>FormPost</code>的型式塞入<code>Request</code>則，需再爾外設定，設定方式也是簡單，將<code>[Body]</code>上多加上設定，調整為<code>[Body(BodySerializationMethod.UrlEncoded)]</code>，示意如下</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Post(<span class="string">&quot;/postUrl&quot;</span>)</span>]</span><br><span class="line">Task&lt;ApiResponse&lt;ResponseModel&gt;&gt; QueryProcess([Body(BodySerializationMethod.UrlEncoded)]RequestModel requestModel);</span><br></pre></td></tr></table></figure>

<h3 id="QueryParameters"><a href="#QueryParameters" class="headerlink" title="QueryParameters"></a>QueryParameters</h3><p>若以<code>QueryParameters</code>的型式傳出<code>Request</code>內容則，需透過<code>[Query]</code>這個<code>Attribute</code>讓<code>Refit</code>知道，筆者這系列的第一篇即是<code>Query</code>的型式送出<code>Request</code>內容，如下</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Get(<span class="string">&quot;/WEBAPI/LandPrice/Lastest&quot;</span>)</span>]</span><br><span class="line">Task&lt;List&lt;LandData&gt;&gt; GetLandPriceAsync([Query] LandPriceParameters parameters);</span><br></pre></td></tr></table></figure>

<h2 id="Header設定"><a href="#Header設定" class="headerlink" title="Header設定"></a>Header設定</h2><p>如筆者在這系列文中第一篇提到的痛點，<code>Header</code>的值設定，在<code>Refit</code>世界中如此的簡單啊，靜態，動態皆可設定，示意如下:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 靜態:該第三方API串接時固定帶入某一個值</span></span><br><span class="line">[<span class="meta">Headers(<span class="string">&quot;User-Agent: Awesome Octocat App&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IGitHubApi</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Get(<span class="string">&quot;/users/&#123;user&#125;&quot;</span>)</span>]</span><br><span class="line">    <span class="function">Task&lt;User&gt; <span class="title">GetUser</span>(<span class="params"><span class="built_in">string</span> user</span>)</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Post(<span class="string">&quot;/users/new&quot;</span>)</span>]</span><br><span class="line">    <span class="function">Task <span class="title">CreateUser</span>(<span class="params">[Body] User user</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 動態:呼叫時決定放入的token</span></span><br><span class="line">[<span class="meta">Get(<span class="string">&quot;/getUrl&quot;</span>)</span>]</span><br><span class="line"><span class="function">Task&lt;TemplatesModel&gt; <span class="title">GetTemplateAsync</span>(<span class="params">[Header(<span class="string">&quot;Authorization&quot;</span></span>)] <span class="built_in">string</span> token)</span>;</span><br></pre></td></tr></table></figure>

<h2 id="ContentType設定"><a href="#ContentType設定" class="headerlink" title="ContentType設定"></a>ContentType設定</h2><p>筆者這邊接觸到的就跟大家一般常見到的一樣，<code>json</code>及<code>xml</code></p>
<h3 id="application-json"><a href="#application-json" class="headerlink" title="application/json"></a>application/json</h3><p>這個是一般常見也是<code>Refit</code>的預設模式，若串接對象<code>API</code>為<code>application/json</code>則不用增加任何爾外設定。</p>
<h3 id="application-xml"><a href="#application-xml" class="headerlink" title="application/xml"></a>application/xml</h3><p>若串接對象<code>API</code>需要透過<code>Xml</code>格式則，需要再爾外安裝<code>Refit</code>的延伸套件: <code>Refit.Xml</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet add package Refit.Xml</span><br></pre></td></tr></table></figure>

<p>安裝完成後，<code>Refit</code>服務註冊時需爾外設定其<code>RefitSettings</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">services.AddRefitClient&lt;IxxApiRepository&gt;(<span class="keyword">new</span> RefitSettings()</span><br><span class="line">&#123;</span><br><span class="line">    ContentSerializer = <span class="keyword">new</span> XmlContentSerializer()</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>最後切記，若有需求是<code>C# class</code>中的<code>PropertyName</code>與傳出去的<code>xml</code>封包中的名稱不一樣則，套用<code>Xml</code>相關<code>Attribute</code>設定，而非<code>System.Text.Json</code>相關<code>Attribute</code>設定</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">XmlRoot(<span class="string">&quot;XML&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">QueryRequestModel</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">XmlElement(<span class="string">&quot;VER_NO&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> VersionNumber &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">&quot;1.0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">XmlElement(<span class="string">&quot;PROCESSCODE&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ProcessCode &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">XmlElement(<span class="string">&quot;SRC&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Source &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">XmlElement(<span class="string">&quot;ITEMS&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> QueryRequestItems Items &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="實際應用場景"><a href="#實際應用場景" class="headerlink" title="實際應用場景"></a>實際應用場景</h2><p>筆者這邊使用方式為，<code>HttpRequest</code>當作是一種<code>Repository</code>來源，因此會把<code>interface</code>定義於<code>Repository</code>層，當然每一個獨立的<code>Repository</code>搭配一個<code>ApiService</code>，用意是甚麼呢，畢竟<code>Refit</code>幫你完成的是基礎又瑣碎的<code>HttpRequest</code>請求，但收到<code>Response</code>之後的解析，則算是商業邏輯層處理，<code>HttpRequest</code>相關的商業邏輯處理就寫在<code>ApiService</code>中，因此筆者針對一家第三方廠商的<code>API</code>串接，固定會有</p>
<ul>
<li><code>IxxApiRepository</code></li>
<li><code>IxxApiService</code></li>
</ul>
<p>最後附送一張實際開發中的專案，已經有數個第三方廠商的<code>API</code>串接，依照不同第三方廠商，就會建立一個獨立的<code>IxxApiRepository</code></p>
<img src="/2023/07/08/dotnetcore-refit-api-intro/Untitled.png" class="" title="[Dotnet Core Project: Repository List]">

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>這篇主要是以較常用到的API介紹為主，其中包含<code>Http Methods</code>及<code>Route</code>設定，<code>Request</code>的不同型式呈現，<code>Content Type</code>不同設定，了解到這邊，足以應付各種大大小小的<code>Rest API</code>串接了，下篇將介紹<code>Refit</code>的<code>Respone</code>回傳值相關說明。</p>
<p>參考</p>
<ul>
<li><a href="https://github.com/reactiveui/refit">https://github.com/reactiveui/refit</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>refit</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>refit</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]Refit:DotnetCore專案套用</title>
    <url>/2023/07/06/dotnetcore-refit-webapi/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者在上一篇: <a href="/2023/07/06/dotnetcore-refit-intro/" title="[DotnetCore]Refit初體驗">[DotnetCore]Refit初體驗</a> ，簡單介紹Refit的使用方式，因上篇中要簡單的呈現，因而透過<code>Linqpad</code>來完成示範，這篇則建立<code>Dotnet Core</code>完整專案，並將<code>Refit</code>套上使用。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><h2 id="建立WebApi專案"><a href="#建立WebApi專案" class="headerlink" title="建立WebApi專案"></a>建立WebApi專案</h2><p>筆者就直接透過dotnet cli完成建立WebApi專案</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建立方案資料夾</span></span><br><span class="line"><span class="built_in">mkdir</span> Refit.Demo</span><br><span class="line"><span class="built_in">cd</span> Refit.Demo\</span><br><span class="line"><span class="comment"># 建立 WebApi專案</span></span><br><span class="line">dotnet new webapi -o Refit.Demo.Api</span><br><span class="line"><span class="comment"># 建立方案檔</span></span><br><span class="line">dotnet new sln -n Refit.Demo</span><br><span class="line"><span class="comment"># 方案中加入上方建立好之WebApi專案</span></span><br><span class="line">dotnet sln Refit.Demo.sln add Refit.Demo.Api\Refit.Demo.Api.csproj</span><br></pre></td></tr></table></figure>

<h2 id="安裝相關套件"><a href="#安裝相關套件" class="headerlink" title="安裝相關套件"></a>安裝相關套件</h2><p>安裝相關套件，相關套件清單如下:</p>
<ul>
<li><code>Refit</code></li>
<li><code>Refit.HttpClientFactory</code>(透過<code>DI</code>註冊，需令<code>Refit</code>透過<code>dotnet core</code>內建<code>HttpClientFactory</code>取得<code>HttpClient</code>則需要安裝)</li>
<li><code>Refit.Newtonsoft.Json</code>(需使用<code>Newtonsoft.Json</code>做序列化，反序列化則需要安裝)</li>
<li><code>Refit.Xml</code>(若Request需轉成<code>XML</code>格式則需要安裝)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet add package Refit</span><br><span class="line">dotnet add package Refit.HttpClientFactory</span><br></pre></td></tr></table></figure>

<h2 id="建立Model及ApiService"><a href="#建立Model及ApiService" class="headerlink" title="建立Model及ApiService"></a>建立Model及ApiService</h2><p>筆者在上一篇: <a href="/2023/07/06/dotnetcore-refit-intro/" title="[DotnetCore]Refit初體驗">[DotnetCore]Refit初體驗</a> 有詳細列出，這邊就不贅述了</p>
<img src="/2023/07/06/dotnetcore-refit-webapi/Untitled.png" class="" title="[Project List Reference]">

<h2 id="建立Controller"><a href="#建立Controller" class="headerlink" title="建立Controller"></a>建立Controller</h2><p>建立一般WebApi使用Controller及宣告Action</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Route(<span class="string">&quot;api/opendata&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OpenDataApiController</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IOpenDataApiService _openDataApiService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OpenDataApiController</span>(<span class="params">IOpenDataApiService openDataApiService</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _openDataApiService = openDataApiService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 取得地政資料</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;parameters&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    [<span class="meta">HttpPost(<span class="string">&quot;landprice&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">GetLandData</span>(<span class="params">LandPriceParameters parameters</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Ok(<span class="keyword">await</span> _openDataApiService.GetLandPriceAsync(parameters));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="註冊其APIService"><a href="#註冊其APIService" class="headerlink" title="註冊其APIService"></a>註冊其APIService</h2><p>要在<code>Controller</code>中使用，需要將<code>IOpenDataApiService</code>需註冊於<code>Startup(Program)</code>中</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">builder.Services.AddRefitClient&lt;IOpenDataApiService&gt;()</span><br><span class="line">    .ConfigureHttpClient(x =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        x.BaseAddress = <span class="keyword">new</span> Uri(builder.Configuration[<span class="string">&quot;BaseUrl:OpenData&quot;</span>]);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>上面註冊步驟使用到<code>Configuration</code>，內容如下:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;BaseUrl&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;OpenData&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://openapi.land.moi.gov.tw&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="結果呈現"><a href="#結果呈現" class="headerlink" title="結果呈現"></a>結果呈現</h2><p>透過<code>Postman</code>可以測試一下<code>API</code>運作</p>
<img src="/2023/07/06/dotnetcore-refit-webapi/Untitled1.png" class="" title="[Postman result: land price list]">

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>非常簡單地套用並完成呼叫<code>HttpRequest</code>，<code>DotnetCore</code>寫到現在，不透過注入使用還真的有點不習慣，透過<code>Refit.HttpClientFactory</code>套件來完成註冊及注入，非常符合<code>DotnetCore</code>的撰寫風格，下一篇將詳細介紹<code>Refit</code>的各種用法。</p>
<p>參考</p>
<ul>
<li><a href="https://github.com/reactiveui/refit">https://github.com/reactiveui/refit</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>refit</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>refit</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]Refit初體驗</title>
    <url>/2023/07/06/dotnetcore-refit-intro/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者在公司負責的專案，大多數都跟其他廠商串接有關，串接方式百百種，最多就是<code>Http Request</code>了，因新專案已都使用<code>dotnet 6</code>來開發，透過<code>AddHttpClient</code>註冊，注入<code>HttpClient</code>，再將<code>HttpRequest</code>的實作封裝成<code>HttpClientRepository</code>，確實都滿順利的，但光<code>HttpClient</code>串接也是有百百種，有的廠商要<code>FormPost</code>方式送出<code>RequestContent</code>，有的廠商則一般常見的將<code>RequestContent</code>放在<code>Body</code>，格式方面有些則<code>json</code>格式，有些則<code>xml</code>等等，組合也是挺可怕的多，要一直調整其底層共用程式<code>HttpClientRepository</code>。</p>
<p>再則筆者在實作中遇到一個滿常見的問題，<code>Header</code>重複設定的錯誤，因<code>Http</code>連線成本確實不低，因此透過<code>AddHttpClient</code>使用<code>HttpClient</code>，希望由<code>dotnet</code>底層管理連線，降低其連線成本，以常見的<code>Header</code>設定來說，就屬<code>Authorization</code>了，筆者這邊為了加速往廠商端的查詢，會透過<code>Parallel</code>的方式併發出<code>Request</code>，全部<code>Response</code>都回來後才做商業邏輯處理，因此第一次連線後<code>Header</code>尚未設定的情況下，有一定的機率兩組執行緒碰撞一次，也有一定的機率兩組同時進到判斷式，要新增<code>Header</code>的值，搞得筆者連<code>Lock</code>機制都用上了，目前尚未找到更好的解，只能先這樣暴力解了。最後筆者自己本身在<code>Linqpad</code>上先行測試時會使用<code>HttpRequest</code>相關套件，例:<a href="https://restsharp.dev/">RestSharp</a>，心血來潮認真看了下其<code>API</code>，看到有<code>Headers</code>章節中的<code>API</code>: <code>AddOrUpdateHeader</code>，覺得完全是解決筆者的痛點，突然有一種<code>HttpRequest</code>應該是一個基礎建設，若能有一個套件幫忙實作完成，就可以專心地將所有精力投入在商業邏輯層面就好，進而縮短開發時間，然而某天在<code>LinkedIn</code>貼文上看到一個套件叫<code>[Refit](https://github.com/reactiveui/refit)</code>，不查還好，查完後覺得就它了。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>筆者主要選擇使用<code>Refit</code>，有以下原因：</p>
<ul>
<li>可透過注入的方式取得(底層亦是透過<code>HttpClientFactory</code>取得<code>HttpClient</code>物件)</li>
<li>可繼續沿用客製化<code>HttpMessageHandler</code></li>
<li>可繼續沿用<code>Polly</code>機制</li>
<li>最棒的一點，要增加不同廠商的<code>API</code>串接，多一組<code>Interface</code>宣告即可，終於不用再調整<code>HttpClient</code>底層邏輯了</li>
</ul>
<p>因此目前筆者開發串接廠商<code>API</code>的流程大致上如下：</p>
<ul>
<li>觀看廠商提供的<code>API</code>文件，若有範例，則透過<code>Postman</code>試打</li>
<li>將<code>API</code>文件或<code>Postman</code>中的<code>Response Sample</code>丟至<code>ChatGPT</code>轉成<code>C# class</code></li>
<li>定義對應的<code>Refit API interface</code></li>
<li>於<code>Startup</code>中註冊其服務</li>
</ul>
<p>筆者這篇文章內容則透過政府公開平台<a href="https://data.gov.tw/">OpenData</a>的API為例，示範怎麼使用，因簡單示範，就透過<code>Linqpad</code>來完成，但因<code>Refit</code>必須要有產生虛擬代碼，<code>Linqpad</code>上面要做一點手腳才有辦法進行，剛好筆者有看到解法</p>
<p><strong><a href="http://share.linqpad.net/xn3ac8.linq">http://share.linqpad.net/xn3ac8.linq</a></strong></p>
<h2 id="載入套件"><a href="#載入套件" class="headerlink" title="載入套件"></a>載入套件</h2><p>筆者就照<code>Liqnpad</code>引用套件流程套用<code>Refit</code></p>
<img src="/2023/07/06/dotnetcore-refit-intro/Untitled.png" class="" title="[Linqpad: install Refit package]">

<h2 id="宣告API"><a href="#宣告API" class="headerlink" title="宣告API"></a>宣告API</h2><p>筆者就省略上方列出的前兩個步驟，假設已拿到<code>C# class</code>內容，先宣告<code>QueryParameters</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LandPriceParameters</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> City &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Sec &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再宣告<code>ResponseModel</code>，Refit預設會透過<code>System.Text.Json</code>做序列化及反序列化，切記套用的<code>Json</code>相關<code>Attribute</code>，必須為<code>System.Text.Json</code>下的</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LandData</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">JsonPropertyName(<span class="string">&quot;LANDNO&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> LandNo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    [<span class="meta">JsonPropertyName(<span class="string">&quot;LANDPRICE&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> LandPrice &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    [<span class="meta">JsonPropertyName(<span class="string">&quot;CURRENTVALUE&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CurrentValue &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最後宣告主體，<code>API</code>規格，只要定義就等同寫完串接<code>API</code></p>
<blockquote>
<p><code>[Get(&quot;/WEBAPI/LandPrice/Lastest&quot;)]</code> Route中的第一個<code>/</code>非常重要，一定要加，不然會爆錯</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">OpenDataApiService</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Get(<span class="string">&quot;/WEBAPI/LandPrice/Lastest&quot;</span>)</span>]</span><br><span class="line">    Task&lt;List&lt;LandData&gt;&gt; GetLandPriceAsync([Query]LandPriceParameters parameters);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>筆者示範使用<code>Liqnpad</code>工具呈現，需參考上方所列的<code>linq</code>檔案</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//為上方所列之linq檔案載入</span></span><br><span class="line"><span class="meta">#load &quot;xn3ac8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">async</span> Task <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> baseUrl = <span class="string">@&quot;https://openapi.land.moi.gov.tw&quot;</span>;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">var</span> httpClient = <span class="keyword">new</span> HttpClient();</span><br><span class="line">    httpClient.BaseAddress = <span class="keyword">new</span> Uri(baseUrl);</span><br><span class="line">    <span class="comment">// ProxyRestService即最上面加入的load參考中的物件</span></span><br><span class="line">    <span class="keyword">var</span> apiService = ProxyRestService.For&lt;OpenDataApiService&gt;(httpClient);</span><br><span class="line">    <span class="keyword">var</span> response = <span class="keyword">await</span> apiService.GetLandPriceAsync(<span class="keyword">new</span> LandPriceParameters()&#123; City = <span class="string">&quot;H&quot;</span>, Sec = <span class="string">&quot;0001&quot;</span> &#125;);</span><br><span class="line">    response.Dump();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跑完後的結果如下(僅截取部份資料):</p>
<table>
<thead>
<tr>
<th>LandNo</th>
<th>LandPrice(元/平方公尺)</th>
<th>CurrentValue(元/平方公尺)</th>
</tr>
</thead>
<tbody><tr>
<td>00760050</td>
<td></td>
<td>81685</td>
</tr>
<tr>
<td>00810017</td>
<td></td>
<td>81685</td>
</tr>
<tr>
<td>00720014</td>
<td></td>
<td>71400</td>
</tr>
<tr>
<td>00720015</td>
<td></td>
<td>81685</td>
</tr>
<tr>
<td>00730003</td>
<td></td>
<td>163540</td>
</tr>
<tr>
<td>00740001</td>
<td></td>
<td>166591</td>
</tr>
</tbody></table>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>到這邊是不是覺得呼叫<code>HttpRequest</code>很簡單呢，當然不管是否自己實作<code>HttpClient</code>呼叫，或使用<code>Refit</code>完成<code>HttpRequest</code>，前面轉<code>C# Class</code>是避免不了的，後面測試也是免不了的，其中最大的好處還是在於<code>HttpClient</code>呼叫的基礎建設方法，不用因為你多串一個新的廠商，與以往不同而調整基礎建設，可以順順地依照筆者上方列出的串接廠商<code>API</code>流程完成串接，多了很多處理商業邏輯的時間，覺得CP值非常高，下一篇將介紹<code>Dotnet Core</code>專案套用<code>Refit</code>的流程。</p>
<p>參考</p>
<ul>
<li><a href="https://github.com/reactiveui/refit">https://github.com/reactiveui/refit</a></li>
<li><a href="https://forum.linqpad.net/discussion/2396/source-generator-support">https://forum.linqpad.net/discussion/2396/source-generator-support</a></li>
<li><a href="https://data.gov.tw/dataset/163138">https://data.gov.tw/dataset/163138</a></li>
<li><a href="https://data.gov.tw/dataset/163141">https://data.gov.tw/dataset/163141</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>refit</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>refit</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]AOP初體驗</title>
    <url>/2023/03/15/dotnetcore-aop-logging/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者負責的專案，是那種到處要跟第三方串接那種，第三方不管是內部或多個外部，串接方式不外乎就是<code>WebService</code>或是<code>Restful API</code>，或者提供<code>dll</code>檔案，多種形式見怪不怪，串接這時候釐清問題是最重要的，因此必須要確保我方系統上保有<code>Request</code>及<code>Response</code>以釐清問題，也是自保的一種概念，因為你無法保證串接的<code>Method</code>跟金額無關，這時候唯有留下系統軌跡才能保證你的清白(被害妄想症上身中)，筆者相信留下紀錄這件事，不管事不是跟別的系統串接，仍是很重要的課題。</p>
<p>然而對於<code>Restful API</code>這種串接方式，最方便留下紀錄了，只要共用一個<code>HttpClientRepository</code>，將發出<code>HttpRequest</code>集中在某一個<code>Method</code>中，方便事後增加其往來紀錄的相關程式碼，當然我方系統是被呼叫方的話，也是可以透過<code>DotnetCore</code>內建的<code>Middleware</code>能搞定。至於呼叫<code>WebService</code>或者<code>dll</code>檔案中的<code>Method</code>則比較傷腦筋一點，動用到今天的主角，<code>AOP Logging</code>，能夠輕鬆地不留痕跡地做到留下紀錄。</p>
<span id="more"></span>

<h2 id="AOP-Logging選項"><a href="#AOP-Logging選項" class="headerlink" title="AOP Logging選項"></a>AOP Logging選項</h2><p><code>AOP: Aspect Oriented Programming</code>，筆者這邊就不贅述了，網路上文章太多了，基本上<code>dotnetcore</code>上的<code>Middleware</code>應該就算是<code>AOP</code>的實作，且還有<code>Pipeline</code>的概念，一個接一個執行，筆者當初的想法也是如此，有沒有辦法找到類似像<code>Middleware</code>套用在一般的<code>Service Method</code>上，筆者現在都跳過<code>Google</code>，直接丟問題給<code>ChatGPT</code>了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">List the nuget package that can be logged method input and output like middleware, AOP pattern using dotnet core DI framework</span><br></pre></td></tr></table></figure>

<p>還真的找到滿像樣的回答</p>
<img src="/2023/03/15/dotnetcore-aop-logging/Untitled.png" class="" title="[ChatGPT result: AOP related nuget package list]">

<p>以<code>ChatGPT</code>回答來說，筆者大概猜得出來，除了第一個之外，其他都是第三方DI套件的附加功能，筆者專案皆是透過<code>dotnet core</code>內建的<code>DI</code>功能在注入使用所有相關<code>Service</code>，固然選第一個套件來<code>survey</code>了，這時候再用<code>google</code>搜尋該套件，找到該套件的<code>github</code>一探究竟，找到<code>document</code>，有了<code>document</code>就好辦事了。</p>
<h2 id="安裝對應套件"><a href="#安裝對應套件" class="headerlink" title="安裝對應套件"></a>安裝對應套件</h2><p>筆者就使用ChatGPT推薦的第一個套件了，因為等等會分兩個部分註冊</p>
<ul>
<li>Interceptor</li>
<li>DynamicProxyProvider</li>
</ul>
<p>以筆者的專案配置來說，會是<code>Service</code>專案及<code>Web</code>專案皆要安裝對應的套件</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dotnet <span class="keyword">add</span> package AspectCore.Extensions.DependencyInjection</span><br></pre></td></tr></table></figure>

<h2 id="製作LoggingInterceptor"><a href="#製作LoggingInterceptor" class="headerlink" title="製作LoggingInterceptor"></a>製作LoggingInterceptor</h2><p>首先要先製作一個<code>LoggingInterceptor</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ServiceMethodLoggingInterceptor</span> : <span class="title">AbstractInterceptorAttribute</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;ServiceMethodLoggingInterceptor&gt; _logger;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ApiRequestPipelineModel _apiRequestPipelineModel;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> GenericRepository&lt;ApiLog&gt; _apiLogRepo;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ITimeWrapper _timeWrapper;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServiceMethodLoggingInterceptor</span>(<span class="params">ILogger&lt;ServiceMethodLoggingInterceptor&gt; logger</span></span></span><br><span class="line"><span class="params"><span class="function">				, ApiRequestPipelineModel apiRequestPipelineModel</span></span></span><br><span class="line"><span class="params"><span class="function">				, GenericRepository&lt;ApiLog&gt; apiLogRepo</span></span></span><br><span class="line"><span class="params"><span class="function">				, ITimeWrapper timeWrapper</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger = logger;</span><br><span class="line">        _apiRequestPipelineModel = apiRequestPipelineModel;</span><br><span class="line">        _apiLogRepo = apiLogRepo;</span><br><span class="line">        _timeWrapper = timeWrapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">Invoke</span>(<span class="params">AspectContext context, AspectDelegate next</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Step1: Get method infos</span></span><br><span class="line">        <span class="keyword">var</span> methodName = context.ImplementationMethod.Name;</span><br><span class="line">        <span class="keyword">var</span> inputParams = context.GetParameters();</span><br><span class="line">        <span class="keyword">var</span> parameterObject = JsonHelper.SerializeObjectWithCamelCase(inputParams.Select(x =&gt; x.Value));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Step2: Add ApiLog</span></span><br><span class="line">				<span class="comment">// 初始化ApiLog物件</span></span><br><span class="line">        <span class="keyword">var</span> apiLog = <span class="keyword">new</span> ApiLog(_apiRequestPipelineModel.RequestId, <span class="string">$&quot;<span class="subst">&#123;methodName&#125;</span>&quot;</span>, parameterObject, _timeWrapper.Now);</span><br><span class="line">				<span class="comment">// 這邊透過Repository的AddAsync方法新增一筆ApiLog</span></span><br><span class="line">        <span class="keyword">await</span> _apiLogRepo.AddAsync(apiLog);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Step3: Execute method</span></span><br><span class="line">        <span class="keyword">await</span> next(context);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Step4: Update return value</span></span><br><span class="line">        <span class="keyword">var</span> output = context.ReturnValue;</span><br><span class="line">        <span class="keyword">var</span> response = output.Adapt&lt;BaseResponseModel&gt;();</span><br><span class="line">        apiLog.UpdateResponseInfo(response.ResponseCode, JsonHelper.SerializeObjectWithCamelCase(output), _timeWrapper.Now);</span><br><span class="line">        <span class="keyword">await</span> _apiLogRepo.UpdateAsync(apiLog);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>依上面的<code>Code</code>說明一下對應關係，因為跟本文無關就只列出概念性的解釋，想要參考的各位，請務必換成自己專案對應的寫法</p>
</blockquote>
<ul>
<li><code>ApiLog</code>，對應筆者專案使用的<code>Log</code>資料表(因為都是屬於第三方串接，與<code>Restful API</code>紀錄共用)</li>
<li><code>GenericRepository</code>，筆者專案使用的<code>CRUD</code>的Repository(單檔都透過它完成)</li>
<li><code>Adapt</code>方法，則是<a href="https://github.com/MapsterMapper/Mapster">Mapster</a>套件的功能，與<code>AutoMapper</code>功能相似，簡單用，效能更好</li>
<li>筆者這邊將物件變更都集中在該物件類別中，因此設計<code>UpdateResponseInfo</code>，透過此方法變更其值</li>
<li><code>ApiRequestPipelineModel</code>，筆者這邊是偷用<code>AddScoped</code>的好處，該物件建構式中初始化一個<code>GUID</code>放著，一個<code>Request</code>中經過的任何<code>Service</code>，只要注入該物件，都會拿到相同的<code>GUID</code>，以拿來關聯各種資料為同一個<code>Request</code>的追查依據</li>
</ul>
<h2 id="註冊Interceptor"><a href="#註冊Interceptor" class="headerlink" title="註冊Interceptor"></a>註冊Interceptor</h2><p>接著要透過註冊的方式註冊其上面寫的<code>ServiceMethodLoggingInterceptor</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> AspectCore.Configuration;</span><br><span class="line"><span class="keyword">using</span> AspectCore.Extensions.DependencyInjection;</span><br><span class="line"><span class="comment">// 其他Using省略</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ServiceRegistration</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IServiceCollection <span class="title">AddServices</span>(<span class="params"><span class="keyword">this</span> IServiceCollection services</span></span></span><br><span class="line"><span class="params"><span class="function">        , IConfiguration config</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 以上忽略</span></span><br><span class="line">        services.AddSingleton&lt;ServiceMethodLoggingInterceptor&gt;();</span><br><span class="line">        services.ConfigureDynamicProxy(config =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            config.Interceptors.AddServiced&lt;ServiceMethodLoggingInterceptor&gt;(Predicates.ForService(<span class="string">&quot;XXXService&quot;</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> services;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>註冊方式有很多種，參考中的使用指南都有示範，筆者用慣建構式注入的方式引用其對應的實作，因此</p>
<ul>
<li>透過<code>AddSingleton</code>的方式註冊其<code>Interceptor</code></li>
<li>透過<code>AddServiced</code>的方式新增其<code>Interceptor</code>至<code>DynamicProxyProvider</code>中</li>
<li>筆者這邊有指定某<code>XXXService</code>，因筆者把呼叫<code>Dll</code>對應的方法都集中在該<code>Service Class</code>中，若全域套用則不需增加此設定</li>
<li>筆者這邊習慣在某一個<code>Project</code>中的<code>Service</code>註冊集中在該<code>Project</code>的某一個<code>Extension</code>中，相關註冊對應程式碼可直接宣告在<code>Startup</code>中的<code>ConfigureService</code>即可</li>
</ul>
<h2 id="註冊DynamicProxyProvider"><a href="#註冊DynamicProxyProvider" class="headerlink" title="註冊DynamicProxyProvider"></a>註冊DynamicProxyProvider</h2><p>最後需要在<code>Program</code>那邊要作手腳，才算大功告成</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> AspectCore.Extensions.DependencyInjection;</span><br><span class="line"><span class="comment">// 其他Using省略</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="keyword">static</span> Task <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> host = CreateHostBuilder(args).Build();</span><br><span class="line">        <span class="keyword">await</span> host.RunAsync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IHostBuilder <span class="title">CreateHostBuilder</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> =&gt;</span><br><span class="line">        Host.CreateDefaultBuilder(args)</span><br><span class="line">            .ConfigureWebHostDefaults(webBuilder =&gt;</span><br><span class="line">                webBuilder</span><br><span class="line">                .ConfigureLogging(logging =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    logging.ClearProviders();</span><br><span class="line">                &#125;)</span><br><span class="line">                .UseNLog()</span><br><span class="line">                .UseStartup&lt;Startup&gt;())</span><br><span class="line">            <span class="comment">// 主要是以下這行</span></span><br><span class="line">            .UseServiceProviderFactory(<span class="keyword">new</span> DynamicProxyServiceProviderFactory());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>筆者喜歡<code>AOP</code>設計的原因就是在此文章中根本沒看到商業邏輯程式，意思就是完全不用動到主程式，就能做到紀錄<code>Input</code>, <code>Output</code>的功能，超棒的，且因為該套件設計是可以指定套用該<code>Interceptor</code>的服務名稱，更上一層樓了，只要改動註冊的地方，其他商業邏輯主程式也輕易地享有Logging的功能，這就是AOP設計的魅力所在，今天的分享就到這了，下篇見。</p>
<p>參考</p>
<ul>
<li><a href="https://github.com/dotnetcore/AspectCore-Framework/blob/master/docs/1.%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97.md">https://github.com/dotnetcore/AspectCore-Framework/blob/master/docs/1.使用指南.md</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>aop</tag>
      </tags>
  </entry>
  <entry>
    <title>[雜記]ChatGPT初體驗</title>
    <url>/2023/02/23/chatgpt-bootstrap-datepicker/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者在公司寫後台系統，重回<code>dotnet core MVC</code>的懷抱，不免俗的要搭配<code>jquery</code>來完成前端效果，離筆者好遙遠阿，畢竟在前公司寫<code>angular</code>寫了多年，被<code>model binding</code>的框架養胖了(誤，現在要重頭來蒐集<code>jquery</code>各種套件(武器)的時候了，畢竟筆者要獨力完成一個後台系統，雖然有別的系統可參考，還是個一大挑戰阿。筆者公司的後台系統使用<code>Admin LTE 3</code>的版本當作底層框架，雖然盡量使用裏頭整合好的<code>jquery</code>套件，這篇就假設預設框架未提供<code>datepicker</code>相關套件，跟著筆者一起來看看怎麼跟<code>ChatGPT</code>互動寫出<code>datepicker</code>的效果吧。</p>
<span id="more"></span>


<h2 id="詢問有名套件"><a href="#詢問有名套件" class="headerlink" title="詢問有名套件"></a>詢問有名套件</h2><p>第一步是問一下網路上有名的<code>datepicker</code>套件有哪些，因為<code>Admin LTE 3</code>是<code>bootstrap</code>為基底，因此要加上一個限制，帶有<code>bootstrap</code>樣式風格的<code>datepicker</code>套件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">List the famous datepicker jquery component with bootstrap style</span><br></pre></td></tr></table></figure>

<img src="/2023/02/23/chatgpt-bootstrap-datepicker/Untitled.png" class="" title="[ChatGPT list jquery components]">

<p>可以看到<code>ChatGPT</code>列了幾個知名套件，直接拿第一個來使用吧</p>
<h2 id="初始化方法"><a href="#初始化方法" class="headerlink" title="初始化方法"></a>初始化方法</h2><p>再來問<code>ChatGPT</code>大神使用方式吧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">List the methods of Bootstrap-datepicker jquery component</span><br></pre></td></tr></table></figure>

<img src="/2023/02/23/chatgpt-bootstrap-datepicker/Untitled1.png" class="" title="[ChatGPT list bootstrap-datepicker methods]">

<p>可以看到第一個方法<code>datepicker(options)</code>為初始化方法，筆者就使用這個方法來初始化我們的<code>datepicker</code></p>
<h2 id="製作Demo畫面"><a href="#製作Demo畫面" class="headerlink" title="製作Demo畫面"></a>製作Demo畫面</h2><p>筆者這邊教一下<code>VSCode</code>快速產生<code>html5</code>的方法，只要輸入<code>html:5</code>，即可產出完整的<code>html</code>(包含<code>header</code>及<code>body</code>)</p>
<h3 id="切換語言模式並產生html5頁面"><a href="#切換語言模式並產生html5頁面" class="headerlink" title="切換語言模式並產生html5頁面"></a>切換語言模式並產生html5頁面</h3><ul>
<li>透過<code>Ctrl+N</code>新增一個空白的檔案</li>
<li>透過<code>Ctrl+Shift+P</code>叫出<code>VSCode</code>的指令列</li>
<li>輸入<code>lang</code>即可看到<code>Change Language Mode</code></li>
</ul>
<img src="/2023/02/23/chatgpt-bootstrap-datepicker/Untitled2.png" class="" title="[VSCode command list-Change Language Mode]">

<ul>
<li>選擇<code>html</code>即可完成</li>
</ul>
<img src="/2023/02/23/chatgpt-bootstrap-datepicker/Untitled3.png" class="" title="[VSCode html language mode]">

<ul>
<li>最後輸入<code>html:5</code>後按下<code>Tab</code>鍵可以看到完整的<code>html5</code>的結構</li>
</ul>
<img src="/2023/02/23/chatgpt-bootstrap-datepicker/Untitled4.png" class="" title="[VSCode html:5 snippet]">

<h3 id="引入Bootstrap-datepicker的相關連結"><a href="#引入Bootstrap-datepicker的相關連結" class="headerlink" title="引入Bootstrap-datepicker的相關連結"></a>引入Bootstrap-datepicker的相關連結</h3><p>筆者為美化，這邊引入<code>bootstrap</code>，稍微排版一下<code>form</code>的結構</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--css(header tag中)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.2.3/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker3.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--javascript(body tag中)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://code.jquery.com/jquery-3.6.3.min.js&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">integrity</span>=<span class="string">&quot;sha256-pvPw+upLPUjgMXY0G+8O0xUf+/Im1MZjXxxgOcBQBXU=&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.2.3/js/bootstrap.bundle.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">    <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">    <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/locales/bootstrap-datepicker.zh-TW.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Form表單設計"><a href="#Form表單設計" class="headerlink" title="Form表單設計"></a>Form表單設計</h3><p>直接抄<code>Bootstrap</code>文件中的<code>Form</code>結構</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputEmail1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-label&quot;</span>&gt;</span>Start Date<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;start-date&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="datepicker初始化"><a href="#datepicker初始化" class="headerlink" title="datepicker初始化"></a>datepicker初始化</h2><p>筆者透過<code>ChatGPT</code>給的答案中的第一個<code>initial method</code>做初始化</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;      </span><br><span class="line">        $(<span class="string">&#x27;#start-date&#x27;</span>).<span class="title function_">datepicker</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>這邊先看一下效果吧</p>
<img src="/2023/02/23/chatgpt-bootstrap-datepicker/Untitled5.png" class="" title="[bootstrap-datepicker initialize]">

<p>可以看到成功地套上去了，預設日期格式為<code>mm/dd/yyyy</code></p>
<h2 id="Format日期格式"><a href="#Format日期格式" class="headerlink" title="Format日期格式"></a>Format日期格式</h2><p>以我們認知的日期格式，比較偏向是<code>yyyy/mm/dd</code>，再來請教<code>ChatGPT</code>大神了，這次問</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">List the Bootstrap-datepicker jquery component&#x27;s options</span><br></pre></td></tr></table></figure>
<img src="/2023/02/23/chatgpt-bootstrap-datepicker/Untitled6.png" class="" title="[ChatGPT list bootstrap-datepicker options]">

<p>回復完全切中要點，直接套上看看</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#start-date&#x27;</span>).<span class="title function_">datepicker</span>(&#123;</span><br><span class="line">    <span class="attr">format</span>: <span class="string">&#x27;yyyy/mm/dd&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>看一下效果吧</p>
<img src="/2023/02/23/chatgpt-bootstrap-datepicker/Untitled7.png" class="" title="[bootstrap-datepicker format date]">

<p>完美地呈現日期格式:<code>yyyy/mm/dd</code></p>
<h2 id="設定日期"><a href="#設定日期" class="headerlink" title="設定日期"></a>設定日期</h2><p>這時候需求來了，<code>Start Date</code>需要預設選擇該月份的一號，姑且不論該月份的一號怎麼取得，筆者以操作套件方法為準，先來問<code>ChatGPT</code>怎麼使用<code>setDate</code>吧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">List the example of Bootstrap-datepicker jquery component&#x27;s setDate method</span><br></pre></td></tr></table></figure>

<img src="/2023/02/23/chatgpt-bootstrap-datepicker/Untitled8.png" class="" title="[ChatGPT list bootstrap-datepicker setDate]">

<p>回答完全不拖泥帶水，解釋說可以透過<code>datepicker(’setDate’, &#123;date&#125;)</code>的方式設定，這個<code>&#123;date&#125;</code>可以是<code>Date</code>物件，也可以是符合<code>Javascript</code>日期規則的字串</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 筆者這邊先寫死2023-02-01</span></span><br><span class="line">$(<span class="string">&#x27;#start-date&#x27;</span>).<span class="title function_">datepicker</span>(<span class="string">&#x27;setDate&#x27;</span>, <span class="string">&#x27;2023-02-01&#x27;</span>);</span><br></pre></td></tr></table></figure>

<img src="/2023/02/23/chatgpt-bootstrap-datepicker/Untitled9.png" class="" title="[bootstrap-datepicker setDate result]">

<h2 id="設定語系"><a href="#設定語系" class="headerlink" title="設定語系"></a>設定語系</h2><p>最後一個需求，日曆的語系切換為台灣語系，請教<code>ChatGPT</code>大神了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">List the example of setting locale option of Bootstrap-datepicket jquery component</span><br></pre></td></tr></table></figure>

<img src="/2023/02/23/chatgpt-bootstrap-datepicker/Untitled10.png" class="" title="[ChatGPT list setting locale]">

<p>筆者就按照建議，加上</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">$.fn.<span class="property">datepicker</span>.<span class="property">defaults</span>.<span class="property">language</span> = <span class="string">&#x27;zh-TW&#x27;</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>筆者因為有到<code>cdn</code>網站搜尋過相關連結，知道要載入對應語系的連結</p>
</blockquote>
<img src="/2023/02/23/chatgpt-bootstrap-datepicker/Untitled11.png" class="" title="[bootstrap-datepicker setting locale result]">

<p>最後貼上完整程式碼</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap-datepicker<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.2.3/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker3.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-3&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputEmail1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-label&quot;</span>&gt;</span>Start Date<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;start-date&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://code.jquery.com/jquery-3.6.3.min.js&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">integrity</span>=<span class="string">&quot;sha256-pvPw+upLPUjgMXY0G+8O0xUf+/Im1MZjXxxgOcBQBXU=&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.2.3/js/bootstrap.bundle.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">        <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">        <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/locales/bootstrap-datepicker.zh-TW.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $.fn.<span class="property">datepicker</span>.<span class="property">defaults</span>.<span class="property">language</span> = <span class="string">&#x27;zh-TW&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#start-date&#x27;</span>).<span class="title function_">datepicker</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">format</span>: <span class="string">&#x27;yyyy/mm/dd&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#start-date&#x27;</span>).<span class="title function_">datepicker</span>(<span class="string">&#x27;setDate&#x27;</span>, <span class="string">&#x27;2023-02-01&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>筆者僅僅花了十分鐘完成<code>datepicker</code>的呈現，筆者的感想是只要會用<code>List the example of</code>起手式，後面接上你要找的東西，基本上效果要比<code>google</code>搜尋好很多，不用一個連結一個連結打開看是不是自己要的，正所謂善用工具，工具會帶你上天堂，筆者就早早下班去啦。</p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>chatgpt</category>
      </categories>
      <tags>
        <tag>chatgpt</tag>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]gRPC101:Postman發出gRPC Request</title>
    <url>/2023/02/10/dotnet-series-grpc101-postman-request/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>平常寫的<code>Restful API</code>的測試工具有百百種，筆者這邊所說的測試並非<code>QA</code>寫的那種測試，而是確認自己寫好的<code>API</code>是否如期執行，確認運作狀況，畢竟<code>Restful API</code>大多使用在前後端分離的開發方式中，身為後端工程師，寫完<code>API</code>，第一件事是打開<code>Postman</code>工具，輸入<code>API Url</code>，發出<code>Request</code>，看是否正常運行，更甚者，會製作<code>Postman Collection</code>並匯出給前端工程師使用，回到<code>gRPC</code>服務，是否也可以透過<code>Postman</code>來測試呢，跟著筆者一起看下去吧。</p>
<span id="more"></span>

<p>筆者這邊針對<a href="/2023/02/07/dotnet-series-grpc101-greeting-server/" title="[DotnetCore]gRPC101: Gretting專案-Server篇">[DotnetCore]gRPC101: Gretting專案-Server篇</a>中製作的<code>gRPC Server</code>為例，示範怎麼從<code>Postman</code>發出<code>Request</code>測試其運作狀況，先讓gRPC Server啟動起來吧。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> GRPC.Demo\GRPC.Demo.Server</span><br><span class="line">dotnet run --launch-profile https</span><br><span class="line"><span class="comment"># 啟動URL為https://localhost:7222</span></span><br></pre></td></tr></table></figure>

<h2 id="新增gRPC-Request"><a href="#新增gRPC-Request" class="headerlink" title="新增gRPC Request"></a>新增gRPC Request</h2><p><code>Postman</code>工具中，可以透過左上角<code>new</code>的方式，可以建立一個<code>gRPC Request</code></p>
<img src="/2023/02/10/dotnet-series-grpc101-postman-request/Untitled.png" class="" title="[New gRPC Request]">

<p>首先要先輸入<code>gRPC</code>服務對應的網址，這邊要轉換成<code>grpc://localhost:7222</code></p>
<blockquote>
<p>切記筆者這邊使用的是<code>https</code>的網址，<code>Postman</code>中<code>Url</code>旁邊鎖頭來切換是否要<code>Enable或Disable TLS</code></p>
</blockquote>
<img src="/2023/02/10/dotnet-series-grpc101-postman-request/Untitled1.png" class="" title="[Enter gRPC Url]">

<h2 id="Service-Definition"><a href="#Service-Definition" class="headerlink" title="Service Definition"></a>Service Definition</h2><p>這邊就是重頭戲了，<code>gRPC</code>服務號稱就是一個強型別的方式開發，就像筆者上一篇<a href="/2023/02/08/dotnet-series-grpc101-greeting-client/" title="[DotnetCore]gRPC101: Greeting專案:Client篇">[DotnetCore]gRPC101: Greeting專案:Client篇</a>，加入<code>proto</code>檔案，即可透過點的方式呼叫<code>gRPC</code>服務中的<code>Method</code>，<code>Postman</code>也不例外，透過<code>Service Definition</code>頁籤的設定，是可以直接用選取方式選擇我們要呼叫的方法，由筆者來一一說明吧。</p>
<h3 id="Proto檔案匯入"><a href="#Proto檔案匯入" class="headerlink" title="Proto檔案匯入"></a>Proto檔案匯入</h3><p>這是跟開發<code>Client</code>端程式一樣，只要匯入<code>proto</code>檔案，就會出現該<code>gRPC</code>服務對應的<code>Method</code>列表，首先要先透過<code>Import .proto file</code>的功能選擇其對應的proto檔案</p>
<img src="/2023/02/10/dotnet-series-grpc101-postman-request/Untitled2.png" class="" title="[Import .proto File]">

<p>接著按下<code>Choose a file</code></p>
<img src="/2023/02/10/dotnet-series-grpc101-postman-request/Untitled3.png" class="" title="[Choose .proto File]">

<p>接著<code>Choose a file</code>的按鈕變成<code>loading</code>狀態，並跳出<code>File Explorer</code>，可以選擇其<code>proto</code>檔案</p>
<img src="/2023/02/10/dotnet-series-grpc101-postman-request/Untitled4.png" class="" title="[Choose .proto File:File Exploreer]">

<p>接著勇敢地按下<code>Next</code>鍵吧</p>
<img src="/2023/02/10/dotnet-series-grpc101-postman-request/Untitled5.png" class="" title="[Choose .proto File:Next button]">

<p>接著按下<code>Import As API</code></p>
<img src="/2023/02/10/dotnet-series-grpc101-postman-request/Untitled6.png" class="" title="[Choose .proto File:Import As API button]">

<p>最後會在<code>Method</code>下拉是選單中看見<code>SayHello</code>這個方法</p>
<img src="/2023/02/10/dotnet-series-grpc101-postman-request/Untitled7.png" class="" title="[Choose .proto File:Method List]">

<h3 id="Server-Reflection"><a href="#Server-Reflection" class="headerlink" title="Server Reflection"></a>Server Reflection</h3><p>針對這個<code>Server Definition</code>中的<code>Server Reflection</code>的選項則，必須在<a href="/2023/02/07/dotnet-series-grpc101-greeting-server/" title="[DotnetCore]gRPC101: Gretting專案-Server篇">[DotnetCore]gRPC101: Gretting專案-Server篇</a>中的程式要做一點手腳，即增加<code>Server Reflection</code>的設定</p>
<ul>
<li>安裝Nuget套件:<code>Grpc.AspNetCore.Server.Reflection</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet add package Grpc.AspNetCore.Server.Reflection</span><br></pre></td></tr></table></figure>

<ul>
<li>改造<code>Program.cs</code></li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// minimal API</span></span><br><span class="line"><span class="comment">// 以上省略</span></span><br><span class="line">builder.Services.AddGrpc();</span><br><span class="line">builder.Services.AddGrpcReflection(); <span class="comment">// 新增加的:註冊Server Reflection</span></span><br><span class="line"><span class="comment">// 以下省略</span></span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// minimal API</span></span><br><span class="line"><span class="comment">// 以上省略</span></span><br><span class="line">app.MapGrpcService&lt;GretterService&gt;();</span><br><span class="line">app.MapGrpcReflectionService(); <span class="comment">// 新增加的:啟用Server Reflection</span></span><br><span class="line"><span class="comment">// 以下省略</span></span><br></pre></td></tr></table></figure>

<p>完整程式碼</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Program.cs</span></span><br><span class="line"><span class="keyword">using</span> GRPC.Demo.Server.Services;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> builder = WebApplication.CreateBuilder(args);</span><br><span class="line">builder.Services.AddGrpc();</span><br><span class="line">builder.Services.AddGrpcReflection();</span><br><span class="line"><span class="keyword">var</span> app = builder.Build();</span><br><span class="line"></span><br><span class="line">app.MapGrpcService&lt;GretterService&gt;();</span><br><span class="line">app.MapGrpcReflectionService();</span><br><span class="line"></span><br><span class="line">app.Run();</span><br></pre></td></tr></table></figure>

<ul>
<li><code>Postman</code>上透過<code>Server Reflection</code>取得<code>Method</code>清單</li>
</ul>
<blockquote>
<p>筆者這邊因為按過<code>Use Server Reflection</code>，為了截<code>Use Server Reflection</code>鈕，故意不選<code>gRPC Url</code>，正常來說要先設定<code>gRPC Url</code>後按下<code>Use Server Reflection</code>，只要按過一次<code>Postman</code>會記住，點選<code>gRPC Url</code>，就無需要再按一次，除非方法有更新</p>
</blockquote>
<img src="/2023/02/10/dotnet-series-grpc101-postman-request/Untitled8.png" class="" title="[Server Reflection button]">

<img src="/2023/02/10/dotnet-series-grpc101-postman-request/Untitled9.png" class="" title="[Server Reflection:Method List]">

<h2 id="輸入Message"><a href="#輸入Message" class="headerlink" title="輸入Message"></a>輸入Message</h2><p>輸入<code>Request Model</code>吧，可以切到<code>Message</code>這個頁籤，<code>Request Body</code>部份，可以直接自己輸入，也可以透過<code>Generate Example Message</code>來產生一個範例<code>Message</code></p>
<img src="/2023/02/10/dotnet-series-grpc101-postman-request/Untitled10.png" class="" title="[Enter Message by Generate Example Message]">

<h2 id="Invoke看結果"><a href="#Invoke看結果" class="headerlink" title="Invoke看結果"></a>Invoke看結果</h2><p>筆者就把輸入的<code>Message</code>改成<code>Eugene Su</code>後按下<code>Invoke</code>按鈕，<code>Respone</code>會出現於<code>Respone</code>回應顯示窗中</p>
<img src="/2023/02/10/dotnet-series-grpc101-postman-request/Untitled11.png" class="" title="[Invoke]">

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>藉由這篇來了解如何透過<code>Postman</code>來達成<code>gRPC</code>服務的運作狀況是否符合期待，就可以先驗證其<code>Server</code>端的程式是否正確，<code>Server</code>端也透過增加<code>Server Reflection</code>的設定，不用提供<code>proto</code>檔案，只需提供<code>gRPC Url</code>即可將<code>Method</code>清單取得，是一個很方便的設計，這篇就到這了，下篇見。</p>
<p>參考</p>
<ul>
<li><a href="https://learning.postman.com/docs/sending-requests/grpc/first-grpc-request/">https://learning.postman.com/docs/sending-requests/grpc/first-grpc-request/</a></li>
<li><a href="https://blog.yowko.com/aspdotnet-core-grpc-reflection/">https://blog.yowko.com/aspdotnet-core-grpc-reflection/</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>gRPC</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>gRPC</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]gRPC101: Greeting專案:Client篇</title>
    <url>/2023/02/08/dotnet-series-grpc101-greeting-client/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者於<a href="/2023/02/07/dotnet-series-grpc101-greeting-server/" title="[DotnetCore]gRPC101: Gretting專案-Server篇">[DotnetCore]gRPC101: Gretting專案-Server篇</a>中詳細交代產生該系列文之原因了，因篇幅太長，決定分為Server篇及Client篇，簡述一下Client端的作法，還記得Server篇中提到以及宣告好的<code>proto</code>檔案嗎，對於<code>Client</code>端來說，只要拿<code>Server</code>端產生的<code>proto</code>檔案拿來用即可，因為也是要產生編譯後的cs檔案，<code>namespace</code>要改成<code>Client</code>端專案名稱即可，一切就水到渠成了，接下來就拿<code>proto</code>檔中的方法呼叫下去就萬事ok了，跟著筆者看下去吧。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>筆者依照慣例，簡單講述一下其步驟:</p>
<ul>
<li>建立<code>Console</code>專案</li>
<li>複製貼上<code>proto</code>專案及調整<code>namespace</code></li>
<li>編譯<code>proto</code>檔案</li>
<li>於<code>Program.cs</code>中透過<code>gRPC</code>傳輸技術呼叫方法</li>
</ul>
<h2 id="Gretting專案-Client"><a href="#Gretting專案-Client" class="headerlink" title="Gretting專案:Client"></a>Gretting專案:Client</h2><h3 id="建立Console專案"><a href="#建立Console專案" class="headerlink" title="建立Console專案"></a>建立Console專案</h3><p>筆者就沿用上篇中實作的方案中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> GRPC.Demo</span><br><span class="line">dotnet new console -o GRPC.Demo.Client</span><br><span class="line"><span class="built_in">cd</span> GRPC.Demo.Client</span><br></pre></td></tr></table></figure>

<h3 id="安裝必要套件"><a href="#安裝必要套件" class="headerlink" title="安裝必要套件"></a>安裝必要套件</h3><p>Client端專案則需要以下套件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 包含dotnet core Client端所需</span></span><br><span class="line">dotnet add package Grpc.Net.Client</span><br><span class="line"><span class="comment"># 包含protobuf訊息API</span></span><br><span class="line">dotnet add package Google.Protobuf</span><br><span class="line"><span class="comment"># 產生dotnet core編譯後cs檔案所需，上偏能夠編譯該套件所賜</span></span><br><span class="line">dotnet add package Grpc.Tools</span><br></pre></td></tr></table></figure>

<h3 id="複製proto檔案並調整namespace"><a href="#複製proto檔案並調整namespace" class="headerlink" title="複製proto檔案並調整namespace"></a>複製proto檔案並調整namespace</h3><p>複製步驟就因人而異，筆者這邊透過指令來複製</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> GRPC.Demo.Client\</span><br><span class="line"><span class="built_in">mkdir</span> protos</span><br><span class="line"><span class="built_in">cp</span> ..\GRPC.Demo.Server\protos\greet.proto protos\greet.proto</span><br></pre></td></tr></table></figure>

<p>透過<code>vscode</code>開啟專案，調整其<code>namespace</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">option csharp_namespace = <span class="string">&quot;GRPC.Demo.Client&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="編譯proto檔案"><a href="#編譯proto檔案" class="headerlink" title="編譯proto檔案"></a>編譯proto檔案</h3><p>筆者這邊就不贅述其<code>dotnet-grpc tool</code>了，就直接下指令吧</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> GRPC.Demo.Client\</span><br><span class="line">dotnet-grpc add-file -p GRPC.Demo.Client.csproj -s Client protos\greet.proto</span><br></pre></td></tr></table></figure>

<p>接著就下指令建置吧</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet build</span><br></pre></td></tr></table></figure>

<p>你就會得到它了，會在<code>obj&gt;Debug&gt;&#123;Target Framework&#125;&gt;protos</code>中，筆者就不另外截圖了</p>
<h3 id="改造Program-cs"><a href="#改造Program-cs" class="headerlink" title="改造Program.cs"></a>改造Program.cs</h3><p>寫<code>Client</code>端呼叫相關的程式碼，以這個例子來說，有一個<code>SayHello</code>方法可以呼叫</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> Grpc.Net.Client;</span><br><span class="line"><span class="keyword">using</span> GRPC.Demo.Client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">var</span> channel = GrpcChannel.ForAddress(<span class="string">&quot;https://localhost:7222&quot;</span>);<span class="comment">// 讀者要換成Server端執行監聽的tcp port</span></span><br><span class="line"><span class="keyword">var</span> client = <span class="keyword">new</span> Greeter.GreeterClient(channel);</span><br><span class="line"><span class="keyword">var</span> reply = <span class="keyword">await</span> client.SayHelloAsync(</span><br><span class="line">                  <span class="keyword">new</span> HelloRequest &#123; Name = <span class="string">&quot;GreeterClient&quot;</span> &#125;);</span><br><span class="line">Console.WriteLine(<span class="string">&quot;Greeting: &quot;</span> + reply.Message);</span><br><span class="line">Console.WriteLine(<span class="string">&quot;Press any key to exit...&quot;</span>);</span><br><span class="line">Console.ReadKey();</span><br></pre></td></tr></table></figure>

<h3 id="執行程式"><a href="#執行程式" class="headerlink" title="執行程式"></a>執行程式</h3><ul>
<li>Server端程式</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> GRPC.Demo.Server\</span><br><span class="line"><span class="comment"># 要特別注意一定要用https這個profile來跑</span></span><br><span class="line">dotnet run --launch-profile https</span><br></pre></td></tr></table></figure>

<p>怕讀者不知道<code>https profile</code>在哪，筆者這邊列出所在路徑: <code>Properties&gt;launchSettings.json</code>，裡頭有</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;profiles&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 以上省略</span></span><br><span class="line">    <span class="attr">&quot;https&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;commandName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Project&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;dotnetRunMessages&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;launchBrowser&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;applicationUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://localhost:7222;http://localhost:5044&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;environmentVariables&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ASPNETCORE_ENVIRONMENT&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Development&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 以下省略</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Client端程式</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> GRPC.Demo.Client\</span><br><span class="line">dotnet run</span><br><span class="line"><span class="comment"># 執行結果如下</span></span><br><span class="line"><span class="comment"># Greeting: Hello GreeterClient</span></span><br><span class="line"><span class="comment"># Press any key to exit...</span></span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>到這邊大功告成了，完成了一個<code>gRPC</code>的完整招式，筆者這邊接下來依照工作所需，會繼續研讀<a href="https://learn.microsoft.com/en-us/aspnet/core/grpc/?view=aspnetcore-7.0">https://learn.microsoft.com/en-us/aspnet/core/grpc/?view=aspnetcore-7.0</a>中的<code>Remote Procedure Call Apps</code>相關章節，敬請期待。</p>
<p>參考</p>
<ul>
<li><a href="https://developers.google.com/protocol-buffers/docs/proto3">https://developers.google.com/protocol-buffers/docs/proto3</a></li>
<li><a href="https://learn.microsoft.com/en-us/aspnet/core/tutorials/grpc/grpc-start?view=aspnetcore-7.0&tabs=visual-studio">https://learn.microsoft.com/en-us/aspnet/core/tutorials/grpc/grpc-start?view=aspnetcore-7.0&amp;tabs=visual-studio</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>gRPC</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>gRPC</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]gRPC101: Gretting專案-Server篇</title>
    <url>/2023/02/07/dotnet-series-grpc101-greeting-server/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者因公司內部系統規劃，會有一個中台系統，負責共用的一些寄電子信件，寄簡訊，或其他共用服務，這種微服務概念而個別建立的系統，與其他系統最直觀的串接方式為<code>Restful API</code>， 當然還有一個<code>GraphQL</code>這個選擇，其特色為由前端決定回傳的資料結構，但筆者熟悉的<code>dotnet</code>生態圈一直沒有紅起來的感覺(或許是筆者見識淺薄)，<code>gRPC</code>尚未出現前，這兩種都是上等之選，<code>gRPC</code>問世後，有一種橫空出世的感覺，因尚未支援瀏覽器端，以微服務(後端)之間串接來說，已經是一時之選。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><h2 id="gRPC介紹"><a href="#gRPC介紹" class="headerlink" title="gRPC介紹"></a>gRPC介紹</h2><p><code>RPC</code>這個技術早在幾十年前就有了，<code>gRPC</code>這個傳輸技術則由<code>Google</code>於2016年8月首次發佈，是基於<code>Http/2</code>協定傳輸，以<code>Protocol Buffers</code>當作介面描述語言，筆者會再另外寫一篇介紹其<code>Protocol Buffers</code>語言。主要特色為因有各個程式語言皆有實作版本，最大的好處是不同程式語言實作的微服務系統間可透過<code>gRPC</code>串接，當然也可透過<code>Restful API</code>串接，但<code>gRPC</code>優勢在於先不說其效能，因透過<code>proto</code>檔案，可以點出其呼叫方法，效能部份，因為<code>Restful API</code>是透過<code>json</code>格式文字傳輸，<code>gRPC</code>則使用小型二進位形式，其他比較參考如下:</p>
<table>
<thead>
<tr>
<th>功能</th>
<th>gRPC</th>
<th>使用 Json的HTTP API</th>
</tr>
</thead>
<tbody><tr>
<td>合約</td>
<td>必要 (.proto)</td>
<td>選擇性 (OpenAPI)</td>
</tr>
<tr>
<td>通訊協定</td>
<td>HTTP/2</td>
<td>HTTP</td>
</tr>
<tr>
<td>Payload</td>
<td>Protobuf(小型二進位)</td>
<td>JSON (大型、人類可讀)</td>
</tr>
<tr>
<td>規範性</td>
<td>嚴格規格(透過protocol buffers介面語言)</td>
<td>鬆散。 任何 HTTP 都是有效的。</td>
</tr>
<tr>
<td>串流</td>
<td>用戶端、伺服器、雙向</td>
<td>用戶端、伺服器</td>
</tr>
<tr>
<td>瀏覽器支援</td>
<td>No(需要grpc-web)</td>
<td>Yes</td>
</tr>
<tr>
<td>安全性</td>
<td>傳輸 (TLS)</td>
<td>傳輸 (TLS)</td>
</tr>
<tr>
<td>用戶端程式代碼產生</td>
<td>是</td>
<td>OpenAPI + 協力廠商工具</td>
</tr>
</tbody></table>
<h2 id="Gretting專案-Server"><a href="#Gretting專案-Server" class="headerlink" title="Gretting專案:Server"></a>Gretting專案:Server</h2><p><code>Microsoft Learn</code>上的<code>Server</code>版本為透過<code>dotnet new grpc</code>建出來的，但照著做會太無聊了，且不知道其中的關係，筆者這邊就模仿其範本專案，自刻一個<code>gRPC Server</code>版本的專案，就跟著筆者一起開始吧。</p>
<h3 id="建立web空專案"><a href="#建立web空專案" class="headerlink" title="建立web空專案"></a>建立web空專案</h3><p>因為要使用<code>gRPC</code>的<code>Server</code>，不需要<code>API</code>或<code>MVC</code>的任何設定，只要一個web空專案即可，再加上<code>gRPC</code>設定就好</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> GRPC.Demo</span><br><span class="line"><span class="built_in">cd</span> GRPC.Demo</span><br><span class="line">dotnet new web -o GRPC.Demo.Server</span><br></pre></td></tr></table></figure>

<h3 id="加入gRPC-Server所需套件"><a href="#加入gRPC-Server所需套件" class="headerlink" title="加入gRPC Server所需套件"></a>加入gRPC Server所需套件</h3><p>接著要來裝<code>gRPC Server</code>所需要的套件了，模仿grpc模板專案建出來的，要安裝的套件為<code>Grpc.AspNetCore</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> GRPC.Demo.Server</span><br><span class="line">dotnet add package Grpc.AspNetCore</span><br></pre></td></tr></table></figure>

<h3 id="增加gRPC設定"><a href="#增加gRPC設定" class="headerlink" title="增加gRPC設定"></a>增加gRPC設定</h3><p>接著來改造<code>program.cs</code>，增加<code>gRPC</code>所需設定</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> builder = WebApplication.CreateBuilder(args);</span><br><span class="line">builder.Services.AddGrpc(); <span class="comment">//增加此行，意即加入gRPC服務</span></span><br><span class="line"><span class="keyword">var</span> app = builder.Build();</span><br></pre></td></tr></table></figure>

<h3 id="製作proto檔案"><a href="#製作proto檔案" class="headerlink" title="製作proto檔案"></a>製作proto檔案</h3><p><code>gRPC</code>中最重要的<code>proto</code>檔案，介面規格檔案，筆者這邊也透過<code>dotnet</code>指令來新增其<code>proto</code>檔案</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> protos</span><br><span class="line"><span class="built_in">cd</span> Protos</span><br><span class="line">dotnet new proto -n greet -p:n GRPC.Demo.Server</span><br></pre></td></tr></table></figure>

<p>新增完成後會得到以下內容之<code>proto</code>檔案</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="comment">// 此行為上方指令中的-p:n這個option對應的namespace設定值</span></span><br><span class="line">option csharp_namespace = <span class="string">&quot;GRPC.Demo.Server&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="定義proto檔案"><a href="#定義proto檔案" class="headerlink" title="定義proto檔案"></a>定義proto檔案</h3><p>接著按照<code>grpc</code>模板專案中預設<code>Greeter</code>這個<code>service</code>吧</p>
<ul>
<li>HelloRequest定義</li>
</ul>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">message </span><span class="title class_">HelloRequest</span>&#123;</span><br><span class="line">    <span class="type">string</span> name = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>HelloReply定義</li>
</ul>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">message </span><span class="title class_">HelloReply</span>&#123;</span><br><span class="line">    <span class="type">string</span> message = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Greeter定義</li>
</ul>
<p>定義好<code>Request</code>跟<code>Response</code>物件後，撰寫主要方法</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">service </span><span class="title class_">Greeter</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">rpc</span> SayHello(HelloRequest) <span class="keyword">returns</span> (HelloReply)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Gretter</code>這個<code>Service</code>中有一個方法叫<code>SayHello</code>，其中<code>Input</code>為<code>HelloRequest</code>結構，<code>Output</code>為<code>HelloReply</code>結構，完整程式碼如下:</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">option</span> csharp_namespace = <span class="string">&quot;GRPC.Demo.Server&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">service </span><span class="title class_">Greeter</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">rpc</span> SayHello(HelloRequest) <span class="keyword">returns</span> (HelloReply)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">HelloRequest</span>&#123;</span><br><span class="line">    <span class="type">string</span> name = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">HelloReply</span>&#123;</span><br><span class="line">    <span class="type">string</span> message = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="編譯proto檔案"><a href="#編譯proto檔案" class="headerlink" title="編譯proto檔案"></a>編譯proto檔案</h3><p>筆者這邊純手工方式完成編譯<code>proto</code>檔案過程，筆者起初還有點搞錯方向，想要透過<code>vscode</code>中的<code>Extension</code>來完成，無奈找了幾個，或許筆者不會設定，皆未成功，後來搜尋<code>google</code>後找到<code>dotnet tool</code>:<code>dotnet-grpc</code>，首先透過<code>dotnet</code>指令安裝<code>tool</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet tool install -g dotnet-grpc</span><br></pre></td></tr></table></figure>

<p>接著將<code>proto</code>檔案加入至<code>csproj</code>檔案的宣告中，透過上方安裝好的<code>dotnet-grpc</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 已經於GRPC.Demo.Server路徑中</span></span><br><span class="line">dotnet-grpc add-file -p GRPC.Demo.Server.csproj -s Server Protos\greet.proto</span><br></pre></td></tr></table></figure>

<p>分段解釋一下上方指令</p>
<ul>
<li><code>-p</code>: 指定<code>project</code></li>
<li><code>-s</code>: 指定其服務類型，有<code>Both</code>, <code>Client</code>, <code>Default</code>, <code>None</code>, <code>Server</code>，這邊為Server，因此填寫<code>Server</code></li>
<li>最後附上<code>proto</code>檔案路徑</li>
</ul>
<p>依照上方指令，會在對應的<code>csproj</code>檔案中多出以下設定</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Protobuf</span> <span class="attr">Include</span>=<span class="string">&quot;Protos\greet.proto&quot;</span> <span class="attr">GrpcServices</span>=<span class="string">&quot;Server&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>到這邊就完美Ending了，只要透過<code>dotnet build</code>這個指令就會完成編譯<code>proto</code>檔案作業</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet build</span><br></pre></td></tr></table></figure>

<p>編譯後的檔案位於<code>obj&gt;Debug&gt;&#123;Target framework&#125;&gt;Protos</code></p>
<img src="/2023/02/07/dotnet-series-grpc101-greeting-server/Untitled.png" class="" title="[編譯輸入路徑]">

<h3 id="建立實作Service"><a href="#建立實作Service" class="headerlink" title="建立實作Service"></a>建立實作Service</h3><p>到這邊只是把規格定義的作業完成，因為此篇為<code>Server</code>篇，需要實作其對應<code>Service</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> Services</span><br><span class="line"><span class="built_in">cd</span> Services</span><br><span class="line"><span class="built_in">touch</span> GretterService.cs</span><br></pre></td></tr></table></figure>

<h3 id="撰寫實作Service"><a href="#撰寫實作Service" class="headerlink" title="撰寫實作Service"></a>撰寫實作Service</h3><p>到這一步之前一定要完成編譯<code>proto</code>檔案的動作，才會有強型別可以用，馬上來感受一下</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GretterService</span> : <span class="title">Greeter.GreeterBase</span> <span class="comment">// 只要編譯過proto檔案則可以點出Gretter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 透過override方式實作</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Task&lt;HelloReply&gt; <span class="title">SayHello</span>(<span class="params">HelloRequest request, ServerCallContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Task.FromResult(<span class="keyword">new</span> HelloReply</span><br><span class="line">        &#123;</span><br><span class="line">            Message = <span class="string">$&quot;Hello <span class="subst">&#123;request.Name&#125;</span>&quot;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="註冊實作Service"><a href="#註冊實作Service" class="headerlink" title="註冊實作Service"></a>註冊實作Service</h3><p>於<code>program.cs</code>中增加一行</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> GRPC.Demo.Server.Services;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上省略</span></span><br><span class="line"><span class="keyword">var</span> app = builder.Build();</span><br><span class="line">app.MapGrpcService&lt;GretterService&gt;();</span><br><span class="line"><span class="comment">// 以下省略</span></span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p><code>gRPC Server</code>實作到這邊告一段落了，給筆者一種感覺是<code>gRPC</code>傳輸技術，透過<code>proto</code>定義其交換規格，跟平常定義<code>Interface</code>一樣，只是不同的是要透過<code>proto</code>介面語言來撰寫，再來實作方式透過<code>override</code>完成，像是<code>ChildClass</code>中對<code>BaseClass</code>的<code>virtual</code>方法實作一般，滿好理解的，實作這端就完全沒有任何限制，若有看grpc模板專案建出來的就知道，有透過Construtor引入其<code>ILogger</code>，基本上<code>DI</code>支援也是有的，那跟撰寫一般<code>Service</code>層的程式並無不同，效能加上強型別，筆者會在內部系統串接時會願意試看看，這篇就到這邊了，下篇見。</p>
<p>參考</p>
<ul>
<li><a href="https://learn.microsoft.com/zh-tw/aspnet/core/grpc/comparison?view=aspnetcore-7.0">https://learn.microsoft.com/zh-tw/aspnet/core/grpc/comparison?view=aspnetcore-7.0</a></li>
<li><a href="https://learn.microsoft.com/en-us/aspnet/core/grpc/?view=aspnetcore-7.0">https://learn.microsoft.com/en-us/aspnet/core/grpc/?view=aspnetcore-7.0</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>gRPC</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>gRPC</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]ConsoleApp擁有Configuration及ServiceCollection機制</title>
    <url>/2022/12/22/dotnetcore-console-with-configuration-di/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者收到主管的指示，要來寫一個執行檔(<code>exe</code>)程式，筆者離這種<code>exe</code>程式好久遠了，自從轉換到<code>Web</code>領域後幾乎都是寫API為主，一開始從<code>.net MVC5</code>開始進入<code>Web</code>領域，寫了幾年的<code>Razor View</code>後，前一份工作剛好前後端分離，前幾年都在寫<code>dotnet core web api</code>及<code>angular</code>為主，<code>Console Application</code>離我好遙遠阿，但筆者已經被<code>dotnet core</code>的內建<code>DI</code>機制及<code>AppSettings</code>當<code>Config</code>已經習以為常，對於<code>Console Application</code>來說這些都是要自己實作上去的，不妨藉由這次機會來實作看看。</p>
<span id="more"></span>

<p>筆者看了幾篇部落格後，想法是仿照<code>dotnet core web api</code>標準配置那樣</p>
<ul>
<li>有一個<code>Startup</code>類別</li>
<li><code>Startup</code>類別中有<code>public get</code>的<code>Configuration</code>，令其他有需求的人可以存取<code>Configuration</code>物件</li>
<li><code>Startup</code>中宣告<code>ConfigureServices</code>，並將配置好的<code>ServiceCollection</code>回傳</li>
<li>宣告一個<code>App</code>類別，主要有<code>Run</code>這個<code>Method</code>，最終於<code>Program</code>中執行</li>
</ul>
<h2 id="製作商業邏輯Service"><a href="#製作商業邏輯Service" class="headerlink" title="製作商業邏輯Service"></a>製作商業邏輯Service</h2><p>筆者這支的主要用意是檢查某個服務是否正常，可以想見驗證方式分為</p>
<ul>
<li><code>ping test</code></li>
<li><code>http request test</code></li>
</ul>
<p>對於應用程式來說，由注入時決定該用哪個方式即可，直接來看<code>Code</code>吧</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPingTestService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">Task&lt;<span class="built_in">bool</span>&gt; <span class="title">PingHost</span>(<span class="params"><span class="built_in">string</span> hostName</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接著實作上面列到的兩種方式</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PingTestByPingService</span> : <span class="title">IPingTestService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">bool</span>&gt; <span class="title">PingHost</span>(<span class="params"><span class="built_in">string</span> hostName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">bool</span> pingable = <span class="literal">false</span>;</span><br><span class="line">        Ping pinger = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            pinger = <span class="keyword">new</span> Ping();</span><br><span class="line">            PingReply reply = <span class="keyword">await</span> pinger.SendPingAsync(hostName);</span><br><span class="line">            pingable = reply.Status == IPStatus.Success;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (pinger != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                pinger.Dispose();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pingable;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PintTestByHttpRequestService</span> : <span class="title">IPingTestService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">bool</span>&gt; <span class="title">PingHost</span>(<span class="params"><span class="built_in">string</span> hostName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">using</span> <span class="keyword">var</span> httpClient = <span class="keyword">new</span> HttpClient();</span><br><span class="line">        <span class="keyword">var</span> response = <span class="keyword">await</span> httpClient.GetAsync(hostName);</span><br><span class="line">        result = response.StatusCode == HttpStatusCode.OK;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到這邊商業邏輯實作告一段落了，就先放在一邊，回頭把基礎建設都用好</p>
<h2 id="製作Startup類別"><a href="#製作Startup類別" class="headerlink" title="製作Startup類別"></a>製作Startup類別</h2><p>我們要製作<code>Startup</code>類別中的<code>AppSettings</code>及<code>DI</code>機制需要爾外安裝相關的微軟提供套件，就先來安裝<code>nuget</code>套件們吧</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以下為Configuration機制所需套件</span></span><br><span class="line">dotnet add package Microsoft.Extensions.Configuration</span><br><span class="line">dotnet add package Microsoft.Extensions.Configuration.Binder</span><br><span class="line">dotnet add package Microsoft.Extensions.Configuration.Json</span><br><span class="line"><span class="comment"># 以下為DI注入建置ServiceCollection所需套件</span></span><br><span class="line">dotnet add package Microsoft.Extensions.DependencyInjection</span><br></pre></td></tr></table></figure>

<p>安裝好<code>nuget</code>套件後，要來製作<code>Startup</code>類別了</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">&#123;</span><br><span class="line">		<span class="comment">// 主要規範由Startup初始化時建置設定，對於外部來說只能取得使用</span></span><br><span class="line">    <span class="keyword">public</span> IConfiguration Configuration &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Startup</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 預設為appsettings.json</span></span><br><span class="line">        <span class="keyword">var</span> builder = <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">                  .SetBasePath(Directory.GetCurrentDirectory())</span><br><span class="line">                  .AddJsonFile(<span class="string">&quot;appsettings.json&quot;</span>, optional: <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// 讀取環境變數</span></span><br><span class="line">        <span class="keyword">var</span> environment = Environment.GetEnvironmentVariable(<span class="string">&quot;ASPNETCORE_ENVIRONMENT&quot;</span>);</span><br><span class="line">        <span class="comment">// 有環境變數設定則將appsettings.&#123;environment&#125;.json才是我們要建置的</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(environment))</span><br><span class="line">        &#123;</span><br><span class="line">            builder = builder.AddJsonFile(<span class="string">$&quot;appsettings.<span class="subst">&#123;environment&#125;</span>.json&quot;</span>, optional: <span class="literal">true</span>, reloadOnChange: <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最後建置並指派給Configuration變數</span></span><br><span class="line">        <span class="keyword">this</span>.Configuration = builder.Build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServiceCollection <span class="title">ConfigureServices</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> serviceCollection = <span class="keyword">new</span> ServiceCollection();</span><br><span class="line">        serviceCollection.AddTransient&lt;App&gt;();</span><br><span class="line">        <span class="comment">// 由這邊切換一般Ping Test或Htpp Request Test</span></span><br><span class="line">        serviceCollection.AddTransient&lt;IPingTestService, PintTestByHttpRequestService&gt;();</span><br><span class="line">        <span class="keyword">return</span> serviceCollection;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="配置AppSettings"><a href="#配置AppSettings" class="headerlink" title="配置AppSettings"></a>配置AppSettings</h2><p>主要是新增各個環境的<code>AppSettings</code>檔案，這邊主要是要提醒大家，要將新增的<code>appsettings</code>檔案要去設定<code>Copy always</code>，筆者以<code>Development</code>檔案為準，列出筆者這邊的設定</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;EmailSetting&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;SmtpServer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SMTP Host&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;SmtpPort&quot;</span><span class="punctuation">:</span> <span class="number">587</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Account&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SMTP Account&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SMTP Password&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 欲測試服務對象FQDN</span></span><br><span class="line">  <span class="attr">&quot;TestUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://google.com.tw&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="comment">// 寄信相關設定</span></span><br><span class="line">  <span class="attr">&quot;MailToDo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;MailTo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test@gmail.com;test2@gmail.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;MailCc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Subject&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Test Subject&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="LaunchSettings配置"><a href="#LaunchSettings配置" class="headerlink" title="LaunchSettings配置"></a>LaunchSettings配置</h2><p>筆者這邊習慣調整<code>LaunchSettings</code>來切換<code>Development</code>, <code>Staging</code>, <code>UAT</code>等環境，Console Application的專案預設是沒有任何設定的，看不到<code>Properties/LaunchSettings.json</code>的，就動手加上去吧</p>
<img src="/2022/12/22/dotnetcore-console-with-configuration-di/Untitled.png" class="" title="[LaunchSettingsUI]">

<p>加上去後會在<code>Solution Explorer</code>中會看到<code>LaunchSettings.json</code>了</p>
<h2 id="製作主要運作程式App類別"><a href="#製作主要運作程式App類別" class="headerlink" title="製作主要運作程式App類別"></a>製作主要運作程式App類別</h2><p>基礎建設都用完了，要來撰寫主要執行的<code>App</code>類別了，邏輯觀念為</p>
<ul>
<li>從<code>Appsettings</code>讀取<code>EmailSetting</code>及<code>Mail</code>相關設定</li>
<li>宣告<code>MySmtpClient</code>物件</li>
<li>執行主要<code>Ping Test</code>程式</li>
<li>若回傳錯誤或者<code>Exception</code>則寄信通知對應的信箱</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">App</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IPingTestService _pingTestService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">App</span>(<span class="params">IPingTestService pingTestService</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _pingTestService = pingTestService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Run</span>(<span class="params">IConfiguration config</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Step0: Data Initial</span></span><br><span class="line">        <span class="keyword">var</span> emailSetting = config.GetSection(<span class="string">&quot;EmailSetting&quot;</span>).Get&lt;EmailSetting&gt;();</span><br><span class="line">        <span class="keyword">var</span> mailTodo = config.GetSection(<span class="string">&quot;MailToDo&quot;</span>).Get&lt;MailToDoItem&gt;();</span><br><span class="line">        <span class="keyword">var</span> mySmtpClient = <span class="keyword">new</span> MySmtpClient(mailTodo, emailSetting);</span><br><span class="line">        mySmtpClient.MySendCompleted += MailSendCompleted;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Step1: Ping test</span></span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">await</span> _pingTestService.PingHost(config[<span class="string">&quot;TestUrl&quot;</span>]);</span><br><span class="line">            <span class="keyword">if</span> (!result)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Step2: Send mail if connection error</span></span><br><span class="line">                mailTodo.Message = <span class="string">&quot;Monitor作業偵測到連線異常通知&quot;</span>;</span><br><span class="line">                <span class="keyword">await</span> mySmtpClient.SendMailProcess(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            mailTodo.Subject = <span class="string">$&quot;Monitor作業異常通知&quot;</span>;</span><br><span class="line">            mailTodo.Message = <span class="string">$&quot;<span class="subst">&#123;ex&#125;</span>&quot;</span>;</span><br><span class="line">            <span class="keyword">await</span> mySmtpClient.SendMailProcess(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">MailSendCompleted</span>(<span class="params">MailToDoItem mailToDoItem, AsyncCompletedEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Send Complete Handler</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述程式中用到的<code>MySmtpClient</code>、<code>EmailSetting</code>、<code>MailToDoItem</code>類別宣告就不特別在此列出，可以參考筆者這篇文章</p>
<a href="/2021/08/21/dotnetcore-smtp/" title="[DotnetCore]SMTP寄信服務設計">[DotnetCore]SMTP寄信服務設計</a>

<h2 id="Program-Main程式"><a href="#Program-Main程式" class="headerlink" title="Program:Main程式"></a>Program:Main程式</h2><p>最後要來撰寫<code>Main</code>程式了，直接用<code>Code</code>說話</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// reference: https://blog.poychang.net/dotnet-core-console-app-with-dependency-injection/</span></span><br><span class="line">    <span class="comment">// reference: https://dev.to/iamrule/add-your-appsettingsjson-to-a-c-console-application-5gd6</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> startUp = <span class="keyword">new</span> Startup();</span><br><span class="line">        <span class="keyword">var</span> serviceProvider = startUp.ConfigureServices().BuildServiceProvider();</span><br><span class="line">        <span class="keyword">var</span> app = serviceProvider.GetRequiredService&lt;App&gt;();</span><br><span class="line">        <span class="keyword">await</span> app.Run(startUp.Configuration);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>藉由這次，平常直接透過<code>dotnet new webapi</code>這種指令建置出<code>Web API</code>專案，基本上那些相關的設定都配置好了，這次撰寫過程，就會知道，之所以可以使用<code>IConfiguration</code>則，需要安裝哪些套件，<code>DI</code>注入宣告之<code>ServiceCollection</code>需要的是哪個對應的<code>nuget</code>套件，對於筆者來說，是滿大的收穫。</p>
<p>參考</p>
<ul>
<li><a href="https://blog.poychang.net/dotnet-core-console-app-with-dependency-injection/">https://blog.poychang.net/dotnet-core-console-app-with-dependency-injection/</a></li>
<li><a href="https://dev.to/iamrule/add-your-appsettingsjson-to-a-c-console-application-5gd6">https://dev.to/iamrule/add-your-appsettingsjson-to-a-c-console-application-5gd6</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
      </tags>
  </entry>
  <entry>
    <title>[macos]好物系列-鍵盤&amp;滑鼠設定</title>
    <url>/2022/10/07/macos-recommend-software/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者自從四年前開始買第一把機械式鍵盤後，深深著迷，雖然第一把鍵盤為茶軸，打過Cherry原廠鍵盤<code>G80-3494</code>後，完全回不去了，覺得直上直下超好打字，瘋狂買各家廠牌的紅軸。因為筆者吃飯用開發程式語言C#在mac上開發還是不友善，Mac還是淪為娛樂機，但自從dotnet core推出後，完全就是造福mac使用者啊，就會比較多時間在mac上面做研究及開發。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p><code>Mac</code>筆電上貼那種黏貼式筆電架，背包裡面放一把65%機械式鍵盤+外接觸控板及滑鼠，完全就是電腦宅宅的標準配備，這個狀態下，一般鍵盤都是<code>Windows</code>配置，除非買<code>Mac</code>專用鍵盤，鍵位才會與<code>Mac</code>筆電相符，主要差別在於一般<code>Windows</code>鍵盤接到<code>Mac</code>筆電上，預設行為為<code>Windows</code>鍵為對應成<code>Mac</code>上的<code>Command</code>鍵，<code>Alt</code>鍵對應成Mac上的<code>Option</code>鍵。</p>
<table>
<thead>
<tr>
<th>Windows系統配置</th>
<th>Ctrl</th>
<th>Windows</th>
<th>Alt</th>
</tr>
</thead>
<tbody><tr>
<td>Mac OS配置</td>
<td>Control</td>
<td>Command</td>
<td>Option</td>
</tr>
</tbody></table>
<p>以上對應配置就知道是除非你要隨時切換身體記憶，對於筆者來說，買不同牌子的機械式鍵盤，光不同牌子對應的快捷鍵就背不完了，因此對於<code>Command</code>跟<code>Option</code>位置對調這件事情無法接受。</p>
<h2 id="鍵盤設定"><a href="#鍵盤設定" class="headerlink" title="鍵盤設定"></a>鍵盤設定</h2><p>主要是<code>Mac</code>鍵盤預設配置左<code>command</code>、左<code>option</code>換位置，使用外接鍵盤上完全是無敵，完全跟<code>Mac</code>筆電上的配置相符，因此使用上完全沒有<code>gap</code>，</p>
<p><a href="https://karabiner-elements.pqrs.org/">https://karabiner-elements.pqrs.org/</a></p>
<p>筆者至少會換成以下配置(基本上這個軟體完全可以設定成某一個鍵換成完全不同的鍵)</p>
<table>
<thead>
<tr>
<th>Windows系統配置</th>
<th>Ctrl</th>
<th>Windows</th>
<th>Alt</th>
</tr>
</thead>
<tbody><tr>
<td>Mac OS配置</td>
<td>Control</td>
<td>Option</td>
<td>Command</td>
</tr>
</tbody></table>
<img src="/2022/10/07/macos-recommend-software/Untitled.png" class="" title="[karabiner-elements&gt;Preferences]">

<h2 id="滑鼠設定"><a href="#滑鼠設定" class="headerlink" title="滑鼠設定"></a>滑鼠設定</h2><p><code>Apple</code>公司一直都是以<code>UX</code>取勝，<code>觸控板</code>上的<code>自然手勢</code>是一大亮點，但若滑鼠接上使用，也持續套用「<code>自然手勢</code>」則就不那麼友善了。這個情境下，筆者想要的理想解決方式為<code>觸控板</code>維持「<code>自然手勢</code>」，<code>滑鼠</code>則套用<code>非自然手勢</code>，滾輪依照想要往下則往同個方向(下)滾的方式完成，救星出現了，就是今天要介紹的主角:</p>
<p><a href="https://github.com/ther0n/UnnaturalScrollWheels">https://github.com/ther0n/UnnaturalScrollWheels</a></p>
<p>安裝方式則非常簡單，透過howbrew即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install --cask unnaturalscrollwheels</span><br></pre></td></tr></table></figure>

<p>接著設定權限即可，於<code>Security &amp; Privacy</code> &gt; <code>Accessibility</code>中找到<code>UnnaturalScrollWheels</code>打勾即可</p>
<img src="/2022/10/07/macos-recommend-software/Untitled-1.png" class="" title="[unnaturalscrollwheels-SecuritySetting]">

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>藉由這兩套，<code>Mac</code>筆電接上市面上的多數機械式鍵盤完全Work，更有彈性地使用鍵盤，可以同時兼顧到觸控板及滑鼠不同操作，簡直完美，介紹給朋友都說棒，希望這則文章有幫助到大家。</p>
<p>參考</p>
<ul>
<li><a href="https://karabiner-elements.pqrs.org/">https://karabiner-elements.pqrs.org/</a></li>
<li><a href="https://github.com/ther0n/UnnaturalScrollWheels">https://github.com/ther0n/UnnaturalScrollWheels</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>macos</category>
      </categories>
      <tags>
        <tag>macos</tag>
        <tag>software</tag>
      </tags>
  </entry>
  <entry>
    <title>[Flutter讀書會]Dart101:Functions方法</title>
    <url>/2022/08/27/flutter-series-dart101-function/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>說說<code>Dart</code>程式語言，原本是來實作<code>Angular</code>前端框架而存在，早期<code>Angular</code>框架還有分兩派，<code>Typescript</code>及<code>Dart</code>，但發展到後面，完全被<code>Typescript</code>取代。時間線移回現在，<code>Dart</code>程式語言從<code>Flutter</code>於<code>2017</code>年中發佈開始，又重回戰場。筆者在看<code>Function</code>這個章節時，不禁讓筆者想到這些歷史背景，原本<code>Dart</code>程式語言是為了開發<code>Web</code>應用程式的阿，因此某些特性上跟<code>Javascript</code>特性相符也不是沒有道理的，例如: <code>Lexical Scope語彙範疇</code>。每個程式語言都要有的<code>Function</code>方法，Dart語言的世界裡<code>Function</code>方法會是甚麼樣子呢，趕緊跟著筆者的腳步來看看吧。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>筆者這邊還是簡單列一下筆者這邊的開發環境</p>
<ul>
<li>作業系統:Mac OS</li>
<li>Dart版本:<code>2.17.6</code></li>
<li>編輯器:Visual Studio Code</li>
</ul>
<p>前提情要提到的背景，讓筆者繼續說下去吧，與<code>JS</code>一樣，<code>Dart</code>語言世界裡，處處皆為物件，<code>Function</code>也不例外，意即<code>Function</code>可以當作<code>Variable</code>變數，也可以當作參數傳到另一個<code>Function</code>。</p>
<h2 id="宣告方式"><a href="#宣告方式" class="headerlink" title="宣告方式"></a>宣告方式</h2><p>跟其他語言差不多，<code>format</code>為</p>
<blockquote>
<p><code>&#123;回傳型別&#125;</code> <code>&#123;Function名稱&#125;</code>(<code>&#123;參數型別&#125;</code> <code>&#123;參數名稱&#125;</code>){<br>    //邏輯處理<br>}</p>
</blockquote>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 標準寫法</span></span><br><span class="line"><span class="built_in">bool</span> isNoble(<span class="built_in">int</span> atomicNumber) &#123;</span><br><span class="line">  <span class="keyword">return</span> _nobleGases[atomicNumber] != <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 也可以不指定資料型別(筆者建議不要使用)</span></span><br><span class="line">isNoble(atomicNumber) &#123;</span><br><span class="line">  <span class="keyword">return</span> _nobleGases[atomicNumber] != <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 也可以使用箭頭函式(若處理邏輯少則可以考慮使用)</span></span><br><span class="line"><span class="built_in">bool</span> isNoble(<span class="built_in">int</span> atomicNumber) =&gt; _nobleGases[atomicNumber] != <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<h2 id="參數"><a href="#參數" class="headerlink" title="參數"></a>參數</h2><p>參數這節主要敘述的是參數宣告方式有以下幾種</p>
<ul>
<li>指定名稱參數宣告</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">Sets the [bold] and [hidden] flags ...</span></span></span><br><span class="line"><span class="keyword">void</span> enableFlags(&#123;<span class="built_in">bool?</span> bold, <span class="built_in">bool?</span> hidden&#125;) &#123;...&#125;</span><br><span class="line"><span class="comment">// 呼叫方式(可以指定參數名稱:參數值)</span></span><br><span class="line">enableFlags(bold: <span class="keyword">true</span>, hidden: <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>必填寫參數宣告</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// required關鍵字指定該參數為必宣告，若呼叫時不宣告該參數則編譯器會爆錯</span></span><br><span class="line"><span class="keyword">const</span> Scrollbar(&#123;<span class="keyword">super</span>.key, <span class="keyword">required</span> Widget child&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>選擇性參考宣告</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 若參數為選擇性選填則使用大括弧[]括起來即可</span></span><br><span class="line"><span class="built_in">String</span> say(<span class="built_in">String</span> from, <span class="built_in">String</span> msg, [<span class="built_in">String?</span> device]) &#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="string">&#x27;<span class="subst">$from</span> says <span class="subst">$msg</span>&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (device != <span class="keyword">null</span>) &#123;</span><br><span class="line">    result = <span class="string">&#x27;<span class="subst">$result</span> with a <span class="subst">$device</span>&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>參數給預設值宣告</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以設定參數的預設值，直接使用=符號指定參數值即可</span></span><br><span class="line"><span class="keyword">void</span> enableFlags(&#123;<span class="built_in">bool</span> bold = <span class="keyword">false</span>, <span class="built_in">bool</span> hidden = <span class="keyword">false</span>&#125;) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因為上方Function宣告時有指定預設值，因此下方呼叫時沒有宣告hidden也是正確的</span></span><br><span class="line">enableFlags(bold: <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>選擇性參數給預設值宣告</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span> say(<span class="built_in">String</span> from, <span class="built_in">String</span> msg, [<span class="built_in">String</span> device = <span class="string">&#x27;carrier pigeon&#x27;</span>]) &#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="string">&#x27;<span class="subst">$from</span> says <span class="subst">$msg</span> with a <span class="subst">$device</span>&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 沒有給device變數的值，因此會帶預設值:carrier pigeon</span></span><br><span class="line"><span class="keyword">assert</span>(say(<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Howdy&#x27;</span>) == <span class="string">&#x27;Bob says Howdy with a carrier pigeon&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Main-Function"><a href="#Main-Function" class="headerlink" title="Main Function"></a>Main Function</h2><p>接著看到的是每個application的入口，<code>main()</code>這個function，主要特色為</p>
<ul>
<li>回傳值為<code>void</code></li>
<li>選擇性參數<code>List&lt;string&gt;</code></li>
<li>可透過第三方套件<a href="https://pub.dev/packages/args">https://pub.dev/packages/args</a>，解析command line中傳入的<code>arguments</code>參數</li>
</ul>
<h2 id="Function當傳入參數"><a href="#Function當傳入參數" class="headerlink" title="Function當傳入參數"></a>Function當傳入參數</h2><p>這個真的是一大福音，筆者平常工作使用的C#程式語言，需要特別透過<code>delegate</code>類才能做到這種由外部決定實作，等於<code>input, output</code>相符即可，以官方文件中的例子來說</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> printElement(<span class="built_in">int</span> element) &#123;</span><br><span class="line">  <span class="built_in">print</span>(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上述<code>function</code>來說，約法三章的內容是<code>input</code>為<code>int</code>資料型別，<code>output</code>為<code>void</code>，只要符合這種<code>input</code>, <code>output</code>的場合就派上用場</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pass printElement as a parameter.</span></span><br><span class="line">list.forEach(printElement);</span><br></pre></td></tr></table></figure>

<p>以上述程式碼來說，<code>forEach</code>中得到的就是<code>int</code>資料型別，且這個執行沒有回傳值，符合<code>output</code>為<code>void</code>，因此可以將<code>printElement</code>當作參數傳進去。</p>
<h2 id="匿名函式"><a href="#匿名函式" class="headerlink" title="匿名函式"></a>匿名函式</h2><p>這就是滿好解釋的了，就像<code>main()</code>，或者上節提到的<code>printElement()</code>都算是有名字的函式，就以剛剛的<code>printElement()</code>函式來說，也可以直接寫成匿名(沒有名字)函式</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [<span class="string">&#x27;apples&#x27;</span>, <span class="string">&#x27;bananas&#x27;</span>, <span class="string">&#x27;oranges&#x27;</span>];</span><br><span class="line">list.forEach((item) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;<span class="subst">$&#123;list.indexOf(item)&#125;</span>: <span class="subst">$item</span>&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Lexical-Scope語彙範疇"><a href="#Lexical-Scope語彙範疇" class="headerlink" title="Lexical Scope語彙範疇"></a>Lexical Scope語彙範疇</h2><p>筆者覺得參考連結中的文章介紹的滿詳細的，這邊就不多著墨解釋，因為再解釋下去也沒有比參考連結中講的好，倒不如直接參考該連結即可</p>
<ul>
<li><a href="https://ithelp.ithome.com.tw/articles/10194745">https://ithelp.ithome.com.tw/articles/10194745</a></li>
</ul>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>參考</p>
<ul>
<li><a href="https://dart.dev/guides/language/language-tour#functions">https://dart.dev/guides/language/language-tour#functions</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10194745">https://ithelp.ithome.com.tw/articles/10194745</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>dart</tag>
      </tags>
  </entry>
  <entry>
    <title>[Flutter讀書會]Dart101:Build-inTypes資料型別-Symbol</title>
    <url>/2022/08/10/flutter-series-dart101-symbol/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p><code>Dart</code>程式語言的資料型別介紹來到最後一篇啦，前面三篇滿滿的內容，筆者都寫到頭昏腦脹，主要是希望趕上讀書會的進度，希望在這週完成<code>Dart</code>程式語言的了解。筆者尚未完成很重要的<code>Function</code>方法、<code>Operators</code>運算子、<code>Control Flow</code>及最重要的<code>Class</code>概念，把這些都釐清楚後，我想進入到<code>Flutter</code>的世界，只要學好<code>xml</code>格式的<code>UI Control</code>配置，我想應該是可以開發一些Demo應用程式了，好興奮阿，就跟著筆者繼續學習這篇的主角<code>Symbol</code>吧。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>筆者這邊還是簡單列一下筆者這邊的開發環境</p>
<ul>
<li>作業系統:Mac OS</li>
<li>Dart版本:<code>2.17.6</code></li>
<li>編輯器:Visual Studio Code</li>
</ul>
<h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><p>看官方文件及搜尋各家部落格的說明後，就是所謂的<code>標示符</code>，經過看範例過程，筆者理解到的是有點像是<code>C#</code>程式語言中的<code>Type</code>，透過<code>GetType</code>取得之後與<code>Reflection</code>反射搭配，取得<code>Assembly</code>的資訊，以更進階，更動態的方式進行程式執行吧。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:mirrors&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123; </span><br><span class="line">  <span class="built_in">Symbol</span> libName = <span class="keyword">new</span> <span class="built_in">Symbol</span>(<span class="string">&#x27;dart.core&#x27;</span>);</span><br><span class="line">  MirrorSystem mirrorSystem = currentMirrorSystem();</span><br><span class="line">  LibraryMirror libraryMirror = mirrorSystem.findLibrary(libName);</span><br><span class="line">  libraryMirror.declarations.forEach((key, value) &#123;<span class="built_in">print</span>(<span class="string">&#x27;<span class="subst">$key</span> - <span class="subst">$value</span>&#x27;</span>);&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 執行結果</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Symbol(&quot;_SLASH&quot;) - VariableMirror on &#x27;_SLASH&#x27;</span></span><br><span class="line"><span class="comment">Symbol(&quot;_AbstractType&quot;) - ClassMirror on &#x27;_AbstractType&#x27;</span></span><br><span class="line"><span class="comment">Symbol(&quot;print&quot;) - MethodMirror on &#x27;print&#x27;</span></span><br><span class="line"><span class="comment">Symbol(&quot;_UPPER_CASE_Z&quot;) - VariableMirror on &#x27;_UPPER_CASE_Z&#x27;</span></span><br><span class="line"><span class="comment">Symbol(&quot;_RegExpMatch&quot;) - ClassMirror on &#x27;_RegExpMatch&#x27;</span></span><br><span class="line"><span class="comment">Symbol(&quot;_SPACE&quot;) - VariableMirror on &#x27;_SPACE&#x27;</span></span><br><span class="line"><span class="comment">Symbol(&quot;WeakReference&quot;) - ClassMirror on &#x27;WeakReference&#x27;</span></span><br><span class="line"><span class="comment">Symbol(&quot;Enum&quot;) - ClassMirror on &#x27;Enum&#x27;</span></span><br><span class="line"><span class="comment">Symbol(&quot;BidirectionalIterator&quot;) - ClassMirror on &#x27;BidirectionalIterator&#x27;</span></span><br><span class="line"><span class="comment">Symbol(&quot;_Uri&quot;) - ClassMirror on &#x27;_Uri&#x27;</span></span><br><span class="line"><span class="comment">Symbol(&quot;_scannerTables&quot;) - VariableMirror on &#x27;_scannerTables&#x27;</span></span><br><span class="line"><span class="comment">Symbol(&quot;_TypeError&quot;) - ClassMirror on &#x27;_TypeError&#x27;</span></span><br><span class="line"><span class="comment">Symbol(&quot;_SimpleUri&quot;) - ClassMirror on &#x27;_SimpleUri&#x27;</span></span><br><span class="line"><span class="comment">以下省略</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>以上述範例來看，基本上搭配<code>MirrorSystem</code>來做搭配使用，透過<code>LibraryMirror</code>取得指定的<code>library</code>資訊，範例中是取得<code>dart.core</code>這個內建的<code>library</code>，並將其內含的<code>Variable</code>, <code>Methods</code>, <code>Class</code>等等所有宣告列印出來。</p>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>筆者這篇結論就是先記著有這樣的東西，到時用到的時候再來深究它吧，筆者本身在寫<code>C#</code>時，很常使用到<code>Reflection</code>開發一些共用<code>library</code>，算熟悉，但是到<code>Dart</code>語言，且要寫在<code>Flutter</code>框架時，還不知道應用場景，到時有用到時再來寫一篇說明其應用，這篇就到這邊了，下篇再見。</p>
<p>參考</p>
<ul>
<li><a href="https://dart.dev/guides/language/language-tour#symbols">https://dart.dev/guides/language/language-tour#symbols</a></li>
<li><a href="https://www.youtube.com/watch?v=Tyt4CjZd6nU&ab_channel=duCafeCat">https://www.youtube.com/watch?v=Tyt4CjZd6nU&amp;ab_channel=duCafeCat</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>dart</tag>
      </tags>
  </entry>
  <entry>
    <title>[Flutter讀書會]Dart101:Build-inTypes資料型別-Booleans,Lists,Sets,Maps</title>
    <url>/2022/08/10/flutter-series-dart101-list-set-map/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>上一篇介紹完<code>Strings</code>之後，這篇來到<code>Booleans</code>、<code>Lists</code>、<code>Sets</code>、<code>Maps</code>了，因為Booleans就比較沒甚麼好解說的，就是<code>true</code>跟<code>false</code>，因此把另外三個也納進來一起解說，以免篇幅太少，基本上<code>Lists</code>、<code>Sets</code>、<code>Maps</code>也滿好理解的，這些資料型別是其他程式語言常見到的，只要搞清楚三者的差異以及適用時機，基本上就是駕輕就熟了，跟著筆者一起學習吧。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>筆者這邊還是簡單列一下筆者這邊的開發環境</p>
<ul>
<li>作業系統:Mac OS</li>
<li>Dart版本:<code>2.17.6</code></li>
<li>編輯器:Visual Studio Code</li>
</ul>
<h2 id="Booleans"><a href="#Booleans" class="headerlink" title="Booleans"></a>Booleans</h2><p>這就沒甚麼好解釋的了，<code>true</code>、<code>false</code>二擇一</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Check for an empty string.</span></span><br><span class="line"><span class="keyword">var</span> fullName = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">assert</span>(fullName.isEmpty);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check for zero.</span></span><br><span class="line"><span class="keyword">var</span> hitPoints = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">assert</span>(hitPoints &lt;= <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check for null.</span></span><br><span class="line"><span class="keyword">var</span> unicorn;</span><br><span class="line"><span class="keyword">assert</span>(unicorn == <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check for NaN.</span></span><br><span class="line"><span class="keyword">var</span> iMeantToDoThis = <span class="number">0</span> / <span class="number">0</span>;</span><br><span class="line"><span class="keyword">assert</span>(iMeantToDoThis.isNaN);</span><br></pre></td></tr></table></figure>

<h2 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h2><p>泛型集合<code>List&lt;T&gt;</code>，亦即可以示<code>List&lt;int&gt;</code>，也可以是<code>List&lt;string&gt;</code>，但不能將不同資料型別混著放，<code>Dart</code>程式語言是<code>Type Safety</code>的語言，因此編譯時就會噴錯。不意外地，Dart語言中，<code>List</code>使用<code>zero-based indexing</code>，這個東西平常看似沒甚麼，但是遇到時心裡就會很OOXX，筆者絕對不是在說JS中的getMonth()，因為常常遇到月份比較時，很自然地忘記它也是<code>zero-based indexing</code>，因此常常鬼打牆的在偵錯。</p>
<h3 id="宣告方式"><a href="#宣告方式" class="headerlink" title="宣告方式"></a>宣告方式</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> list = [</span><br><span class="line">  <span class="string">&#x27;Car&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Boat&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Plane&#x27;</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h3 id="Spread-Operator"><a href="#Spread-Operator" class="headerlink" title="Spread Operator"></a>Spread Operator</h3><p>滿特別的一個，筆者在撰寫Angular時特別愛用，畢竟<code>JS</code>世界裡一切都是物件，因此若想要達到<code>Deep Copy深層複製</code>時，筆者愛用簡單解法，透過<code>Spread Operator</code>把每個元素都展開，並指派給新的變數，藉由達到<code>Deep Copy深層複製</code>的效果，竟然在<code>Dart</code>程式語言中再次遇見。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> list2 = [<span class="number">0</span>, ...list];</span><br><span class="line"><span class="keyword">assert</span>(list2.length == <span class="number">4</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Collection-If"><a href="#Collection-If" class="headerlink" title="Collection If"></a>Collection If</h3><p>很特別的一個<code>feature</code>，在初始化塞值時，可以透過if判斷式，決定要不要塞該元素</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 依照promoActive的值為true或false來決定是否增加&#x27;Outlet&#x27;這個元素</span></span><br><span class="line"><span class="keyword">var</span> nav = [<span class="string">&#x27;Home&#x27;</span>, <span class="string">&#x27;Furniture&#x27;</span>, <span class="string">&#x27;Plants&#x27;</span>, <span class="keyword">if</span> (promoActive) <span class="string">&#x27;Outlet&#x27;</span>];</span><br></pre></td></tr></table></figure>

<h3 id="Collection-For"><a href="#Collection-For" class="headerlink" title="Collection For"></a>Collection For</h3><p>這也是跟上述<code>feature</code>一樣，比較少在其他語言看到的特性，可以透過for迴圈，塞有規則性的多個元素</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> listOfInts = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 配合動態組合字串$&#123;expression&#125;，組出#1, #2, #3，並將這三個元素加入至listOfStrings陣列中</span></span><br><span class="line"><span class="keyword">var</span> listOfStrings = [<span class="string">&#x27;#0&#x27;</span>, <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> listOfInts) <span class="string">&#x27;#<span class="subst">$i</span>&#x27;</span>];</span><br><span class="line"><span class="keyword">assert</span>(listOfStrings[<span class="number">1</span>] == <span class="string">&#x27;#1&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="相關操作API"><a href="#相關操作API" class="headerlink" title="相關操作API"></a>相關操作API</h3><ul>
<li><code>isEmpty:</code>判斷是否為空集合</li>
<li><code>add:</code>新增一筆元素</li>
<li><code>addAll:</code>新增多個元素</li>
<li><code>length:</code>取得集合大小</li>
<li><code>removeAt:</code>透過指定元素位置刪除(搭配<code>indexOf</code>找到元素所在位置)</li>
<li><code>clear:</code>清空集合</li>
<li><code>filled:</code>透過List提供的<code>Constructor</code>新增指定元素並且依照指定次數增加</li>
<li><code>sort</code>:排序，可搭配使用<code>compareTo</code>使用自己指定的比較方法排序</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Create an empty list of strings.</span></span><br><span class="line"><span class="keyword">var</span> grains = &lt;<span class="built_in">String</span>&gt;[];</span><br><span class="line"><span class="keyword">assert</span>(grains.isEmpty);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a list using a list literal.</span></span><br><span class="line"><span class="keyword">var</span> fruits = [<span class="string">&#x27;apples&#x27;</span>, <span class="string">&#x27;oranges&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add to a list.</span></span><br><span class="line"><span class="comment">// 增加完成後，fruits為[&#x27;apples&#x27;, &#x27;oranges&#x27;, &#x27;kiwis&#x27;]</span></span><br><span class="line">fruits.add(<span class="string">&#x27;kiwis&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add multiple items to a list.</span></span><br><span class="line"><span class="comment">// 增加完成後，fruits為[&#x27;apples&#x27;, &#x27;oranges&#x27;, &#x27;kiwis&#x27;, &#x27;grapes&#x27;, &#x27;bananas&#x27;]</span></span><br><span class="line">fruits.addAll([<span class="string">&#x27;grapes&#x27;</span>, <span class="string">&#x27;bananas&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the list length.</span></span><br><span class="line"><span class="comment">// 執行到這邊，fruits這個List長度為5</span></span><br><span class="line"><span class="keyword">assert</span>(fruits.length == <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove a single item.</span></span><br><span class="line"><span class="comment">// 先找到&#x27;apples&#x27;這個元素所在位置</span></span><br><span class="line"><span class="keyword">var</span> appleIndex = fruits.indexOf(<span class="string">&#x27;apples&#x27;</span>);</span><br><span class="line"><span class="comment">// 透過指定元素位置方式刪除元素</span></span><br><span class="line">fruits.removeAt(appleIndex);</span><br><span class="line"><span class="comment">// 執行到這邊，fruits這個List長度為4</span></span><br><span class="line"><span class="keyword">assert</span>(fruits.length == <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove all elements from a list.</span></span><br><span class="line"><span class="comment">// 將fruits這個List清空</span></span><br><span class="line">fruits.clear();</span><br><span class="line"><span class="comment">// 判斷是否為空集合，結果是true</span></span><br><span class="line"><span class="keyword">assert</span>(fruits.isEmpty);</span><br><span class="line"></span><br><span class="line"><span class="comment">// You can also create a List using one of the constructors.</span></span><br><span class="line"><span class="comment">// 第一個參數為增加次數</span></span><br><span class="line"><span class="comment">// 第二個參數為欲新增之元素</span></span><br><span class="line"><span class="comment">// 作用為拿第二個參數新增至List，次數為第一個參數指定之</span></span><br><span class="line"><span class="comment">// 因此vegetables這個List裡頭有99個元素，每個元素皆為&#x27;broccoli&#x27;</span></span><br><span class="line"><span class="keyword">var</span> vegetables = <span class="built_in">List</span>.filled(<span class="number">99</span>, <span class="string">&#x27;broccoli&#x27;</span>);</span><br><span class="line"><span class="keyword">assert</span>(vegetables.every((v) =&gt; v == <span class="string">&#x27;broccoli&#x27;</span>));</span><br></pre></td></tr></table></figure>

<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">&#x27;bananas&#x27;</span>, <span class="string">&#x27;apples&#x27;</span>, <span class="string">&#x27;oranges&#x27;</span>];</span><br><span class="line"><span class="built_in">print</span>(fruits);</span><br><span class="line">fruits.sort();</span><br><span class="line"><span class="built_in">print</span>(fruits);</span><br><span class="line"><span class="comment">// [bananas, apples, oranges]</span></span><br><span class="line"><span class="comment">// [apples, bananas, oranges]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 透過compareTo來實作逆排</span></span><br><span class="line">fruits.sort((a, b) =&gt; -a.compareTo(b));</span><br><span class="line"><span class="built_in">print</span>(fruits);</span><br><span class="line"><span class="comment">// [oranges, bananas, apples]</span></span><br></pre></td></tr></table></figure>

<p>完整<code>API</code>資訊，請參考</p>
<p><a href="https://api.dart.dev/stable/2.17.6/dart-core/List-class.html">https://api.dart.dev/stable/2.17.6/dart-core/List-class.html</a></p>
<h2 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h2><p>泛型集合，與<code>List</code>不一樣的地方在於，<code>Set</code>每個元素都是唯一的，不能重複出現</p>
<blockquote>
<p>A collection of objects in which each object can occur only once.</p>
</blockquote>
<h3 id="宣告方式-1"><a href="#宣告方式-1" class="headerlink" title="宣告方式"></a>宣告方式</h3><p>還記得<code>List</code>的宣告方式吧，<code>[1, 2, 3]</code>的方式，Set則是<code>&#123; 1, 2, 3&#125;</code></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> halogens = &#123;<span class="string">&#x27;fluorine&#x27;</span>, <span class="string">&#x27;chlorine&#x27;</span>, <span class="string">&#x27;bromine&#x27;</span>, <span class="string">&#x27;iodine&#x27;</span>, <span class="string">&#x27;astatine&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>空集合的宣告方式則</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 讓Dart編譯器知道是Set&lt;string&gt;</span></span><br><span class="line"><span class="keyword">var</span> names = &lt;<span class="built_in">String</span>&gt;&#123;&#125;;</span><br><span class="line"><span class="comment">// 指定型別的宣告方式也是可以的</span></span><br><span class="line"><span class="comment">// Set&lt;String&gt; names = &#123;&#125;; // This works, too.</span></span><br><span class="line"><span class="comment">// 這是一個反教材，若沒有指定型別的&#123;&#125;則會被認定是Map的初始化，而非Set</span></span><br><span class="line"><span class="comment">// var names = &#123;&#125;; // Creates a map, not a set.</span></span><br></pre></td></tr></table></figure>

<p>相關操作API，就不特別列出，因為大同小異，要特別提醒的是</p>
<blockquote>
<p>A set in Dart is an unordered collection of unique items. Because a set is unordered, you can’t get a set’s items by index (position).</p>
</blockquote>
<p>其他詳細<code>API</code>參考</p>
<p><a href="https://api.dart.dev/stable/2.17.6/dart-core/Set-class.html">https://api.dart.dev/stable/2.17.6/dart-core/Set-class.html</a></p>
<h2 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h2><p><code>Maps</code>結構就是<code>Map&lt;Tkey, TValue&gt;(key, value)</code>型式的一種資料型別，簡單點解釋的話，即是<code>Dictionary</code>字典型式的資料型別</p>
<h3 id="宣告方式-2"><a href="#宣告方式-2" class="headerlink" title="宣告方式"></a>宣告方式</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gifts = &#123;</span><br><span class="line">  <span class="comment">// Key:    Value</span></span><br><span class="line">  <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;partridge&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;second&#x27;</span>: <span class="string">&#x27;turtledoves&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;fifth&#x27;</span>: <span class="string">&#x27;golden rings&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gifts = <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt;();</span><br><span class="line">gifts[<span class="string">&#x27;first&#x27;</span>] = <span class="string">&#x27;partridge&#x27;</span>;</span><br><span class="line">gifts[<span class="string">&#x27;second&#x27;</span>] = <span class="string">&#x27;turtledoves&#x27;</span>;</span><br><span class="line">gifts[<span class="string">&#x27;fifth&#x27;</span>] = <span class="string">&#x27;golden rings&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><code>Map</code>部份，相關操作與<code>Collection</code>其他家族<code>Set</code>、<code>Map</code>大同小異，而筆者想要經驗分享的是，<code>Dictionary</code>顧名思義，<code>key</code>是獨一無二的，因此每次在<code>add</code>時，記得使用<code>containsKey</code>這個<code>API</code>做檢查，讓你少走一點冤望路。</p>
<p>詳細<code>API</code>參考</p>
<p><a href="https://api.dart.dev/stable/2.17.6/dart-core/Map-class.html">https://api.dart.dev/stable/2.17.6/dart-core/Map-class.html</a></p>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>趕緊在結束之前說一下List介紹中提到的</p>
<ul>
<li><code>Spread Operator</code></li>
<li><code>Collection If</code></li>
<li><code>Collection For</code></li>
</ul>
<p>因為<code>List</code>、<code>Set</code>、<code>Map</code>皆屬於Collection大家族，因此皆適用。</p>
<p><code>List</code>、<code>Set</code>、<code>Map</code>要如何使用呢，一般情況使用<code>List</code>就可以解決大部份的問題，若想要集合的元素不重複時，可以考慮使用<code>Set</code>這個資料結構來存放，但注意<code>Set</code>這個沒有<code>indexOf</code>這個<code>API</code>可以使用，接著那種<code>key、value</code>式的就可以考慮使用<code>Map</code>來操作。</p>
<p>基本上記得每個資料結構的特性，搭配各自的<code>API</code>文件說明，筆者想應付一般應用程式是綽綽有餘的，筆者還是鼓勵一貫的做法，先理解一下能做到甚麼就好，理解的程度到在遇到問題時腦中有一些keyword浮現即可，然而真正要用到時再去深究它，畢竟腦容量有限，希望這篇文章對大家有幫助。</p>
<p>參考</p>
<ul>
<li><a href="https://dart.dev/guides/language/language-tour#lists">https://dart.dev/guides/language/language-tour#lists</a></li>
<li><a href="https://dart.dev/guides/language/language-tour#maps">https://dart.dev/guides/language/language-tour#</a>sets</li>
<li><a href="https://dart.dev/guides/language/language-tour#maps">https://dart.dev/guides/language/language-tour#maps</a></li>
<li><a href="https://dart.dev/guides/libraries/library-tour#collections">https://dart.dev/guides/libraries/library-tour#collections</a></li>
<li><a href="https://stackoverflow.com/questions/27897932/sorting-ascending-and-descending-in-dart">https://stackoverflow.com/questions/27897932/sorting-ascending-and-descending-in-dart</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>dart</tag>
      </tags>
  </entry>
  <entry>
    <title>[Flutter讀書會]Dart101:Built-inTypes資料型別-Strings</title>
    <url>/2022/08/10/flutter-series-dart101-strings/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>上篇介紹完資料型別-<code>Numbers</code>後，這篇來到<code>Strings</code>的篇幅，筆者這邊也是採用官方文件及相關連結做一個簡述及驗證，跟著筆者一起學習吧。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>筆者這邊還是簡單列一下筆者這邊的開發環境</p>
<ul>
<li>作業系統:Mac OS</li>
<li>Dart版本:<code>2.17.6</code></li>
<li>編輯器:Visual Studio Code</li>
</ul>
<h2 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h2><h3 id="宣告方式"><a href="#宣告方式" class="headerlink" title="宣告方式"></a>宣告方式</h3><p>在<code>Dart</code>語言中，<code>Strings</code>代表<code>UTF-16</code>編碼的序列組成，可以使用<code>單引號</code>或<code>雙引號</code>來表示字串</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">&#x27;Single quotes work well for string literals.&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">&quot;Double quotes work just as well.&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> s3 = <span class="string">&#x27;It\&#x27;s easy to escape the string delimiter.&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> s4 = <span class="string">&quot;It&#x27;s even easier to use the other delimiter.&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="動態組合字串"><a href="#動態組合字串" class="headerlink" title="動態組合字串"></a>動態組合字串</h3><p>透過<code>$&#123;*expression*&#125;</code>可以動態組合字串</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&#x27;string interpolation&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(<span class="string">&#x27;Dart has <span class="subst">$s</span>, which is very handy.&#x27;</span> ==</span><br><span class="line">    <span class="string">&#x27;Dart has string interpolation, &#x27;</span></span><br><span class="line">        <span class="string">&#x27;which is very handy.&#x27;</span>);</span><br><span class="line"><span class="keyword">assert</span>(<span class="string">&#x27;That deserves all caps. &#x27;</span></span><br><span class="line">        <span class="string">&#x27;<span class="subst">$&#123;s.toUpperCase()&#125;</span> is very handy!&#x27;</span> ==</span><br><span class="line">    <span class="string">&#x27;That deserves all caps. &#x27;</span></span><br><span class="line">        <span class="string">&#x27;STRING INTERPOLATION is very handy!&#x27;</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>==比對字串</code>，要注意的是<code>Dart編譯器</code>比對的是已經轉換成<code>UTF-16</code>編碼過後的一組序列的比對</p>
</blockquote>
<h3 id="運算子"><a href="#運算子" class="headerlink" title="+運算子"></a>+運算子</h3><p>可以透過<code>+</code>運算子組合字串</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s2 = <span class="string">&#x27;The + operator &#x27;</span> + <span class="string">&#x27;works, as well.&#x27;</span>;</span><br><span class="line"><span class="keyword">assert</span>(s2 == <span class="string">&#x27;The + operator works, as well.&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="換行宣告字串"><a href="#換行宣告字串" class="headerlink" title="換行宣告字串"></a>換行宣告字串</h3><p>若宣告字串中，需要換行宣告，又要保持同一行的字串時，可透過<code>&#39;&#39;&#39;三個單引號</code>來表示</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">You can create</span></span><br><span class="line"><span class="string">multi-line strings like this one.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">&quot;&quot;&quot;This is also a</span></span><br><span class="line"><span class="string">multi-line string.&quot;&quot;&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="Strings常用操作方法"><a href="#Strings常用操作方法" class="headerlink" title="Strings常用操作方法"></a>Strings常用操作方法</h3><ol>
<li>搜尋字串<ol>
<li><code>contains</code></li>
<li><code>startsWith</code></li>
<li><code>endsWith</code></li>
<li><code>indexOf</code></li>
</ol>
</li>
</ol>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Check whether a string contains another string.</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="string">&#x27;Never odd or even&#x27;</span>.contains(<span class="string">&#x27;odd&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Does a string start with another string?</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="string">&#x27;Never odd or even&#x27;</span>.startsWith(<span class="string">&#x27;Never&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Does a string end with another string?</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="string">&#x27;Never odd or even&#x27;</span>.endsWith(<span class="string">&#x27;even&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Find the location of a string inside a string.</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="string">&#x27;Never odd or even&#x27;</span>.indexOf(<span class="string">&#x27;odd&#x27;</span>) == <span class="number">6</span>);</span><br></pre></td></tr></table></figure>

<ol>
<li>擷取字串SubString<ol>
<li><code>substrings</code></li>
<li><code>split</code></li>
<li><code>codeUnits</code></li>
</ol>
</li>
</ol>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Grab a substring.</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="string">&#x27;Never odd or even&#x27;</span>.substring(<span class="number">6</span>, <span class="number">9</span>) == <span class="string">&#x27;odd&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Split a string using a string pattern.</span></span><br><span class="line"><span class="keyword">var</span> parts = <span class="string">&#x27;progressive web apps&#x27;</span>.split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line"><span class="keyword">assert</span>(parts.length == <span class="number">3</span>);</span><br><span class="line"><span class="keyword">assert</span>(parts[<span class="number">0</span>] == <span class="string">&#x27;progressive&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get a UTF-16 code unit (as a string) by index.</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="string">&#x27;Never odd or even&#x27;</span>[<span class="number">0</span>] == <span class="string">&#x27;N&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use split() with an empty string parameter to get</span></span><br><span class="line"><span class="comment">// a list of all characters (as Strings); good for</span></span><br><span class="line"><span class="comment">// iterating.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> char <span class="keyword">in</span> <span class="string">&#x27;hello&#x27;</span>.split(<span class="string">&#x27;&#x27;</span>)) &#123;</span><br><span class="line">  <span class="built_in">print</span>(char);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get all the UTF-16 code units in the string.</span></span><br><span class="line"><span class="keyword">var</span> codeUnitList = <span class="string">&#x27;Never odd or even&#x27;</span>.codeUnits.toList();</span><br><span class="line"><span class="keyword">assert</span>(codeUnitList[<span class="number">0</span>] == <span class="number">78</span>);</span><br></pre></td></tr></table></figure>

<ol>
<li>轉大、小寫UpperCase/LowerCase<ol>
<li><code>toUpperCase</code></li>
<li><code>toLowerCase</code></li>
</ol>
</li>
</ol>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Convert to uppercase.</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="string">&#x27;web apps&#x27;</span>.toUpperCase() == <span class="string">&#x27;WEB APPS&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Convert to lowercase.</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="string">&#x27;WEB APPS&#x27;</span>.toLowerCase() == <span class="string">&#x27;web apps&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ol>
<li>TrimAndEmpty<ol>
<li><code>trim</code></li>
<li><code>isEmpty</code></li>
<li><code>isNotEmpty</code></li>
</ol>
</li>
</ol>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Trim a string.</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="string">&#x27;  hello  &#x27;</span>.trim() == <span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check whether a string is empty.</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="string">&#x27;&#x27;</span>.isEmpty);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Strings with only white space are not empty.</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="string">&#x27;  &#x27;</span>.isNotEmpty);</span><br></pre></td></tr></table></figure>

<ol>
<li>取代Replace</li>
</ol>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> greetingTemplate = <span class="string">&#x27;Hello, NAME!&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> greeting = greetingTemplate.replaceAll(<span class="built_in">RegExp</span>(<span class="string">&#x27;NAME&#x27;</span>), <span class="string">&#x27;Bob&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// greetingTemplate didn&#x27;t change.</span></span><br><span class="line"><span class="keyword">assert</span>(greeting != greetingTemplate);</span><br></pre></td></tr></table></figure>

<p>Strings相關詳細API部份，請參考</p>
<p><a href="https://api.dart.dev/stable/2.17.6/dart-core/String-class.html">https://api.dart.dev/stable/2.17.6/dart-core/String-class.html</a></p>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>筆者這邊有跳過一個主題:<strong>Runes and grapheme clusters，</strong>這個需要花滿多時間去研讀並消化它，畢竟很底層的操作才會需要使用到它，改天再找時間完成另一篇專門文章介紹該主題，剛好筆者參加的另一個長青讀書會(因為已經維持五六年有了)的成員上週在報<code>Encoding</code>相關的主題，筆者屆時會參考該成員提供的教學影片，就先放在參考中提醒筆者，下篇見。</p>
<p>參考</p>
<ul>
<li><a href="https://dart.dev/guides/language/language-tour#strings">https://dart.dev/guides/language/language-tour#strings</a></li>
<li><a href="https://dart.dev/guides/libraries/library-tour#strings-and-regular-expressions">https://dart.dev/guides/libraries/library-tour#strings-and-regular-expressions</a></li>
<li><a href="https://api.dart.dev/stable/2.17.6/dart-core/String-class.html">https://api.dart.dev/stable/2.17.6/dart-core/String-class.html</a></li>
<li><a href="https://www.youtube.com/watch?v=ut74oHojxqo">https://www.youtube.com/watch?v=ut74oHojxqo</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>dart</tag>
      </tags>
  </entry>
  <entry>
    <title>[Flutter讀書會]Dart101:Built-inTypes資料型別-Numbers</title>
    <url>/2022/08/10/flutter-series-dart101-numbers/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>上篇介紹完<code>Dart</code>語言開發環境與第一支Hello World程式後，這篇要來介紹資料型別與變數，筆者就以官方<code>Dcoument</code>文件中的<code>Language&gt;Tour</code>為主，參考其介紹方式，解釋各個資料型別，此篇主要介紹<code>Numbers</code>這個資料型別。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>筆者這邊還是簡單列一下筆者這邊的開發環境</p>
<ul>
<li>作業系統:Mac OS</li>
<li>Dart版本:<code>2.17.6</code></li>
<li>編輯器:Visual Studio Code</li>
</ul>
<h2 id="Numbers"><a href="#Numbers" class="headerlink" title="Numbers"></a>Numbers</h2><h3 id="int"><a href="#int" class="headerlink" title="int"></a>int</h3><p>畢竟<code>Flutter</code>框架透過<code>Dart</code>程式語言撰寫各種跨平台應用程式，因此大小區間依照運行的環境而不一樣，移動式裝置環境中為<code>-2^63~2^63-1</code>，<code>Web</code>環境中為因<code>JS</code>語言特性而<code>-2^53~2^53-1</code></p>
<h3 id="double"><a href="#double" class="headerlink" title="double"></a>double</h3><p>依照<code>IEEE 754</code>標準宣告而成的浮點數</p>
<h3 id="宣告方式"><a href="#宣告方式" class="headerlink" title="宣告方式"></a>宣告方式</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 無小數點為int</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> hex = <span class="number">0xDEADBEEF</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有小數點則是double</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="number">1.1</span>;</span><br><span class="line"><span class="keyword">var</span> exponents = <span class="number">1.42e5</span>;</span><br></pre></td></tr></table></figure>

<p>其中特別的是也可以直接宣告為<code>num</code>，令該變數可以是<code>int</code>，也可以是<code>double</code></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">num</span> x = <span class="number">1</span>; <span class="comment">// x can have both int and double values</span></span><br><span class="line">x += <span class="number">2.5</span>;</span><br></pre></td></tr></table></figure>

<p>若宣告變數為<code>double</code>時，未加小數點也是可以的</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">double</span> z = <span class="number">1</span>; <span class="comment">// Equivalent to double z = 1.0.</span></span><br></pre></td></tr></table></figure>

<h3 id="轉換型別"><a href="#轉換型別" class="headerlink" title="轉換型別"></a>轉換型別</h3><p>撰寫程式過程避免不了轉換型別，那<code>Dart</code>程式語言中是如何實作的呢，讓筆者帶大家來看看，因<code>Numbers</code>分為<code>int</code>及<code>double</code>，針對這兩種有不一樣的撰寫方式</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// String -&gt; int</span></span><br><span class="line"><span class="keyword">var</span> one = <span class="built_in">int</span>.parse(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">assert</span>(one == <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// String -&gt; double</span></span><br><span class="line"><span class="keyword">var</span> onePointOne = <span class="built_in">double</span>.parse(<span class="string">&#x27;1.1&#x27;</span>);</span><br><span class="line"><span class="keyword">assert</span>(onePointOne == <span class="number">1.1</span>);</span><br></pre></td></tr></table></figure>

<p>當然也會有時機點從<code>Numbers</code>轉換至<code>Strings</code>的情形</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// int -&gt; String</span></span><br><span class="line"><span class="built_in">String</span> oneAsString = <span class="number">1.</span>toString();</span><br><span class="line"><span class="keyword">assert</span>(oneAsString == <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// double -&gt; String</span></span><br><span class="line"><span class="built_in">String</span> piAsString = <span class="number">3.14159</span>.toStringAsFixed(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">assert</span>(piAsString == <span class="string">&#x27;3.14&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="位元與移位運算子"><a href="#位元與移位運算子" class="headerlink" title="位元與移位運算子"></a>位元與移位運算子</h3><p>畢竟我們撰寫的程式，最終都要轉換成<code>01</code>的形式於終端設備中運行，有些應用免不了操作這種低階形式的運算，包含</p>
<ul>
<li><code>&lt;&lt;</code>左移位</li>
<li><code>&gt;&gt;</code>右移位</li>
<li><code>&gt;&gt;&gt;</code>不帶正負號的向右移位</li>
<li><code>&amp;</code> AND</li>
<li><code>|</code> OR</li>
<li><code>^</code> XOR</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span>((<span class="number">3</span> &lt;&lt; <span class="number">1</span>) == <span class="number">6</span>); <span class="comment">// 0011 &lt;&lt; 1 == 0110</span></span><br><span class="line"><span class="keyword">assert</span>((<span class="number">3</span> | <span class="number">4</span>) == <span class="number">7</span>); <span class="comment">// 0011 | 0100 == 0111</span></span><br><span class="line"><span class="keyword">assert</span>((<span class="number">3</span> &amp; <span class="number">4</span>) == <span class="number">0</span>); <span class="comment">// 0011 &amp; 0100 == 0000</span></span><br></pre></td></tr></table></figure>

<h3 id="算數運算子"><a href="#算數運算子" class="headerlink" title="算數運算子"></a>算數運算子</h3><p>這就筆者不用多說了，<code>Numbers</code>理所當然的有算術相關的運算子，如下</p>
<ul>
<li><code>+ 運算子</code></li>
<li><code>- 運算子</code></li>
<li><code>* 運算子</code></li>
<li><code>/ 運算子</code></li>
<li><code>~/ 運算子</code></li>
<li><code>% 運算子</code></li>
</ul>
<p>其中比較特別的是除法相關的運算子，若想要得到完整的商數則使用一般的<code>/符號</code>，若只想得到商數中的整數部份則使用<code>~/符號</code></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span>(<span class="number">5</span> / <span class="number">2</span> == <span class="number">2.5</span>); <span class="comment">// Result is a double</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="number">5</span> ~/ <span class="number">2</span> == <span class="number">2</span>); <span class="comment">// Result is an int</span></span><br></pre></td></tr></table></figure>

<h3 id="其他相關方法"><a href="#其他相關方法" class="headerlink" title="其他相關方法"></a>其他相關方法</h3><ul>
<li><code>abs()取絕對值</code></li>
<li><code>ceil()無條件進位</code></li>
<li><code>floor()無條件捨去</code></li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">-1.5</span>;</span><br><span class="line">  <span class="keyword">var</span> j = <span class="number">1.5</span>;</span><br><span class="line">  <span class="keyword">var</span> k = <span class="number">1.5</span>;</span><br><span class="line">  <span class="built_in">print</span>(i.abs());</span><br><span class="line">  <span class="built_in">print</span>(j.ceil());</span><br><span class="line">  <span class="built_in">print</span>(k.floor());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1.5</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h3 id="dart-math函式庫介紹"><a href="#dart-math函式庫介紹" class="headerlink" title="dart:math函式庫介紹"></a><strong>dart:math函式庫介紹</strong></h3><p>筆者這邊就先帶過，傳達數字操作時有一個現成的函式庫可以使用(載入外部套件詳細使用方式，會有專篇說明)，使用方式如下</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import關鍵字載入欲使用套件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:math&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>比較會用到的部份就取得<code>Random</code>數字的函式</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> intValue = Random().nextInt(<span class="number">10</span>); <span class="comment">// Value is &gt;= 0 and &lt; 10.</span></span><br><span class="line"><span class="keyword">var</span> doubleValue = Random().nextDouble(); <span class="comment">// Value is &gt;= 0.0 and &lt; 1.0.</span></span><br><span class="line"><span class="keyword">var</span> boolValue = Random().nextBool(); <span class="comment">// true or false, with equal chance.</span></span><br></pre></td></tr></table></figure>

<p>詳細請參考<code>dart:math</code>的完整<code>API</code>列表資訊</p>
<p><a href="https://api.dart.dev/stable/2.17.6/dart-math/dart-math-library.html">https://api.dart.dev/stable/2.17.6/dart-math/dart-math-library.html</a></p>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>哇，原本筆者打算透過一篇文章帶過所有資料型別，但看官方文件，有很多放著連結說，詳細請看此，點過去後不得了，根本可以寫好幾篇的程度，但是還是為了篇幅，筆者還是以一個<code>Numbers</code>及相關函式集結在一起，變成一篇獨立的篇幅呈現，希望對大家有幫助，下篇再見啦。</p>
<p>參考</p>
<ul>
<li><a href="https://dart.dev/guides/language/language-tour">https://dart.dev/guides/language/language-tour</a></li>
<li><a href="https://dart.dev/guides/language/language-tour#bitwise-and-shift-operators">https://dart.dev/guides/language/language-tour#bitwise-and-shift-operators</a></li>
<li><a href="https://api.dart.dev/stable/2.17.6/dart-math/dart-math-library.html">https://api.dart.dev/stable/2.17.6/dart-math/dart-math-library.html</a></li>
<li><a href="https://dart.dev/guides/language/numbers">https://dart.dev/guides/language/numbers</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>dart</tag>
      </tags>
  </entry>
  <entry>
    <title>[Flutter讀書會]Dart101:HelloWorld</title>
    <url>/2022/08/10/flutter-series-dart101-hello-world/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者因公司正打算將公司產品App改用Flutter實作，希望能當先鋒隊，因此自己私下參加讀書會，藉此熟悉一下<code>Flutter</code>的開發方式，屆時公司需要實作時，就可以直接上場大戰啦。</p>
<p>大概在幾年前因同事閒聊聊到<code>Flutter</code>，那時好奇有寫過一篇介紹文，因那時屬自己私底下研究性質，很容易就半途而廢，當然學習下場不是很好，大概兩週就放棄了，這一次藉由讀書會，找到一群熱愛技術的同好督促，才會學得久，學得好。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>筆者因日常使用於Mac環境中，舉例都是以Mac環境為主，話不多說，就直接來安裝開發環境吧。</p>
<h2 id="Dart語言安裝"><a href="#Dart語言安裝" class="headerlink" title="Dart語言安裝"></a>Dart語言安裝</h2><p>透過<code>brew</code>指令來安裝</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew tap dart-lang/dart</span><br><span class="line">brew install dart</span><br></pre></td></tr></table></figure>

<p>安裝完成後透過<code>brew info</code>指令的方式看一下<code>dart</code>是否安裝成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew info dart</span><br><span class="line"><span class="comment"># dart-lang/dart/dart: stable 2.17.6, HEAD</span></span><br><span class="line"><span class="comment"># 以下省略</span></span><br></pre></td></tr></table></figure>

<h2 id="Hello-World-你好，世界"><a href="#Hello-World-你好，世界" class="headerlink" title="Hello World 你好，世界"></a>Hello World 你好，世界</h2><p>學一個程式語言不免俗的寫第一支<code>你好，世界</code>吧，副檔名為<code>dart</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> hello_world.dart <span class="comment"># 新增一個檔案</span></span><br><span class="line">code . <span class="comment"># 使用vscode開啟</span></span><br></pre></td></tr></table></figure>

<p>填上程式碼吧</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello, World!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>透過<code>dart</code>指令來執行上面寫的程式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dart run hello_world.dart</span><br><span class="line"><span class="comment"># Hello, World!</span></span><br></pre></td></tr></table></figure>

<h2 id="註解方式"><a href="#註解方式" class="headerlink" title="註解方式"></a>註解方式</h2><p>學會一個程式語言，初次就是安裝開發環境，寫第一支Hello World程式並運行，接著最重要的是註解方式，離職後才能告訴同事未完成事項(誤，Dart語言跟大多數的程式語言一樣:</p>
<ul>
<li>單行註解使用<code>//</code>這個符號</li>
<li>多行註解使用<code>/*</code> 開頭 <code>*/</code> 結尾</li>
</ul>
<h2 id="assert使用方式"><a href="#assert使用方式" class="headerlink" title="assert使用方式"></a>assert使用方式</h2><p>筆者這邊參考官方文件的說明，官方文件這邊使用的都是<code>assert</code>的方式驗證其變數或方法是否正確，等於把執行結果列在<code>assert</code>方法中，那這種<code>assert</code>發生錯誤會怎麼顯示呢，就要透過以下指令來執行才會出現</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dart --enable-asserts example.dart</span><br></pre></td></tr></table></figure>

<p>先來準備一個檔案，<code>example_assert.dart</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> exmpale_assert.dart</span><br></pre></td></tr></table></figure>

<p>接著編輯上面建立的檔案，寫故意出錯的例子</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">assert</span>(<span class="number">1</span> == <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>就來執行它吧</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dart --enable-asserts example_assert.dart</span><br><span class="line"><span class="comment"># 以上省略</span></span><br><span class="line"><span class="comment"># Failed assertion: line 2 pos 10: &#x27;1 == 2&#x27;: is not true.</span></span><br><span class="line"><span class="comment">#0      _AssertionError._doThrowNew (dart:core-patch/errors_patch.dart:51:61)</span></span><br><span class="line"><span class="comment">#1      _AssertionError._throwNew (dart:core-patch/errors_patch.dart:40:5)</span></span><br><span class="line"><span class="comment"># 以下省略</span></span><br></pre></td></tr></table></figure>

<p>可以看到丟出來的訊息就很清楚，<code>assert</code>中包住的內容：<code>1==2</code>這個式子是不對的，這樣簡單交代一下其執行方式，因為官方文件的例子都是<code>assert</code>形式的，往後文章筆者就不另外花篇幅說明。</p>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>這篇就以簡單的安裝<code>Dart</code>語言開發環境，每個語言中的第一個範例<code>Hello World程式</code>作介紹，之後會以官方文件加上讀書會使用選書交錯介紹，下篇再見啦。</p>
<p>參考</p>
<ul>
<li><a href="https://dart.dev/get-dart#install">https://dart.dev/get-dart#install</a></li>
<li><a href="https://dart.dev/samples#hello-world">https://dart.dev/samples#hello-world</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>dart</tag>
      </tags>
  </entry>
  <entry>
    <title>[Typescript101]Typescript教學系列:設定Typescript專案</title>
    <url>/2022/05/18/typescript-series-ts-project/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者的系列文章:<code>Typescript101</code>，上一篇介紹文中提到的簡單地<code>hello.ts</code>檔案，透過<code>tsc</code>指令將其編譯成<code>javascript</code>檔案，算滿簡單易懂的，這次則建立<code>typescript</code>專案，真正在撰寫應用程式時透過這種方式居多，不妨跟著筆者實作看看吧。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><h2 id="建立應用程式資料夾"><a href="#建立應用程式資料夾" class="headerlink" title="建立應用程式資料夾"></a>建立應用程式資料夾</h2><p>第一步驟先建立應用程式資料夾</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ts01</span><br><span class="line"><span class="built_in">cd</span> ts01</span><br></pre></td></tr></table></figure>

<h2 id="透過tsc指令初始化專案"><a href="#透過tsc指令初始化專案" class="headerlink" title="透過tsc指令初始化專案"></a>透過tsc指令初始化專案</h2><p>接著透過<code>tsc</code>指令初始化專案</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tsc --init</span><br><span class="line"><span class="comment"># 回應結果</span></span><br><span class="line">Created a new tsconfig.json with:</span><br><span class="line">                                                                                                                     TS</span><br><span class="line">  target: es2016</span><br><span class="line">  module: commonjs</span><br><span class="line">  strict: <span class="literal">true</span></span><br><span class="line">  esModuleInterop: <span class="literal">true</span></span><br><span class="line">  skipLibCheck: <span class="literal">true</span></span><br><span class="line">  forceConsistentCasingInFileNames: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">You can learn more at https://aka.ms/tsconfig.json</span><br></pre></td></tr></table></figure>

<p>就用<code>Visual Studio Code</code>開啟<code>typescript</code>專案吧</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">code .</span><br></pre></td></tr></table></figure>

<h2 id="新增一個module01-ts檔案"><a href="#新增一個module01-ts檔案" class="headerlink" title="新增一個module01.ts檔案"></a>新增一個module01.ts檔案</h2><p>接著該專案資料夾中，只會有一個<code>tsconfig.json</code>，接著就建立一個新的module01.ts檔案</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> module01.ts</span><br></pre></td></tr></table></figure>

<p>接著填寫其內容，筆者這邊使用<code>Microsoft Learn</code>中的教學範例</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addNumbers</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">addNumbers</span>(<span class="number">3</span>, <span class="number">6</span>));</span><br></pre></td></tr></table></figure>

<p>基本上這個檔案透過IDE內建的<code>Typescript</code>檢查其類型</p>
<img src="/2022/05/18/typescript-series-ts-project/Untitled.png" class="" title="[TypescriptError]">

<h2 id="變更tsconfig-json設定並編譯"><a href="#變更tsconfig-json設定並編譯" class="headerlink" title="變更tsconfig.json設定並編譯"></a>變更tsconfig.json設定並編譯</h2><p>筆者這邊就照著教學變更其設定，主要變更設定為</p>
<ul>
<li><code>target</code>: 設定為 <code>ES2015</code>，預設為 <code>ES2016</code></li>
<li><code>outDir</code>: 設定為 <code>build</code></li>
</ul>
<blockquote>
<p>變更<code>tsconfig.json</code>檔案後，必須於<code>command line</code>中下<code>tsc</code>，使重設專案選項</p>
</blockquote>
<p>透過<code>tsc</code>指令，以及<code>tsconfig.json</code>的編譯設定，編譯<code>module01.ts</code>吧</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 專案已經有tsconfig.json了，只要下tsc指令即可編譯專案資料夾中的所有ts檔案</span></span><br><span class="line"><span class="comment"># ，並且放置outDir指定的build資料夾中</span></span><br><span class="line">tsc</span><br><span class="line"><span class="comment"># 編譯結果</span></span><br><span class="line">module01.ts:1:21 - error TS7006: Parameter <span class="string">&#x27;x&#x27;</span> implicitly has an <span class="string">&#x27;any&#x27;</span> <span class="built_in">type</span>.</span><br><span class="line"></span><br><span class="line">1 <span class="keyword">function</span> addNumbers(x, y) &#123;</span><br><span class="line">                      ~</span><br><span class="line"></span><br><span class="line">module01.ts:1:24 - error TS7006: Parameter <span class="string">&#x27;y&#x27;</span> implicitly has an <span class="string">&#x27;any&#x27;</span> <span class="built_in">type</span>.</span><br><span class="line"></span><br><span class="line">1 <span class="keyword">function</span> addNumbers(x, y) &#123;</span><br><span class="line">                         ~</span><br><span class="line"></span><br><span class="line">Found 2 errors <span class="keyword">in</span> the same file, starting at: module01.ts:1</span><br></pre></td></tr></table></figure>

<p>就照著這個錯誤提示，我們就修正它吧</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addNumbers</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">addNumbers</span>(<span class="number">3</span>, <span class="number">6</span>));</span><br></pre></td></tr></table></figure>

<p>編譯成功後會在<code>build</code>資料夾中出現其<code>module01.js</code>檔案</p>
<img src="/2022/05/18/typescript-series-ts-project/Untitled1.png" class="" title="[TypescriptCompiledFile]">

<h2 id="撰寫Html頁面，載入編譯後的js檔案"><a href="#撰寫Html頁面，載入編譯後的js檔案" class="headerlink" title="撰寫Html頁面，載入編譯後的js檔案"></a>撰寫Html頁面，載入編譯後的js檔案</h2><p>首先先建立<code>module01.html</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> module01.html</span><br></pre></td></tr></table></figure>

<p>編寫內容並載入<code>module01.js</code>檔案</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Test JavaScript&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Test JavaScript&lt;/h1&gt;</span><br><span class="line">    &lt;p <span class="built_in">id</span>=<span class="string">&quot;date&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;This page calls the script module01.js and is used <span class="keyword">for</span> testing.&lt;/p&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;./build/module01.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>開啟<code>module01.html</code>就會在<code>chrome</code>的<code>console</code>頁籤中可以看到<code>addNumbers</code>後的結果</p>
<img src="/2022/05/18/typescript-series-ts-project/Untitled2.png" class="" title="[ExecuteResult]">

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>藉由這個範例，在<code>html+javascript</code>網頁系統中使用<code>Typescript</code>開發，多麼美好的一件事情，下一篇就介紹其<code>Typescript</code>的型別系統了，這篇就到這邊了，下次見。</p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>[Typescript101]Typescript教學系列:介紹</title>
    <url>/2022/05/18/typescript-series-introduce/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者公司使用<code>Angular</code>開發應用系統，使用了也已經有兩三年了，雖兩三年的<code>Angular</code>撰寫經驗，但筆者自認為只能算是一個半個前端，因開發的是內部系統，比較沒有艱深的功能要實現，且筆者公司買現成的<code>Template</code>版型來套用，滿習慣且熟悉<code>Template</code>版型提供的撰寫結構及相關套件，趁這一次轉換工作空檔，就先把<code>Typescript</code>底子打好吧。</p>
<p><code>Typescipt</code>本身是<code>Javascript</code>的超集，完全相容<code>Javascript</code>現有語法，加上<code>型別系統</code>，前端程式寫起來，猶如寫後端程式一樣，加上<code>Angular2</code>開始，透過<code>DI</code>取得所有服務，筆者平常後端使用<code>Dotnet Core</code>，因<code>Dotnet Core</code>框架也是內建DI機制，因此對筆者來說特別熟悉感。：</p>
<p>筆者這邊會參考</p>
<ul>
<li><a href="https://www.typescriptlang.org/">https://www.typescriptlang.org/</a></li>
<li><a href="https://docs.microsoft.com/zh-tw/learn/paths/build-javascript-applications-typescript/">https://docs.microsoft.com/zh-tw/learn/paths/build-javascript-applications-typescript/</a></li>
<li><a href="https://willh.gitbook.io/typescript-tutorial/">https://willh.gitbook.io/typescript-tutorial/</a></li>
</ul>
<p>統整上述網站內容，整理成自己理解的版本。</p>
<span id="more"></span>
<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>基本上<code>Typescript</code>可以寫前端(<code>Angular, Vue, React</code>)，後端(<code>Nodejs</code>)，開發環境部份，共有的是<code>node</code>, <code>npm</code>，開發工具則選擇<code>Visual Studio Code</code>，或者相似的IDE皆可。</p>
<h2 id="安裝Typescript"><a href="#安裝Typescript" class="headerlink" title="安裝Typescript"></a>安裝Typescript</h2><p>第一步驟就是要先安裝<code>Typescript</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure>

<p>來測試看看安裝是否成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tsc --version</span><br><span class="line"><span class="comment"># 輸出結果</span></span><br><span class="line"><span class="comment"># Version 4.6.4</span></span><br></pre></td></tr></table></figure>

<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>按照學習新的程式語言慣例，來個<code>Hello World</code>吧</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> hello.ts</span><br><span class="line">code .</span><br></pre></td></tr></table></figure>

<p>接著在<code>hello.ts</code>中撰寫程式</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params">person: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + person;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="string">&quot;Eugene&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sayHello</span>(user));<span class="comment">// 預期輸出為 Hello Eugene</span></span><br></pre></td></tr></table></figure>

<h2 id="編譯"><a href="#編譯" class="headerlink" title="編譯"></a>編譯</h2><h3 id="編譯指令"><a href="#編譯指令" class="headerlink" title="編譯指令"></a>編譯指令</h3><p>上步驟撰寫完<code>hello.ts</code>後，透過第一步驟安裝的<code>typescript</code>，讓其編譯成<code>javascript</code>吧。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tsc hello.ts</span><br></pre></td></tr></table></figure>

<h3 id="編譯選項"><a href="#編譯選項" class="headerlink" title="編譯選項"></a>編譯選項</h3><p>透過tsc指令編譯其typescript檔案時，可以增加options選項來客製化編譯結果</p>
<ul>
<li><code>noImplicitAny</code> : 指示編譯器在具有隱含 <code>any</code>類型的運算式和宣告上引發錯誤</li>
<li><code>noEmitOnError</code> : 之後文章再補充</li>
<li><code>target</code>: 指定 JavaScript 檔案的 ECMAScript 目標版本。 此範例會編譯與 ECMAScript 6 相容的 JavaScript 檔案</li>
<li>目錄選項 : 產生js檔案的目錄</li>
</ul>
<p>宣告方式如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tsc hello.ts --noImplicitAny</span><br><span class="line">tsc hello.ts --target <span class="string">&quot;ES2015&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="編譯後執行"><a href="#編譯後執行" class="headerlink" title="編譯後執行"></a>編譯後執行</h2><p>若編譯成功後會在同個目錄中會產生<code>hello.js</code>檔案，就透過<code>node</code>指令來執行hello.js吧</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node .\hello.js</span><br><span class="line"><span class="comment"># 輸出結果</span></span><br><span class="line"><span class="comment"># Hello Eugene</span></span><br></pre></td></tr></table></figure>

<h2 id="型別系統優點"><a href="#型別系統優點" class="headerlink" title="型別系統優點"></a>型別系統優點</h2><p>先以這個簡單的案例，來感受一下有<code>型別系統</code>的優點吧，因<code>sayHello</code>的<code>input</code>的型別指定為<code>string</code>，我們試著傳入非<code>string</code>型別的參數看看，筆者就故意輸個<code>[1, 2, 3]</code></p>
<img src="/2022/05/18/typescript-series-introduce/Untitled.png" class="" title="[TypeDifferentNotification]">

<p>熟悉的紅色毛毛蟲，IDE提示訊息非常清楚，傳入的參數型別是<code>number[]</code>而非<code>string</code>，永遠不會寫錯啦。</p>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>Typescript介紹文，今天就先到這邊啦，下一篇來介紹「型別系統」，看能不能堅持寫個系列文，跟自己說加油。</p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]NLog-依照Environment使用Nlog.Config檔案</title>
    <url>/2022/05/17/nlog-environment-config/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者公司使用<code>NLog</code>當作<code>Log</code>工具，相當簡單易用，但用到現在會有一個困擾，畢竟為方便測試，到處埋<code>Info</code>等級的<code>Log</code>於程式中，為方便偵錯及追蹤，可能連傳入的資料都會記錄於文字檔中，變成正式環境也會有同樣的效果，因為這個<code>Nlog.Config</code>又加入於版控中，要嘛就是在<code>release</code>分支那邊將<code>Nlog.config</code>調整成正式環境符合的設定，也是頗麻煩。</p>
<p>筆者這篇主要是解決上述問題，解決方式也頗簡單，將<code>Nlog.config</code>製作多個帶有<code>Environment</code>的檔名，<code>NLogBuilder</code>註冊時套用不同的<code>NLog.Config</code>檔案即可解決。基本上若為預設的<code>NLog.config</code>則不需特別註冊也有效，因要針對不同環境，套用不同的<code>config</code>檔案，必須宣告<code>NLogBuilder</code>註冊。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>筆者這邊使用<code>dotnet core</code>版本為<code>6.0.100</code>，已經是套用<code>minimal api</code>形式，還真不習慣。</p>
<h2 id="Demo專案建立"><a href="#Demo專案建立" class="headerlink" title="Demo專案建立"></a>Demo專案建立</h2><p>首先簡單建立一下<code>webapi</code>專案</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet new webapi -o NLog.Demo.API</span><br></pre></td></tr></table></figure>

<h2 id="加入NLog相關套件"><a href="#加入NLog相關套件" class="headerlink" title="加入NLog相關套件"></a>加入NLog相關套件</h2><p>筆者這邊會使用到三個NLog相關套件</p>
<ul>
<li>NLog</li>
<li>NLog.Config</li>
<li>NLog.Web.AspNetCore</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet add package NLog</span><br><span class="line">dotnet add package NLog.Config</span><br><span class="line">dotnet add package NLog.Web.AspNetCore</span><br></pre></td></tr></table></figure>

<h2 id="製作不同環境使用的NLog-Config檔案"><a href="#製作不同環境使用的NLog-Config檔案" class="headerlink" title="製作不同環境使用的NLog.Config檔案"></a>製作不同環境使用的NLog.Config檔案</h2><p>就直接用手動方式建立不同環境使用的NLog.Config檔案</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> nlog.development.config</span><br><span class="line"><span class="built_in">touch</span> nlog.production.config</span><br></pre></td></tr></table></figure>

<p>直接從NLog.Config預設的設定，調整成不同環境所要的rules及target，筆者這邊為演示，直接使用文字檔案紀錄，並且於不同環境下設定不一樣的minlevel，以示有效套用。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nlog</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.nlog-project.org/schemas/NLog.xsd&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd&quot;</span> <span class="attr">autoReload</span>=<span class="string">&quot;true&quot;</span> <span class="attr">throwExceptions</span>=<span class="string">&quot;false&quot;</span> <span class="attr">internalLogLevel</span>=<span class="string">&quot;Off&quot;</span> <span class="attr">internalLogFile</span>=<span class="string">&quot;c:\temp\nlog-internal.log&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- optional, add some variables</span></span><br><span class="line"><span class="comment">  https://github.com/nlog/NLog/wiki/Configuration-file#variables</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">&quot;myvar&quot;</span> <span class="attr">value</span>=<span class="string">&quot;myvalue&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  See https://github.com/nlog/nlog/wiki/Configuration-file</span></span><br><span class="line"><span class="comment">  for information on customizing logging rules and outputs.</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">targets</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    add your targets here</span></span><br><span class="line"><span class="comment">    See https://github.com/nlog/NLog/wiki/Targets for possible targets.</span></span><br><span class="line"><span class="comment">    See https://github.com/nlog/NLog/wiki/Layout-Renderers for the possible layout renderers.</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    Write events to a file with the date in the filename.</span></span><br><span class="line"><span class="comment">    &lt;target xsi:type=&quot;File&quot; name=&quot;f&quot; fileName=&quot;$&#123;basedir&#125;/logs/$&#123;shortdate&#125;.log&quot;</span></span><br><span class="line"><span class="comment">            layout=&quot;$&#123;longdate&#125; $&#123;uppercase:$&#123;level&#125;&#125; $&#123;message&#125;&quot; /&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">xsi:type</span>=<span class="string">&quot;File&quot;</span> <span class="attr">name</span>=<span class="string">&quot;f&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;basedir&#125;/logs/$&#123;shortdate&#125;.log&quot;</span> <span class="attr">layout</span>=<span class="string">&quot;$&#123;longdate&#125; $&#123;uppercase:$&#123;level&#125;&#125; $&#123;message&#125;&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">targets</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">rules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">minlevel</span>=<span class="string">&quot;Info&quot;</span> <span class="attr">writeTo</span>=<span class="string">&quot;f&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">rules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nlog</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!--以上省略--&gt;</span><br><span class="line">&lt;rules&gt;</span><br><span class="line">  &lt;logger name=<span class="string">&quot;*&quot;</span> minlevel=<span class="string">&quot;Error&quot;</span> writeTo=<span class="string">&quot;f&quot;</span> /&gt;</span><br><span class="line">&lt;/rules&gt;</span><br><span class="line">&lt;!--以下省略--&gt;</span><br></pre></td></tr></table></figure>

<h2 id="套用不同的NLog-Config"><a href="#套用不同的NLog-Config" class="headerlink" title="套用不同的NLog.Config"></a>套用不同的NLog.Config</h2><p>於<code>Program.cs</code>中宣告<code>NLogBuilder</code>註冊</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以上省略</span></span><br><span class="line"><span class="comment">// Nlog config</span></span><br><span class="line"><span class="keyword">var</span> env = builder.Environment.EnvironmentName;</span><br><span class="line">NLogBuilder.ConfigureNLog(<span class="string">$&quot;nlog.<span class="subst">&#123;env&#125;</span>.config&quot;</span>).GetCurrentClassLogger();</span><br><span class="line"><span class="comment">//以下省略</span></span><br><span class="line">builder.Logging.ClearProviders();</span><br><span class="line">builder.Host.UseNLog();</span><br></pre></td></tr></table></figure>

<p>一樣是在<code>Program.cs</code>中，寫一個簡單的<code>API</code>入口以準備測試</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以上省略</span></span><br><span class="line">app.MapControllers();</span><br><span class="line">app.MapGet(<span class="string">&quot;/logtest&quot;</span>, () =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    app.Logger.LogTrace(<span class="string">&quot;LogTrace&quot;</span>);</span><br><span class="line">    app.Logger.LogDebug(<span class="string">&quot;LogDebug&quot;</span>);</span><br><span class="line">    app.Logger.LogInformation(<span class="string">&quot;LogInformation&quot;</span>);</span><br><span class="line">    app.Logger.LogWarning(<span class="string">&quot;LogWarning&quot;</span>);</span><br><span class="line">    app.Logger.LogError(<span class="string">&quot;LogError&quot;</span>);</span><br><span class="line">    app.Logger.LogCritical(<span class="keyword">new</span> Exception(<span class="string">&quot;eLogCritical&quot;</span>), <span class="string">&quot;LogCritical&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;logtest&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">app.Run();</span><br></pre></td></tr></table></figure>

<h2 id="Demo效果"><a href="#Demo效果" class="headerlink" title="Demo效果"></a>Demo效果</h2><p>筆者透過<code>launchsettings.json</code>中的設定來模擬不同執行環境</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以上省略</span></span><br><span class="line"><span class="attr">&quot;profiles&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;NLog.Demo.API&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;commandName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Project&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;dotnetRunMessages&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;launchBrowser&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;launchUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;swagger&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;applicationUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:5187&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;environmentVariables&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ASPNETCORE_ENVIRONMENT&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Development&quot;</span> <span class="comment">// 設定值要切換成development/production做測試</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 以下省略</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>為方便直接透過<code>swagger api</code>說明頁面點擊其API，調整一下<code>Program.cs</code>中的設定</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Production環境也先保有swagger api說明頁面</span></span><br><span class="line"><span class="comment">//if (app.Environment.IsDevelopment())</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    app.UseSwagger();</span><br><span class="line">    app.UseSwaggerUI();</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>先看一下<code>swagger api</code>說明頁面，直接點上面的<code>/logtest API</code></p>
<img src="/2022/05/17/nlog-environment-config/Untitled.png" class="" title="[SwaggerDocument]">

<h3 id="Development環境"><a href="#Development環境" class="headerlink" title="Development環境"></a>Development環境</h3><p>執行完成後會在文字檔案中可看到<code>minlevel</code>為<code>info</code>的效果，從<code>info</code>等級開始印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2022-05-17 14:51:52.9377 INFO LogInformation</span><br><span class="line">2022-05-17 14:51:52.9377 WARN LogWarning</span><br><span class="line">2022-05-17 14:51:52.9377 ERROR LogError</span><br><span class="line">2022-05-17 14:51:52.9377 FATAL LogCritical</span><br></pre></td></tr></table></figure>

<h3 id="Production環境"><a href="#Production環境" class="headerlink" title="Production環境"></a>Production環境</h3><p>執行完成後會在文字檔案中可看到<code>minlevel</code>為<code>error</code>的效果，從<code>error</code>等級開始印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2022-05-17 14:52:35.3299 ERROR LogError</span><br><span class="line">2022-05-17 14:52:35.3434 FATAL LogCritical</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>落落等寫了這麼多，基本上就是只有兩步驟</p>
<ul>
<li>製作不同環境使用的<code>NLog.Config</code>檔案</li>
<li>宣告<code>NLogBuilder.ConfigureLog</code>的方式不同環境下套用不同的<code>NLog.Config</code>檔案</li>
</ul>
<p>以上解決方案，確實解決筆者困擾的問題，這篇就到這邊了，下篇見。</p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>nlog</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>nlog</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]ORM系列-SqlSugar:實體產生器-進階</title>
    <url>/2022/05/16/orm-series-sqlsugar-advanced-model-generator/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者這篇主要是想寫實體產生器的進階版本，怎麼會說是進階版本呢，若有用過EFCore的<code>dotnet ef dbcontext scaffold</code>指令會知道，預設會是符合<code>C#</code>命名規則，即<code>Pascal Case</code>，每個英文單字連在一起，每個單字的第一個字為大寫。<code>scaffold</code>指令還特別開放<code>options:-use-database-names</code>，即可保留其資料庫中的命名。</p>
<p>筆者當初也沒有特別注意這些細節，因為是有踩過一些雷，例:製作前端使用<code>ViewModel</code>時，從上述<code>scaffold</code>指令產出的<code>Entities</code>複製其對應的屬性宣告，再補一些額外的屬性，然後透過<code>Dapper</code>套件Binding屬性時發現，怎麼有些屬性明明資料庫就有回傳，怎麼沒有binding成功，仔細一看，資料庫端是使用下底線，到C#端時<code>scaffold</code>會把下底線去掉，因此直接從<code>Entities</code>中複製貼上則會是不一樣的屬性名稱，自從那一次後，就注意到該細節。</p>
<p>講到此篇主題，剛好手邊新專案，資料庫使用<code>MySQL</code>，筆者想保持資料庫命名規則，主要是有兩點</p>
<ul>
<li>小寫為主</li>
<li>每個單字透過下底線連結</li>
</ul>
<p>另一方面，筆者透過<code>SqlSugarCore</code>提供的實體產生相關API產生相關實體時，又想保持C#命名規則，最好是跟EFCore scaffold一樣可以保有複數機制，這為此篇主要解決目的。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>關於此篇想達成的目的，主要工作有三個</p>
<ul>
<li>SqlSugarCore自定義命名方法</li>
<li>字串轉PascalCase命名規則</li>
<li>字串轉複數命名機制</li>
</ul>
<h2 id="SqlSugarCore自定義命名方法"><a href="#SqlSugarCore自定義命名方法" class="headerlink" title="SqlSugarCore自定義命名方法"></a>SqlSugarCore自定義命名方法</h2><p>SqlSugarCore本身有提供產生實體時可以做客製化，轉換邏輯自定義，或者產生實體時的Class及Property客製化，對於筆者這邊的情境來說只要能Class及Property客製化宣告即可，筆者這邊主要參考</p>
<p><a href="https://www.donet5.com/Home/Doc?typeId=1207">https://www.donet5.com/Home/Doc?typeId=1207</a></p>
<p>直接來看Code比較有感覺</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> db.DbMaintenance.GetTableInfoList())</span><br><span class="line">&#123;</span><br><span class="line">     <span class="built_in">string</span> entityName = item.Name.ToUpper();<span class="comment">/*实体名大写*/</span></span><br><span class="line">     db.MappingTables.Add(entityName , item.Name);</span><br><span class="line">     <span class="keyword">foreach</span> (<span class="keyword">var</span> col <span class="keyword">in</span> db.DbMaintenance.GetColumnInfosByTableName(item.Name))</span><br><span class="line">     &#123;</span><br><span class="line">       db.MappingColumns.Add(col.DbColumnName.ToUpper() <span class="comment">/*类的属性大写*/</span>, col.DbColumnName, entityName);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">db.DbFirst.IsCreateAttribute().CreateClassFile(<span class="string">&quot;c:\\Demo\\8&quot;</span>, <span class="string">&quot;Models&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>主要是有兩個地方要改寫</p>
<ul>
<li>entityName的轉換邏輯:即Table名稱轉換成Class Name邏輯</li>
<li>DbColumnName的轉換:即Column名稱轉換成Property Name邏輯</li>
</ul>
<p>SqlSugarCore官網說明這邊主要是簡單改寫成全大寫的形式，筆者介紹完下面兩個章節後再回來修改這邊的程式邏輯。</p>
<h2 id="PascalCase轉換"><a href="#PascalCase轉換" class="headerlink" title="PascalCase轉換"></a>PascalCase轉換</h2><p>筆者這邊是完全遵照MySQL命名規則，所以簡單來說一下邏輯是這樣</p>
<ul>
<li>用下底線_符號切割字串</li>
<li>將上述切割出來的字串，將第一個字母轉大寫</li>
<li>最後將所有字串Join回去</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">StringExtension</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">ToPascalCase</span>(<span class="params"><span class="keyword">this</span> <span class="built_in">string</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> words = <span class="keyword">value</span>.Split(<span class="keyword">new</span>[] &#123; <span class="string">&quot;_&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot; &quot;</span> &#125;, StringSplitOptions.RemoveEmptyEntries);</span><br><span class="line">        words = words</span><br><span class="line">            .Select(word =&gt; <span class="built_in">char</span>.ToUpper(word[<span class="number">0</span>]) + word.Substring(<span class="number">1</span>))</span><br><span class="line">            .ToArray();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Join(<span class="built_in">string</span>.Empty, words);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>透過Linqpad測試一下其轉換結果</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;	</span><br><span class="line">    <span class="keyword">var</span> testStr = <span class="string">&quot;vendor_id&quot;</span>;</span><br><span class="line">    testStr.ToPascalCase().Dump();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Linqpad結果</span></span><br><span class="line"><span class="comment">// VendorId</span></span><br></pre></td></tr></table></figure>

<h2 id="複數命名轉換"><a href="#複數命名轉換" class="headerlink" title="複數命名轉換"></a>複數命名轉換</h2><p>筆者這邊有查到 <code>.net framework</code>時有內建的服務<code>PluralizationService</code>，但到轉換到<code>dotnet core</code>時，只查得到相關套件，就以<code>google</code>到的第一個套件為主去試看看吧。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet add package PluralizeService.Core --version 1.2.21147.2</span><br></pre></td></tr></table></figure>

<p>接著撰寫程式吧，筆者沿用上章節所用到的StringExtension，完善它。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">StringExtension</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 以上省略</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Pluralize</span>(<span class="params"><span class="keyword">this</span> <span class="built_in">string</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> PluralizationProvider.Pluralize(<span class="keyword">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>透過Linqpad測試一下其效果</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;	</span><br><span class="line">    <span class="keyword">var</span> testStr = <span class="string">&quot;customer&quot;</span>;</span><br><span class="line">    testStr.ToPascalCase().Pluralize().Dump();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Linqpad結果</span></span><br><span class="line"><span class="comment">// Customers</span></span><br></pre></td></tr></table></figure>

<p>當然該套件不只變成複數，將複數轉換成單數也是可以的，且一行指令就完成，滿無腦套用的。</p>
<h2 id="實體產生器改造"><a href="#實體產生器改造" class="headerlink" title="實體產生器改造"></a>實體產生器改造</h2><p>最後要來套用在轉換真實資料庫上，筆者就改造之前的文章<a href="/2022/05/16/orm-series-sqlsugar-advanced-model-generator/" title="[DotnetCore]ORM系列-SqlSugar:實體產生器-進階">[DotnetCore]ORM系列-SqlSugar:實體產生器-進階</a>裡的程式內容</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> CommandLine;</span><br><span class="line"><span class="keyword">using</span> PluralizeService.Core;</span><br><span class="line"><span class="keyword">using</span> SqlSugar;</span><br><span class="line"></span><br><span class="line">Parser.Default.ParseArguments&lt;Options&gt;(args).WithParsed(Run);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Run</span>(<span class="params">Options option</span>)</span></span><br><span class="line">&#123;    </span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">var</span> _db = <span class="keyword">new</span> SqlSugarScope(<span class="keyword">new</span> ConnectionConfig()</span><br><span class="line">    &#123;</span><br><span class="line">        DbType = SqlSugar.DbType.MySql,</span><br><span class="line">        ConnectionString = option.ConnectionString,</span><br><span class="line">        InitKeyType = InitKeyType.Attribute,</span><br><span class="line">        IsAutoCloseConnection = <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 這篇主要是多這段，產生實體前宣告命名規則</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> _db.DbMaintenance.GetTableInfoList())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// entityName套上PascalCase及Pluralize效果</span></span><br><span class="line">        <span class="built_in">string</span> entityName = item.Name.ToPascalCase().Pluralize();</span><br><span class="line">        _db.MappingTables.Add(entityName, item.Name);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> col <span class="keyword">in</span> _db.DbMaintenance.GetColumnInfosByTableName(item.Name))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 資料欄位則僅套上PascalCase效果</span></span><br><span class="line">            _db.MappingColumns.Add(col.DbColumnName.ToPascalCase(), col.DbColumnName, entityName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    _db.DbFirst.IsCreateAttribute().CreateClassFile(option.ModelPath, option.ModelNameSpace);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Options</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Option(&#x27;c&#x27;, <span class="string">&quot;connectionstring&quot;</span>, Required = true, HelpText = <span class="string">&quot;資料庫連線字串&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ConnectionString &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Option(&#x27;p&#x27;, <span class="string">&quot;path&quot;</span>, Required = true, HelpText = <span class="string">&quot;Models檔案放置路徑&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ModelPath &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Option(&#x27;n&#x27;, <span class="string">&quot;namespace&quot;</span>, Required = true, HelpText = <span class="string">&quot;Model命名空間&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ModelNameSpace &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">StringExtension</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">ToPascalCase</span>(<span class="params"><span class="keyword">this</span> <span class="built_in">string</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> words = <span class="keyword">value</span>.Split(<span class="keyword">new</span>[] &#123; <span class="string">&quot;_&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot; &quot;</span> &#125;, StringSplitOptions.RemoveEmptyEntries);</span><br><span class="line">        words = words</span><br><span class="line">            .Select(word =&gt; <span class="built_in">char</span>.ToUpper(word[<span class="number">0</span>]) + word.Substring(<span class="number">1</span>))</span><br><span class="line">            .ToArray();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Join(<span class="built_in">string</span>.Empty, words);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Pluralize</span>(<span class="params"><span class="keyword">this</span> <span class="built_in">string</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> PluralizationProvider.Pluralize(<span class="keyword">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最終呈現效果"><a href="#最終呈現效果" class="headerlink" title="最終呈現效果"></a>最終呈現效果</h2><p>筆者先貼上其資料庫欄位樣子</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `product` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `brand` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `timing_kit_no` text,</span><br><span class="line">  `customer_product_no` text,</span><br><span class="line">  `memo` text,</span><br><span class="line">  `weight` <span class="type">decimal</span>(<span class="number">8</span>,<span class="number">3</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">7</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci;</span><br></pre></td></tr></table></figure>

<p>透過dotnet run指令產生其對應的實體</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">dotnet run <span class="comment">-- -c &quot;連線字串&quot; -p &quot;實體檔案放置位置&quot; -n &quot;命名空間&quot;</span></span><br></pre></td></tr></table></figure>

<p>最終得到的實體</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">&lt;</span>summary<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">&lt;</span><span class="operator">/</span>summary<span class="operator">&gt;</span></span><br><span class="line">[SugarTable(&quot;product&quot;)]</span><br><span class="line">public partial class Products</span><br><span class="line">&#123;</span><br><span class="line">   public Products()&#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> <span class="operator">&lt;</span>summary<span class="operator">&gt;</span></span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> <span class="keyword">Desc</span>:</span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> <span class="keyword">Default</span>:</span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> Nullable:<span class="literal">False</span></span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> <span class="operator">&lt;</span><span class="operator">/</span>summary<span class="operator">&gt;</span>           </span><br><span class="line">   [SugarColumn(IsPrimaryKey<span class="operator">=</span><span class="literal">true</span>,IsIdentity<span class="operator">=</span><span class="literal">true</span>,ColumnName<span class="operator">=</span>&quot;id&quot;)]</span><br><span class="line">   public long Id &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> <span class="operator">&lt;</span>summary<span class="operator">&gt;</span></span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> <span class="keyword">Desc</span>:</span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> <span class="keyword">Default</span>:</span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> Nullable:<span class="literal">True</span></span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> <span class="operator">&lt;</span><span class="operator">/</span>summary<span class="operator">&gt;</span>           </span><br><span class="line">   [SugarColumn(ColumnName<span class="operator">=</span>&quot;brand&quot;)]</span><br><span class="line">   public string Brand &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> <span class="operator">&lt;</span>summary<span class="operator">&gt;</span></span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> <span class="keyword">Desc</span>:</span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> <span class="keyword">Default</span>:</span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> Nullable:<span class="literal">True</span></span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> <span class="operator">&lt;</span><span class="operator">/</span>summary<span class="operator">&gt;</span>           </span><br><span class="line">   [SugarColumn(ColumnName<span class="operator">=</span>&quot;timing_kit_no&quot;)]</span><br><span class="line">   public string TimingKitNo &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> <span class="operator">&lt;</span>summary<span class="operator">&gt;</span></span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> <span class="keyword">Desc</span>:</span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> <span class="keyword">Default</span>:</span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> Nullable:<span class="literal">True</span></span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> <span class="operator">&lt;</span><span class="operator">/</span>summary<span class="operator">&gt;</span>           </span><br><span class="line">   [SugarColumn(ColumnName<span class="operator">=</span>&quot;customer_product_no&quot;)]</span><br><span class="line">   public string CustomerProductNo &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> <span class="operator">&lt;</span>summary<span class="operator">&gt;</span></span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> <span class="keyword">Desc</span>:</span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> <span class="keyword">Default</span>:</span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> Nullable:<span class="literal">True</span></span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> <span class="operator">&lt;</span><span class="operator">/</span>summary<span class="operator">&gt;</span>           </span><br><span class="line">   [SugarColumn(ColumnName<span class="operator">=</span>&quot;memo&quot;)]</span><br><span class="line">   public string Memo &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> <span class="operator">&lt;</span>summary<span class="operator">&gt;</span></span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> <span class="keyword">Desc</span>:</span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> <span class="keyword">Default</span>:</span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> Nullable:<span class="literal">True</span></span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> <span class="operator">&lt;</span><span class="operator">/</span>summary<span class="operator">&gt;</span>           </span><br><span class="line">   [SugarColumn(ColumnName<span class="operator">=</span>&quot;weight&quot;)]</span><br><span class="line">   public <span class="type">decimal</span>? Weight &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>沒想到小小的實體產生器，也有如此大的學問，且透過<code>SqlSugarCore</code>產生出來的實體，預設為<code>Partial Class</code>，因此可以宣告一個<code>Products.Partial.cs</code>來撰寫其特定方法，與自動產生的檔案做切割，自定義的Method不會被影響，筆者覺得<code>Partial Class</code>真的是一個好物，只可惜不可跨<code>assembly</code>使用，不過它套用的前提是一樣的<code>Namespace</code>下，不可跨<code>assembly</code>似乎也是合理，這篇就到這邊了，希望對有這個需求的各位有所幫助。</p>
<p>參考</p>
<ul>
<li><a href="https://www.donet5.com/Home/Doc?typeId=1207">https://www.donet5.com/Home/Doc?typeId=1207</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>sqlsugar</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>sqlsugar</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]CleanArchitecture手做系列-實作API</title>
    <url>/2022/05/10/clean-architecture-api/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>以上篇<a href="/2022/05/10/clean-architecture-new/" title="[DotnetCore]CleanArchitecture手做系列-建立專案">[DotnetCore]CleanArchitecture手做系列-建立專案</a>實作完成後，得到一個有整潔架構的方案，筆者在這篇以<code>webapi template</code>所產生的<code>WeatherForecast API</code>查詢作業轉成<code>MediatR</code>風格的架構，筆者主要參考<a href="https://github.com/jasontaylordev/CleanArchitecture">https://github.com/jasontaylordev/CleanArchitecture</a>專案預設範本所產生的撰寫風格，擷取筆者要的部份，<code>ORM</code>部份則改用<code>SqlSugarCore</code>實作資料庫操作行為，此篇以<code>webapi template</code>所產生的<code>WeatherForecastController</code>改寫成<code>Clean Architecture</code>撰寫風格。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>每一個專案都有自己所屬的<code>DependencyInjection</code>檔案，裡面宣告該專案所需要的初始化及注入，於最終端API專案中的Startup中引入各個專案宣告的<code>AddService Extension Method</code>，滿常見這種宣告方式的，好處是套件引用乾淨，不需要在最終端API專案中引用一堆不是該在API專案中引用的套件，非常的亂，因為各個專案中實作時，還是會引用一次，若要變更套件的版本號，想必，每一個專案都要去同步一次，<code>AddService Extension Method</code>完美解決這種相依姓，依照專案參考鏈，自動引入套件即可。</p>
<h2 id="Infrastructure專案"><a href="#Infrastructure專案" class="headerlink" title="Infrastructure專案"></a>Infrastructure專案</h2><p>這邊要宣告一個<code>DependencyInjection Extension Method</code>，將ORM套件注入宣告以及，該專案所涉及到的<code>DI</code>相關宣告</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">DependencyInjection</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IServiceCollection <span class="title">AddInfrastructure</span>(<span class="params"><span class="keyword">this</span> IServiceCollection services, IConfiguration configuration</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        services.AddTransient(provider =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 取得登入者資訊Service</span></span><br><span class="line">            <span class="keyword">var</span> identityService = provider.GetService&lt;IIdentityService&gt;();</span><br><span class="line">            <span class="keyword">var</span> db = <span class="keyword">new</span> SqlSugarScope(<span class="keyword">new</span> ConnectionConfig()</span><br><span class="line">            &#123;</span><br><span class="line">                DbType = DbType.SqlServer,</span><br><span class="line">                ConnectionString = configuration.GetConnectionString(<span class="string">&quot;ConnectionId&quot;</span>),</span><br><span class="line">                InitKeyType = InitKeyType.Attribute,</span><br><span class="line">                IsAutoCloseConnection = <span class="literal">true</span>,</span><br><span class="line">                MoreSettings = <span class="keyword">new</span> ConnMoreSettings()</span><br><span class="line">                &#123;</span><br><span class="line">                    IsWithNoLockQuery = <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            db.Aop.DataExecuting = (oldValue, entityInfo) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Insert/Update Process</span></span><br><span class="line">                <span class="keyword">if</span> ((entityInfo.OperationType == DataFilterType.InsertByObject ||</span><br><span class="line">                    entityInfo.OperationType == DataFilterType.UpdateByObject))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">switch</span> (entityInfo.PropertyName)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&quot;AuditTime&quot;</span>:</span><br><span class="line">                            entityInfo.SetValue(DateTime.Now);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&quot;AuditUser&quot;</span>:</span><br><span class="line">														<span class="comment">// 取得登入者帳號</span></span><br><span class="line">                            entityInfo.SetValue(identityService.GetUserName());</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span> db;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> services;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述程式碼中，有一段取得<code>provider.GetService&lt;IIdentityService&gt;();</code>，筆者這邊再貼一下<code>IdentityService</code>的程式碼，參考即可，因為關係到你的<code>Login</code>成功後怎麼塞<code>Claims</code>有關係，筆者這邊這段就不多加詳述</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IIdentityService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="built_in">int</span> <span class="title">GetUserId</span>()</span>;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">GetUserName</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IdentityService</span> : <span class="title">IIdentityService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IHttpContextAccessor _context;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IdentityService</span>(<span class="params">IHttpContextAccessor context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">GetUserId</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> nameId = _context?.HttpContext?.User.FindFirst(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> nameId != <span class="literal">null</span> ? Convert.ToInt32(nameId.Value) : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetUserName</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _context?.HttpContext?.User.FindFirst(<span class="string">&quot;name&quot;</span>)?.Value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Application專案"><a href="#Application專案" class="headerlink" title="Application專案"></a>Application專案</h2><p>筆者這邊要來改造<code>webapi template</code>產生出來的<code>WeatherForecasts</code>的<code>get API</code>，轉成<code>mediatR</code>風格的<code>RequestHandler</code>，這部份就直接參考<a href="https://github.com/jasontaylordev/CleanArchitecture">https://github.com/jasontaylordev/CleanArchitecture</a>產生出來的專案即可，但筆者這邊就跟著這個專案一步步做。</p>
<h3 id="建立Service目錄"><a href="#建立Service目錄" class="headerlink" title="建立Service目錄"></a>建立Service目錄</h3><p>主要邏輯是依照業務模組切分其<code>Service</code>擺放地方，再則依照<code>Queries</code>或<code>Commands</code>切分其不同資料夾，<code>Service</code>別當作第三層目錄，裡頭才放對應的<code>RequestHandler</code>。以WeatherForecasts的get API來說，</p>
<ul>
<li>業務模組:<code>WeatherForecasts</code></li>
<li>CQRS: 屬<code>Queries</code></li>
<li>Service別: <code>GetWeatherForecasts</code></li>
</ul>
<img src="/2022/05/10/clean-architecture-api/Untitled.png" class="" title="[CleanArchitecture-ApplicationProject]">

<h3 id="建立Model"><a href="#建立Model" class="headerlink" title="建立Model"></a>建立Model</h3><p>首先將原本放在<code>API</code>層的<code>WeatherForecast</code>拉到上步驟建立之目錄中</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WeatherForecast</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> DateTime Date &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> TemperatureC &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> TemperatureF =&gt; <span class="number">32</span> + (<span class="built_in">int</span>)(TemperatureC / <span class="number">0.5556</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span>? Summary &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="實作Service"><a href="#實作Service" class="headerlink" title="實作Service"></a>實作Service</h3><p>接著要來建立相對應的<code>RequestHandler</code>了，主要邏輯為</p>
<ul>
<li>實作<code>IRequest</code>: 主要可以想成是<code>Request Conditions</code>，<code>IRequest</code>中宣告的<code>TResponse</code>則為<code>Request</code>回應的<code>Response Model</code></li>
<li>實作<code>IRequestHandler</code>:主要可以想成是一般<code>Service</code>層的實作(包含資料庫操作行為)，<code>IRequestHandler</code>中的<code>TRequest</code>為上方建立的<code>IRequest</code>實作，<code>TResponse</code>為上方建立的<code>IRequest</code>實作中回傳的<code>TResponse</code></li>
</ul>
<p>上述敘述有點繞口令，直接看code會清楚許多</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GetWeatherForecastsQuery</span> : <span class="title">IRequest</span>&lt;<span class="title">IEnumerable</span>&lt;<span class="title">WeatherForecast</span>&gt;&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// get API中沒有查詢條件，因此這邊會是空的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GetWeatherForecastsQueryHandler</span> : <span class="title">IRequestHandler</span>&lt;<span class="title">GetWeatherForecastsQuery</span>, <span class="title">IEnumerable</span>&lt;<span class="title">WeatherForecast</span>&gt;&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">string</span>[] Summaries = <span class="keyword">new</span>[]</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Freezing&quot;</span>, <span class="string">&quot;Bracing&quot;</span>, <span class="string">&quot;Chilly&quot;</span>, <span class="string">&quot;Cool&quot;</span>, <span class="string">&quot;Mild&quot;</span>, <span class="string">&quot;Warm&quot;</span>, <span class="string">&quot;Balmy&quot;</span>, <span class="string">&quot;Hot&quot;</span>, <span class="string">&quot;Sweltering&quot;</span>, <span class="string">&quot;Scorching&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">		<span class="comment">// 將webapi template產生的API中的查詢語法貼到此Handle方法中</span></span><br><span class="line">    <span class="keyword">public</span> Task&lt;IEnumerable&lt;WeatherForecast&gt;&gt; Handle(GetWeatherForecastsQuery request, CancellationToken cancellationToken)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> rng = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> vm = Enumerable.Range(<span class="number">1</span>, <span class="number">5</span>).Select(index =&gt; <span class="keyword">new</span> WeatherForecast</span><br><span class="line">        &#123;</span><br><span class="line">            Date = DateTime.Now.AddDays(index),</span><br><span class="line">            TemperatureC = rng.Next(<span class="number">-20</span>, <span class="number">55</span>),</span><br><span class="line">            Summary = Summaries[rng.Next(Summaries.Length)]</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Task.FromResult(vm);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="DependencyInjection宣告"><a href="#DependencyInjection宣告" class="headerlink" title="DependencyInjection宣告"></a>DependencyInjection宣告</h3><p>最後將所套用的服務初始化宣告，已API專案中引入做備用</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">DependencyInjection</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IServiceCollection <span class="title">AddApplication</span>(<span class="params"><span class="keyword">this</span> IServiceCollection services</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 目前僅使用到mediatR套件，因此這邊將mediartR初始化</span></span><br><span class="line">        services.AddMediatR(Assembly.GetExecutingAssembly());</span><br><span class="line">        <span class="keyword">return</span> services;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="API專案"><a href="#API專案" class="headerlink" title="API專案"></a>API專案</h2><p>筆者就照<code>template</code>生成的專案中的宣告方式，先宣告BaseAPIController，並使用該Controller已宣告好的<code>mediatR</code>的<code>Sender</code>來傳送其<code>Request</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">AllowAnonymous</span>]</span><br><span class="line">[<span class="meta">Route(<span class="string">&quot;api/[controller]&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BaseAPIController</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> ISender _mediator = <span class="literal">null</span>!;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> ISender Mediator =&gt; _mediator ??= HttpContext.RequestServices.GetRequiredService&lt;ISender&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line">[<span class="meta">Route(<span class="string">&quot;[controller]&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WeatherForecastController</span> : <span class="title">BaseAPIController</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">HttpGet</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IEnumerable&lt;WeatherForecast&gt;&gt; Get()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> Mediator.Send(<span class="keyword">new</span> GetWeatherForecastsQuery());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Domain專案"><a href="#Domain專案" class="headerlink" title="Domain專案"></a>Domain專案</h2><p>此次還沒有撰寫到資料庫相關行為以及比較深入的商業邏輯行為，因此目前這個專案尚未使用到，筆者在下幾篇會以範例資料庫來模擬其系統行為，屆時才會有東西會在此專案中宣告</p>
<h2 id="Program-cs"><a href="#Program-cs" class="headerlink" title="Program.cs"></a>Program.cs</h2><p>接著已宣告好每一層的注入後，最後於<code>dotnet6 webapi template</code>所產生的<code>Program.cs</code>中宣告其引入</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 將每一層專案所宣告之DependencyInjecttion.cs靜態方法於此呼叫</span></span><br><span class="line"><span class="comment">// Add services to the container.</span></span><br><span class="line">builder.Services.AddHttpContextAccessor();</span><br><span class="line">builder.Services.AddInfrastructure(builder.Configuration);</span><br><span class="line">builder.Services.AddApplication();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將預設套用先註解</span></span><br><span class="line"><span class="comment">//app.UseHttpsRedirection();</span></span><br><span class="line"><span class="comment">//app.UseAuthorization();</span></span><br></pre></td></tr></table></figure>

<h2 id="實際效果"><a href="#實際效果" class="headerlink" title="實際效果"></a>實際效果</h2><p>因筆者這邊照著<code>template</code>範本產生的專案結構將<code>webapi template</code>預設產生的<code>WeatherForecastController</code>重刻一遍，行為上是一樣的</p>
<img src="/2022/05/10/clean-architecture-api/Untitled1.png" class="" title="[CleanArchitecture-Swagger]">

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>最後依照<code>Clean Architecture</code>的範本結構，<code>mediartR</code>套件的<code>RequestHandler</code>方式，將<code>API</code>層與<code>Service</code>層做解偶，mediatR本身有提供PipelineBehavior，將整合<code>FluentValidator</code>及<code>Authorization</code>的行為封裝為<code>pipelinebehavior</code>，若無符合條件則直接於尚未進到<code>Application</code>層就做回應，可以想成是<code>dotnet core API</code>層的<code>Middleware</code>，不過是針對<code>Application</code>層的<code>RequestHandler</code>做一個<code>Pipeline</code>的實現，跟<code>Middleware</code>依樣也是依照註冊順序執行其對應的<code>behavior</code>行為，下幾篇會介紹其<code>Pipeline Behavior</code>行為及真正撰寫商業邏輯行為下的實作方式，敬請期待。</p>
<p>參考</p>
<ul>
<li><a href="https://github.com/jasontaylordev/CleanArchitecture">https://github.com/jasontaylordev/CleanArchitecture</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>clean-architecture</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>clean-architecture</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]Reader系列-Pdf檔案:iTextSharp</title>
    <url>/2022/05/10/reader-series-pdf-itextsharp/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者這邊有一個需求是，<code>pdf</code>檔案在上傳時就判斷好是否有加密，避免後面流程中需要解析pdf檔案時，遇到解密的問題，因此為避免後面流程複雜去防呆，直接於上傳檔案時築一道防線擋掉，是最佳解。筆者在搜尋了一下<code>c# detect password protected pdf</code>的關鍵字時，基本上會跳出使用<code>iTextSharp</code>的解法，筆者就參考此解法寫一個<code>Extension</code>，主要都是參考<code>StackOverFlow</code>的解法，程式碼本身沒甚麼變動，此篇以解釋為準。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>筆者這邊驗證的方式使用<code>Linqpad</code>也程式碼片段，因此測試過程需要</p>
<ul>
<li>使用<code>Microsoft Word</code>製作一個包含簡單內容的文件，已另存新檔案的方式存成<code>pdf</code>檔案</li>
<li>透過<code>pdf</code>加密程式碼片段，產生已加密的<code>pdf</code>檔案</li>
<li>透過偵測是否加密的程式碼片段，偵測該<code>pdf</code>檔案是否有加密</li>
</ul>
<p>接著在講述一下<code>iTextSharp</code>的<code>License</code>，<code>5.0以下</code>才是標示<code>LGPL</code>的<code>License</code>，且已經無法在<code>nuget</code>上面搜尋得到，好佳在網路上的大神們，有把<code>iTextSharp</code>的<code>4.1.6</code>版本(<code>LGPL</code>)轉成<code>dotnet core</code>版本，因此筆者才得以在<code>dotnet core</code>專案上使用。</p>
<p><a href="https://github.com/VahidN/iTextSharp.LGPLv2.Core">https://github.com/VahidN/iTextSharp.LGPLv2.Core</a></p>
<h2 id="製作Test-pdf"><a href="#製作Test-pdf" class="headerlink" title="製作Test.pdf"></a>製作Test.pdf</h2><p>筆者這邊使用敘述的方式，基本上打開<code>word</code>軟體後，寫一些簡單內容，<code>1234</code>之類的，接著使用另存新檔的方式，存檔至桌面，副檔名選擇<code>pdf</code>格式，並且將檔案命名為<code>Test.pdf</code>備用。</p>
<h2 id="製作Test-enc-pdf"><a href="#製作Test-enc-pdf" class="headerlink" title="製作Test_enc.pdf"></a>製作Test_enc.pdf</h2><p>接著因為筆者環境本身沒有<code>pdf</code>加密軟體，只好用<code>iTextSharp</code>的程式片段來製作加密檔案</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> WorkingFolder = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);</span><br><span class="line"><span class="built_in">string</span> InputFile = Path.Combine(WorkingFolder, <span class="string">&quot;Test.pdf&quot;</span>);</span><br><span class="line"><span class="built_in">string</span> OutputFile = Path.Combine(WorkingFolder, <span class="string">&quot;Test_enc.pdf&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> (Stream input = <span class="keyword">new</span> FileStream(InputFile, FileMode.Open, FileAccess.Read, FileShare.Read))</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">using</span> (Stream output = <span class="keyword">new</span> FileStream(OutputFile, FileMode.Create, FileAccess.Write, FileShare.None))</span><br><span class="line">	&#123;</span><br><span class="line">		PdfReader reader = <span class="keyword">new</span> PdfReader(input);</span><br><span class="line">		PdfEncryptor.Encrypt(reader, output, <span class="literal">true</span>, <span class="string">&quot;1234&quot;</span>, <span class="string">&quot;1234&quot;</span>, PdfWriter.ALLOW_SCREENREADERS);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>筆者這邊就密碼設定為<code>1234</code>，產生一個輸入密碼才能打開的pdf檔案，名為<code>Test_enc.pdf</code>備用。</p>
<h2 id="撰寫判斷pdf檔案是否加密"><a href="#撰寫判斷pdf檔案是否加密" class="headerlink" title="撰寫判斷pdf檔案是否加密"></a>撰寫判斷pdf檔案是否加密</h2><p><code>iTextSharp</code>有一個方法可以呼叫，是<code>IsEncrypted()</code>，而此方法會回傳<code>bool</code>型別的結果，然而若會加密檔案則會得到<code>BadPasswordException</code>，然而基本上只要宣告<code>PdfReader</code>實體，基本上就會爆一樣的<code>Exception</code>，因此只要利用宣告PdfReader實體，得到<code>BadPasswordException</code>則表示有密碼保護，用這個原理判斷即可。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">PdfExtension</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">IsPasswordProtected</span>(<span class="params"><span class="built_in">string</span> pdfFullname</span>)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">try</span></span><br><span class="line">		&#123;</span><br><span class="line">			PdfReader pdfReader = <span class="keyword">new</span> PdfReader(pdfFullname);</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (BadPasswordException)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>寫完Extension方法後，在<code>Linqpad</code>中的<code>Main</code>中呼叫其對應方法即可得到是否有加密的判斷結果，我們利用上個步驟的兩個檔案即可。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">string</span> WorkingFolder = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);</span><br><span class="line">	<span class="built_in">string</span> InputFile = Path.Combine(WorkingFolder, <span class="string">&quot;Test.pdf&quot;</span>);</span><br><span class="line">	<span class="built_in">string</span> OutputFile = Path.Combine(WorkingFolder, <span class="string">&quot;Test_enc.pdf&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	PdfExtension.IsPasswordProtected(InputFile).Dump();</span><br><span class="line">	PdfExtension.IsPasswordProtected(OutputFile).Dump();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"># Linqpad結果</span></span><br><span class="line">False</span><br><span class="line">True</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>真的是要感謝網路上的資源，但是要自己要有判斷能力，且不得不推<code>Linqpad</code>的偉大，透過<code>Linqpad</code>，能夠快速驗證腦中的想法及程式碼片段，不需要透過整個API生命週期，才能測試你的想法，非常易用，且付費版本是一次付，終生有效，非常值得購買，這篇就到這了，希望幫助到有跟我一樣需求的大家。</p>
<p>參考</p>
<ul>
<li><a href="https://stackoverflow.com/questions/11298651/checking-if-pdf-is-password-protected-using-itextsharp">https://stackoverflow.com/questions/11298651/checking-if-pdf-is-password-protected-using-itextsharp</a></li>
<li><a href="https://stackoverflow.com/questions/6586346/itextsharp-password-protected-pdf">https://stackoverflow.com/questions/6586346/itextsharp-password-protected-pdf</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>reader</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>itextsharp</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]CleanArchitecture手做系列-建立專案</title>
    <url>/2022/05/10/clean-architecture-new/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者這篇主要是以<a href="https://github.com/jasontaylordev/CleanArchitecture">CleanArchitecture</a>的<code>template</code>架構，因<code>template</code>產出之專案結構包含<code>Identity Server</code>，還有前端頁面等不需要的專案，因此筆者想要仿照該<code>template</code>架構，自己手動建立純<code>API</code>架構，順便熟悉一下其<code>Clean Architecture</code>的專案結構，才能知己知彼，百戰百勝阿。此篇就以筆者手動建立的過程，筆者懶得截圖，主要以指令碼的方式進行相關建置作業。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>筆者這邊使用指令的方式手動建立相關專案及相依性並安裝套件，並使用<code>Visual Studio Code</code>撰寫其內容，一開始不免俗地放一張筆者參考的<code>template</code>專案的架構圖</p>
<img src="/2022/05/10/clean-architecture-new/Untitled.png" class="" title="[CleanArchitecture]">


<p><a href="https://i0.wp.com/jasontaylor.dev/wp-content/uploads/2020/01/Figure-01-2.png?w=531&ssl=1">https://i0.wp.com/jasontaylor.dev/wp-content/uploads/2020/01/Figure-01-2.png?w=531&amp;ssl=1</a></p>
<h2 id="建立專案"><a href="#建立專案" class="headerlink" title="建立專案"></a>建立專案</h2><p>跟著筆者一起建立相關專案吧</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> Test.CleanArch</span><br><span class="line"><span class="built_in">cd</span> Test.CleanArch\</span><br><span class="line">dotnet new webapi -o Test.CleanArch.API</span><br><span class="line">dotnet new classlib -o Test.CleanArch.Application</span><br><span class="line">dotnet new classlib -o Test.CleanArch.Domain</span><br><span class="line">dotnet new classlib -o Test.CleanArch.Infrastructure</span><br><span class="line">dotnet new sln -n Test.CleanArch</span><br></pre></td></tr></table></figure>

<h2 id="方案檔設定"><a href="#方案檔設定" class="headerlink" title="方案檔設定"></a>方案檔設定</h2><p>建立完專案及方案檔後，針對方案檔及專案設定對應，這樣之後想要使用<code>Visual Studio</code>開起來，雖然筆者這邊示範使用<code>Visual Studio Code</code>，筆者還是示範一下這個步驟</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet sln Test.CleanArch.sln add Test.CleanArch.API\Test.CleanArch.API.csproj</span><br><span class="line">dotnet sln Test.CleanArch.sln add Test.CleanArch.Application\Test.CleanArch.Application.csproj</span><br><span class="line">dotnet sln Test.CleanArch.sln add Test.CleanArch.Domain\Test.CleanArch.Domain.csproj</span><br><span class="line">dotnet sln Test.CleanArch.sln add Test.CleanArch.Infrastructure\Test.CleanArch.Infrastructure.csproj</span><br></pre></td></tr></table></figure>

<h2 id="加入參考"><a href="#加入參考" class="headerlink" title="加入參考"></a>加入參考</h2><p>接著要來設定專案之間的參考，這邊簡單解釋一下規則，以<code>Clean Architecture</code>的洋蔥式架構來說，相依性是非常重要的，相依的順序<code>有內而外</code>，因此最外層的<code>API</code>專案參考<code>Infrastructure</code>及<code>Application</code>專案，以此類推</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Test.CleanArch.API</span></span><br><span class="line"><span class="built_in">cd</span> Test.CleanArch.API\</span><br><span class="line">dotnet add reference ..\Test.CleanArch.Application\Test.CleanArch.Application.csproj</span><br><span class="line">dotnet add reference ..\Test.CleanArch.Infrastructure\Test.CleanArch.Infrastructure.csproj</span><br><span class="line"><span class="comment"># Test.CleanArch.Infrastructure</span></span><br><span class="line"><span class="built_in">cd</span> Test.CleanArch.Infrastructure\</span><br><span class="line">dotnet add reference ..\Test.CleanArch.Application\Test.CleanArch.Application.csproj</span><br><span class="line"><span class="comment"># Test.CleanArch.Application</span></span><br><span class="line"><span class="built_in">cd</span> Test.CleanArch.Application\</span><br><span class="line">dotnet add reference ..\Test.CleanArch.Domain\Test.CleanArch.Domain.csproj</span><br></pre></td></tr></table></figure>

<h2 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h2><h3 id="Domain專案"><a href="#Domain專案" class="headerlink" title="Domain專案"></a>Domain專案</h3><p>筆者這邊使用<code>SqlSuage</code>當作<code>ORM</code>，相較於原本的<code>template</code>是使用<code>EFCore</code>，宣告與引用上有所不同，<code>Domain</code>這邊會宣告<code>SqlSugar</code>對應的實體，會套上<code>SqlSugarCore</code>特有的<code>Attribute</code>，因此必須安裝<code>SqlSugarCore</code>套件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> Test.CleanArch.Domain\</span><br><span class="line">dotnet add package SqlSugarCore</span><br></pre></td></tr></table></figure>

<h3 id="Application專案"><a href="#Application專案" class="headerlink" title="Application專案"></a>Application專案</h3><p><code>Application</code>專案屬整個專案制定規格的地方，因此安裝套件有點多，筆者這邊除了<code>SqlSugar</code>外，其他沿用<code>template</code>預設標配的相關套件</p>
<ul>
<li>MediatR</li>
<li>AutoMapper</li>
<li>FluentValidation</li>
</ul>
<p>因此需要安裝相關的套件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> Test.CleanArch.Application\</span><br><span class="line">dotnet add package SqlSugarCore</span><br><span class="line">dotnet add package AutoMapper.Extensions.Microsoft.DependencyInjection</span><br><span class="line">dotnet add package FluentValidation.DependencyInjectionExtensions</span><br><span class="line">dotnet add package MediatR.Extensions.Microsoft.DependencyInjection</span><br></pre></td></tr></table></figure>

<h3 id="Infrastructure專案"><a href="#Infrastructure專案" class="headerlink" title="Infrastructure專案"></a>Infrastructure專案</h3><p><code>Infrastructure</code>專案這邊，放置非<code>Domain</code>相關的實作，類似像Excel相關的操作，會將定義放在Application專案中，實作則於此專案中實作，接著SqlSugar相關注入宣告也是在於此，因此必須要從appsettings中讀取相關的設定</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> Test.CleanArch.Infrastructure\</span><br><span class="line">dotnet add package Microsoft.Extensions.Configuration</span><br></pre></td></tr></table></figure>

<h2 id="檔案結構"><a href="#檔案結構" class="headerlink" title="檔案結構"></a>檔案結構</h2><p>按照筆者上述講的方式宣告、建置完成後，會長出以下檔案結構目錄，筆者為截圖方便，使用<code>Visual Studio 2022</code>開啟後，看出專案相依性及安裝套件列表</p>
<img src="/2022/05/10/clean-architecture-new/Untitled1.png" class="" title="[CleanArchitectureProjects]">


<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>這篇就以建立專案，專案參考及安裝套件為主，下篇筆者以<code>SqlSugarCore</code>為例，做一個以<code>MediatR</code>的<code>In-process messaging</code>方式完成商業邏輯的撰寫。</p>
<p>參考</p>
<ul>
<li><a href="https://github.com/jasontaylordev/CleanArchitecture">https://github.com/jasontaylordev/CleanArchitecture</a></li>
<li><a href="https://jasontaylor.dev/clean-architecture-getting-started/">https://jasontaylor.dev/clean-architecture-getting-started/</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>
]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>clean-architecture</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>clean-architecture</tag>
      </tags>
  </entry>
  <entry>
    <title>[Electron]vanilla js套件系列-Toast:toastify-js</title>
    <url>/2022/03/07/electron-series-vanillajs-toastifyjs/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>一個應用程式，尤其是前端少不了<code>alert</code>訊息啦，網頁系統，基本上就可以使用alert方法可以跳出提示訊息，純網頁應該是不會有違合感，但想像一下以<code>PC App</code>的形式來說，直接跳網頁的那種<code>alert</code>訊息，似乎不太搭，通常一個系統一定會搭配一套<code>toastr</code>的套件，將成功、失敗訊息顯示於<code>左上、右上、左下、右下角</code>，清楚地告訴使用者，他的操作是否成功或失敗。</p>
<p>筆者認為<code>toastr</code>的基本要素就是至少要有<code>成功</code>或<code>失敗</code>的<code>樣式</code>可以選擇，以及剛提到的訊息置於<code>左上、右上、左下、右下角</code>等選項，再則進階一點就是訊息內容本身要支援，<code>html格式訊息</code>或<code>一般文字訊息</code>，才可以靈活運用。這篇的前提條件跟前幾篇一樣，筆者想要找到一個<code>Vanilla js</code>的<code>Toastr</code>套件，這篇主要是要介紹筆者挑到在使用的<a href="https://apvarun.github.io/toastify-js/">https://apvarun.github.io/toastify-js/</a>。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><h2 id="建立Demo專案"><a href="#建立Demo專案" class="headerlink" title="建立Demo專案"></a>建立Demo專案</h2><p>筆者這邊使用簡單的html檔案，透過連結載入的方式使用toastify.js，為了美觀，筆者這邊套用Bootstrap5，首先</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> &#123;targetPath&#125;</span><br><span class="line"><span class="built_in">mkdir</span> demo-toastifyjs</span><br><span class="line"><span class="built_in">cd</span> demo-toastifyjs</span><br><span class="line"><span class="built_in">touch</span> index.html</span><br><span class="line">code .</span><br></pre></td></tr></table></figure>

<h2 id="頁面中載入Bootstrap5及toastify-js"><a href="#頁面中載入Bootstrap5及toastify-js" class="headerlink" title="頁面中載入Bootstrap5及toastify.js"></a>頁面中載入Bootstrap5及toastify.js</h2><p>接著使用VSCode編輯剛建立之index.html檔案，載入bootstrap 5及toastify.js</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">integrity</span>=<span class="string">&quot;sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ToastrifyJs Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/toastify-js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">integrity</span>=<span class="string">&quot;sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="撰寫主要程式內容"><a href="#撰寫主要程式內容" class="headerlink" title="撰寫主要程式內容"></a>撰寫主要程式內容</h2><h3 id="觸發按鈕"><a href="#觸發按鈕" class="headerlink" title="觸發按鈕"></a>觸發按鈕</h3><p>為模擬toastr視窗，筆者就在頁面上簡單放幾個按鈕備用，筆者這編參考<code>bootstrap</code>中的<code>listgroup</code>章節並將內容物置換成<code>button</code>結構，並將它們的<code>id</code>標上不一樣的名稱</p>
<p><a href="https://getbootstrap.com/docs/5.0/components/list-group/">https://getbootstrap.com/docs/5.0/components/list-group/</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row justify-content-md-center m-5&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;success-btn&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item list-group-item-action&quot;</span>&gt;</span>Success<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;error-btn&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item list-group-item-action&quot;</span>&gt;</span>Error<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;info-btn&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item list-group-item-action&quot;</span>&gt;</span>Info<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Button-Click事件-ShowToast"><a href="#Button-Click事件-ShowToast" class="headerlink" title="Button Click事件:ShowToast"></a>Button Click事件:ShowToast</h3><p>接著我們使用<code>vanilla js</code>的方式找到<code>button element</code>物件，並且針對<code>click</code>事件中呼叫<code>toastify.js</code>的<code>showToast</code>方法來跳出<code>toastr</code>視窗</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> $successBtn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#success-btn&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> $errorBtn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#error-btn&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> $infoBtn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#info-btn&#x27;</span>);</span><br><span class="line">    $successBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title class_">Toastify</span>(&#123;</span><br><span class="line">            <span class="attr">text</span>: <span class="string">&quot;This is a toast&quot;</span>,</span><br><span class="line">            <span class="attr">style</span>: &#123;</span><br><span class="line">                <span class="attr">background</span>: <span class="string">&quot;blue&quot;</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).<span class="title function_">showToast</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">    $errorBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title class_">Toastify</span>(&#123;</span><br><span class="line">            <span class="attr">text</span>: <span class="string">&quot;This is a toast&quot;</span>,</span><br><span class="line">            <span class="attr">style</span>: &#123;</span><br><span class="line">                <span class="attr">background</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).<span class="title function_">showToast</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">    $infoBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title class_">Toastify</span>(&#123;</span><br><span class="line">            <span class="attr">text</span>: <span class="string">&quot;This is a toast&quot;</span>,</span><br><span class="line">            <span class="attr">style</span>: &#123;</span><br><span class="line">                <span class="attr">background</span>: <span class="string">&quot;green&quot;</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).<span class="title function_">showToast</span>();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="呈現效果"><a href="#呈現效果" class="headerlink" title="呈現效果"></a>呈現效果</h3><p>筆者直接使用background屬性，不同三個按鈕，分別對應三個不同顏色</p>
<img src="/2022/03/07/electron-series-vanillajs-toastifyjs/Untitled.png" class="" title="[ToastDemo]">

<h2 id="詳細API設定"><a href="#詳細API設定" class="headerlink" title="詳細API設定"></a>詳細API設定</h2><p>參考其教學網站中的<code>API</code>設定，看完覺得滿簡單的，筆者這邊就不再贅述了，不過列一下筆者這次使用到的一些<code>API</code></p>
<ul>
<li><code>text</code>:toastr顯示字串</li>
<li><code>style</code>: toastr的樣式，筆者這邊使用到<code>background</code>屬性，依照不同按鈕改變成不同顏色</li>
<li><code>gravity</code>:筆者沒有特別設定，預設為「<code>top</code>」上方</li>
<li><code>position</code>:筆者沒有特別設定，預設為「<code>right</code>」右邊</li>
</ul>
<p>因此以上設定來說，<code>toastr</code>會出現在右上方，並且套用筆者這邊設定好的背景顏色，詳細設定如下</p>
<table>
<thead>
<tr>
<th align="center">Option Key</th>
<th align="center">type</th>
<th align="center">Usage</th>
<th align="center">Defaults</th>
</tr>
</thead>
<tbody><tr>
<td align="center">text</td>
<td align="center">string</td>
<td align="center">Message to be displayed in the toast</td>
<td align="center">“Hi there!”</td>
</tr>
<tr>
<td align="center">node</td>
<td align="center">ELEMENT_NODE</td>
<td align="center">Provide a node to be mounted inside the toast. node takes higher precedence over text</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">duration</td>
<td align="center">number</td>
<td align="center">Duration for which the toast should be displayed. -1 for permanent toast</td>
<td align="center">3000</td>
</tr>
<tr>
<td align="center">selector</td>
<td align="center">string | ELEMENT_NODE</td>
<td align="center">ShadowRoot</td>
<td align="center">CSS Selector or Element Node on which the toast should be added</td>
</tr>
<tr>
<td align="center">destination</td>
<td align="center">URL string</td>
<td align="center">URL to which the browser should be navigated on click of the toast</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">newWindow</td>
<td align="center">boolean</td>
<td align="center">Decides whether the destination should be opened in a new window or not</td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">close</td>
<td align="center">boolean</td>
<td align="center">To show the close icon or not</td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">gravity</td>
<td align="center">“top” or “bottom”</td>
<td align="center">To show the toast from top or bottom</td>
<td align="center">“top”</td>
</tr>
<tr>
<td align="center">position</td>
<td align="center">“left” or “right”</td>
<td align="center">To show the toast on left or right</td>
<td align="center">“right”</td>
</tr>
<tr>
<td align="center">backgroundColor</td>
<td align="center">CSS background value</td>
<td align="center">To be deprecated, use style.background option instead. Sets the background color of the toast</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">avatar</td>
<td align="center">URL string</td>
<td align="center">Image/icon to be shown before text</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">className</td>
<td align="center">string</td>
<td align="center">Ability to provide custom class name for further customization</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">stopOnFocus</td>
<td align="center">boolean</td>
<td align="center">To stop timer when hovered over the toast (Only if duration is set)</td>
<td align="center">true</td>
</tr>
<tr>
<td align="center">callback</td>
<td align="center">Function</td>
<td align="center">Invoked when the toast is dismissed</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">onClick</td>
<td align="center">Function</td>
<td align="center">Invoked when the toast is clicked</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">offset</td>
<td align="center">Object</td>
<td align="center">Ability to add some offset to axis</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">escapeMarkup</td>
<td align="center">boolean</td>
<td align="center">Toggle the default behavior of escaping HTML markup</td>
<td align="center">true</td>
</tr>
<tr>
<td align="center">style</td>
<td align="center">object</td>
<td align="center">Use the HTML DOM Style properties to add any style directly to toast</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">oldestFirst</td>
<td align="center">boolean</td>
<td align="center">Set the order in which toasts are stacked in page</td>
<td align="center">true</td>
</tr>
</tbody></table>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>藉由簡單的示範，沒有任何副作用的透過<code>vanilla js</code>撰寫方式實作出<code>Toastr</code>視窗彈跳，對筆者來說太感人了，基本上只要透過<code>style</code>中的<code>background</code>去搭配整體網站使用的色彩，就可以分別做出<code>成功</code>及<code>錯誤</code>的<code>Toastr</code>視窗。</p>
<p>參考</p>
<ul>
<li><a href="https://github.com/apvarun/toastify-js">https://github.com/apvarun/toastify-js</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>electron</category>
      </categories>
      <tags>
        <tag>electron</tag>
        <tag>toastifyjs</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]Reader系列-EML檔案</title>
    <url>/2022/03/07/reader-series-eml/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者公司其他同仁負責的專案有一個需求是，主動幫使用者的信件內容讀取，依照附件檔案中的檔案內容做不同的事情，而不用人工的方式到系統中上傳該附件檔案。這時候就該使出<code>Reader系列文章</code>的時候了，前置作業可能要靠其他<code>Infra</code>同仁設定好後將信件自動轉成EML檔案格式，放置於網路空間上，由<code>EML Reader</code>會去讀取該路經中的<code>EML</code>檔案，並做對應的事，該篇就以讀取<code>EML</code>檔案格式內容為主作呈現。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>筆者找到套件名為<a href="https://github.com/Sicos1977/MSGReader">https://github.com/Sicos1977/MSGReader</a>，為示範，筆者會使用<a href="https://www.phpclasses.org/browse/file/14672.html">https://www.phpclasses.org/browse/file/14672.html</a>此網址中的eml檔案。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">var</span> fileInfo = <span class="keyword">new</span> FileInfo(<span class="string">@&quot;&#123;path&#125;\Downloads\test_sample_message.eml&quot;</span>);</span><br><span class="line">	<span class="keyword">var</span> eml = MsgReader.Mime.Message.Load(fileInfo);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 撈出收件者</span></span><br><span class="line">	<span class="keyword">if</span> (eml.Headers != <span class="literal">null</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (eml.Headers.To != <span class="literal">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">foreach</span> (<span class="keyword">var</span> recipient <span class="keyword">in</span> eml.Headers.To)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">var</span> to = recipient.Address;</span><br><span class="line">				to.Dump();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 撈出信件主旨</span></span><br><span class="line">	<span class="keyword">var</span> subject = eml.Headers.Subject;</span><br><span class="line">	subject.Dump();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 撈出信件內容(一般文字格式)</span></span><br><span class="line">	<span class="keyword">if</span> (eml.TextBody != <span class="literal">null</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">var</span> textBody = System.Text.Encoding.UTF8.GetString(eml.TextBody.Body);</span><br><span class="line">		textBody.Dump();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 撈出信件內容(html格式)</span></span><br><span class="line">	<span class="keyword">if</span> (eml.HtmlBody != <span class="literal">null</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">var</span> htmlBody = System.Text.Encoding.UTF8.GetString(eml.HtmlBody.Body);</span><br><span class="line">		htmlBody.Dump();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 撈出附件並存檔至本機目錄中</span></span><br><span class="line">	<span class="keyword">foreach</span> (<span class="keyword">var</span> attach <span class="keyword">in</span> eml.Attachments)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="string">$&quot;AttachFileName: <span class="subst">&#123;attach.FileName&#125;</span>&quot;</span>.Dump();</span><br><span class="line">		<span class="keyword">var</span> filePath = @<span class="string">$&quot;D:\&#123;attach.FileName&#125;&quot;</span>;</span><br><span class="line">		<span class="keyword">using</span> <span class="keyword">var</span> fs = <span class="keyword">new</span> FileStream(filePath, FileMode.Create);</span><br><span class="line">		attach.Save(fs);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>讀取的結果如下</p>
<img src="/2022/03/07/reader-series-eml/Untitled.png" class="" title="[EmlReaderResult]">

<p>也可以在指定的D槽中看到附件檔案</p>
<img src="/2022/03/07/reader-series-eml/Untitled1.png" class="" title="[EmlReaderResultInPath]">

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>依照套件<code>github</code>上面的說明範例<code>code</code>，滿簡單易懂的，照著刻應該都做得出來，接著讀取解析<code>attach</code>檔案內容後，接著做對應的商業邏輯，完美。</p>
<p>參考</p>
<ul>
<li><a href="https://www.phpclasses.org/browse/file/14672.html">https://www.phpclasses.org/browse/file/14672.html</a></li>
<li><a href="https://github.com/Sicos1977/MSGReader">https://github.com/Sicos1977/MSGReader</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>reader</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>eml</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hexo]Github Page:設定Domain Name</title>
    <url>/2022/03/07/github-page-custom-domain/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者寫<code>Blog</code>有一段時間了，去年買了自己的名字域名後，一直沒空去設定它，一直都使用<code>github io</code>預設的域名，上週終於有空來設定了。筆者買很夯的<code>.me</code>結尾的域名，剛好歐洲的一個小國家的代碼為me，筆者這邊買的自然就是<a href="https://eugenesu.me/">https://eugenesu.me</a>了。筆者這篇以整個設定到生效的過程一一介紹，若以筆者一樣使用hexo當blog生產工具，且想要將自己的github page掛上域名的，可以參考使用。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>筆者使用最簡單的方式解釋一下整個設定過程：</p>
<ul>
<li>購買域名並掛上SSL，及設定DNS資訊</li>
<li><code>Github Repo</code>端綁定其上述購買的域名</li>
</ul>
<p>接著針對每一個步驟，筆者會一一說明其設定步驟</p>
<h2 id="購買域名"><a href="#購買域名" class="headerlink" title="購買域名"></a>購買域名</h2><p>筆者是在<a href="https://www.smarterasp.net/">https://www.smarterasp.net/</a>該網站購買筆者的域名，因筆者有經驗幫親朋好友架簡單網站時候使用過該站台的服務，滿簡單使用的。</p>
<img src="/2022/03/07/github-page-custom-domain/Untitled.png" class="" title="[SmarterASPNet-DomainName]">

<p>該平台是購買一個<code>hosting</code>方案，會在自己購買的<code>hosting</code>方案上，可以購買及設定</p>
<ul>
<li>域名</li>
<li>VPN</li>
<li>SSL</li>
</ul>
<p>等各種服務，購買方式跟其他域名平台大同小異，筆者就不另外截圖。</p>
<h2 id="購買SSL"><a href="#購買SSL" class="headerlink" title="購買SSL"></a>購買SSL</h2><p>現在講求<code>https</code>時代，當然也幫自己的域名購買一個<code>SSL</code>，筆者這邊也是透過上述的平台上購買其<code>SSL</code>憑證，結帳後會有客服會幫忙設定，等生效需要一段時間，購買過程跟其他平台大同小異，基本上購買時需要指定哪個<code>Domain Name</code>，以筆者使用的平台來說，購買方案有</p>
<img src="/2022/03/07/github-page-custom-domain/Untitled1.png" class="" title="[SmarterASPNet-SSL]">

<p>筆者這邊購買<code>SSL-S</code>這個單個<code>Domain</code>的方案，因為綁定<code>SSL</code>必須要有靜態<code>IP</code>，因此必須得再買一個靜態<code>IP</code></p>
<img src="/2022/03/07/github-page-custom-domain/Untitled2.png" class="" title="[SmarterASPNet-SSL:StaticIP]">

<p>接下來就照著步驟結帳即可。</p>
<h2 id="DNS設定"><a href="#DNS設定" class="headerlink" title="DNS設定"></a>DNS設定</h2><p>上述的都搞定後，必須設定<code>DNS</code>資訊，新增四個<code>A record</code>及一個<code>CNAME record</code></p>
<img src="/2022/03/07/github-page-custom-domain/Untitled3.png" class="" title="[SmarterASPNet-SSL:Setting]">

<h2 id="Github端綁定域名"><a href="#Github端綁定域名" class="headerlink" title="Github端綁定域名"></a>Github端綁定域名</h2><p>在<code>blog repo</code>端設定其對應的域名，設定位置：<code>Settings</code> &gt; <code>Pages</code> &gt; <code>Custom Domain</code></p>
<img src="/2022/03/07/github-page-custom-domain/Untitled4.png" class="" title="[GithubPage-CustomDomain]">

<p>基本上這一步驟中主要透過介面產生<code>CNAME</code>檔案，筆者在下一個步驟中會教學直接使用<code>github repo</code>本機端手動增加<code>CNAME</code>檔案，因此若要先看一下效果，可以使用這個介面操作方式先看一下效果。</p>
<h2 id="Github-IO原始碼端設定"><a href="#Github-IO原始碼端設定" class="headerlink" title="Github IO原始碼端設定"></a>Github IO原始碼端設定</h2><p>筆者參考的幾篇文基本上都介紹到上個步驟就停止了，但對於部落格中產生<code>RSS</code>的<code>xml</code>檔案來說，必須得在<code>blog config</code>中設定其對應的域名，讓它產生靜態頁面時，一併產生出來的<code>RSS xml</code>檔上的域名會是對的。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line"><span class="comment"># URL區塊</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://eugenesu.me</span></span><br></pre></td></tr></table></figure>

<p>接著大部分的<code>config</code>都會設定對應的<code>github repo</code>以利版控，這時問題來了，你只要將手邊的最新檔案推到<code>Github Repo</code>上，若沒有做額外的動作，於上個步驟設定時產生的<code>CNAME</code>檔案會被蓋掉，因此這步驟會非常重要。也在自己<code>blog</code>端也手動加入<code>CNAME</code>檔案，以至於使用<code>hexo deploy</code>時，也會一併將<code>CNAME</code>檔案也加入版控中，這樣兩邊都會對起來，你只要跟之前一樣<code>deploy</code>即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> Blog/EugeneBlog</span><br><span class="line"><span class="built_in">cd</span> <span class="built_in">source</span></span><br><span class="line"><span class="built_in">touch</span> CNAME</span><br></pre></td></tr></table></figure>

<p>於<code>CNAME</code>檔案內容中增加自己的域名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CNAME</span></span><br><span class="line">eugenesu.me</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>筆者這邊列一下總費用，以一年時間為例，可以給想要擁有自己域名的朋友參考</p>
<ul>
<li>域名: <code>USD$30</code>(含域名及privacy)</li>
<li>SSL:<code>USD$53</code>(含SSL及靜態IP)</li>
</ul>
<p>筆者覺得.me結尾域名，先買起來放著，覺得很有自己品牌的概念，以上述加一加，不到<code>台幣2500</code>，就可以擁有很漂亮的域名，值得花錢投資。</p>
<p>參考</p>
<ul>
<li><a href="https://richpauloo.github.io/2019-11-17-Linking-a-Custom-Domain-to-Github-Pages/">https://richpauloo.github.io/2019-11-17-Linking-a-Custom-Domain-to-Github-Pages/</a></li>
<li><a href="https://github.com/hexojs/hexo/issues/2446">https://github.com/hexojs/hexo/issues/2446</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github-page</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]泛型運用系列-注入篇</title>
    <url>/2022/01/14/dotnetcore-generic-series-DI/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>前提情要請參考<a href="/2022/01/14/dotnetcore-generic-series-model/" title="[DotnetCore]泛型運用系列-Model設計篇">[DotnetCore]泛型運用系列-Model設計篇</a>，不過筆者還是在這邊再列一下會用到的技術觀念與套件：</p>
<ul>
<li><a href="https://automapper.org/">AutoMapper</a>:運用於將檔案內容對應的物件轉成<code>EFCore</code>的物件時</li>
<li>Generic Class/Method: 不想寫多個<code>Service</code>去處理多個檔案，設計成泛型形式以符合各種檔案類型</li>
<li><code>Attribute</code>: 透過<code>Description Attribute</code>，註記其對應的<code>Comlumn</code>欄位順序</li>
<li><a href="https://github.com/jamesmh/coravel">Coravel</a>:透過該套件，將寫好的<code>Service</code>掛成排程任務</li>
<li>Extension Method:有一些通用的<code>Method</code>，不要落落等塞在一個Service中，因此轉換成可以共用的<code>Extension Method</code></li>
<li><a href="https://docs.microsoft.com/zh-tw/ef/core/">EFCore</a>:資料存取用開發套件</li>
</ul>
<span id="more"></span>
<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>此篇內容主要運用到<code>Coravel</code>套件的<code>Job</code>宣告方式，並將該<code>Job</code>透過<code>DI</code>方式注入，<code>DotnetCore</code>世界中，<code>DI</code>是一個顯性哲學，一切為<code>DI</code>，因為<code>DotnetCore</code>本身就已經有配置一套標準的DI底層框架，且是預設的，因此沒有不用的道理阿。</p>
<a href="/2021/08/25/coravel-scheduler/" title="[DotnetCore]排程利器-Coravel:Scheduler篇">[DotnetCore]排程利器-Coravel:Scheduler篇</a>中可以看到`Coravel`使用的解說，筆者這邊就不特別說明直接奉上宣告片段，並著重在泛型使用上面的解說

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DomainJob</span>&lt;<span class="title">T</span>&gt; : <span class="title">IInvocable</span></span><br><span class="line">    <span class="keyword">where</span> <span class="title">T</span> : <span class="title">BaseModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IDomainJobService&lt;T&gt; _domainJobService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DomainJob</span>(<span class="params">IDomainJobService&lt;T&gt; domainJobService</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _domainJobService= domainJobService;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Task <span class="title">Invoke</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_domainJobService.CanRunOrNot())</span><br><span class="line">        &#123;</span><br><span class="line">            _domainJobService.DoProcess();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接著將相關的<code>Job</code>以及<code>Service</code>注入於<code>Dotnet Core</code>的<code>DI Container</code>中</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// FtpService為從Ftp下載的實作</span></span><br><span class="line"><span class="comment">// FtpSetting為筆者這邊環境使用，宣告FtpServer的位置,登入帳號及密碼，還有相對路徑設定值對應的Property</span></span><br><span class="line">services.AddTransient&lt;IFtpService, FtpService&gt;();</span><br><span class="line">services.AddTransient(<span class="keyword">typeof</span>(DomainJob&lt;&gt;));</span><br><span class="line">services.Configure&lt;FtpSetting&gt;(config.GetSection(<span class="string">&quot;Ftp&quot;</span>));</span><br><span class="line">services.AddTransient(<span class="keyword">typeof</span>(IDomainJobService&lt;&gt;), <span class="keyword">typeof</span>(DomainJobService&lt;&gt;));</span><br></pre></td></tr></table></figure>

<p>最後透過<code>Coravel</code>的<code>AddScheduler</code>的方法將上述<code>Job</code>加進<code>Coravel</code>的<code>Scheduler</code>排程中</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">app.ApplicationServices.UseScheduler(scheduler =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    scheduler.Schedule&lt;DomainJob&lt;AModel&gt;&gt;().EveryMinute();</span><br><span class="line">&#125;).OnError((exception) =&gt;</span><br><span class="line">    <span class="comment">// Log Error</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>筆者發現，撰寫程式碼才不到三小時，花好多時間解釋其原理，卻花了筆者半天時間，由此可知要好好心存感激那些大神們願意花時間將自己所學知識發佈於部落格中，才能有一個正向回饋，自己所學運用於工作中，再反饋於部落格文章中，是一個正向的循環，希望這系列文章有幫助到你。</p>
<p>參考</p>
<ul>
<li><a href="https://www.stevejgordon.co.uk/asp-net-core-dependency-injection-how-to-register-generic-types">https://www.stevejgordon.co.uk/asp-net-core-dependency-injection-how-to-register-generic-types</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>generic</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]泛型運用系列-商業邏輯實作篇</title>
    <url>/2022/01/14/dotnetcore-generic-series-domain/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>前提情要請參考<a href="/2022/01/14/dotnetcore-generic-series-model/" title="[DotnetCore]泛型運用系列-Model設計篇">[DotnetCore]泛型運用系列-Model設計篇</a>，不過筆者還是在這邊再列一下會用到的技術觀念與套件：</p>
<ul>
<li><a href="https://automapper.org/">AutoMapper</a>:運用於將檔案內容對應的物件轉成<code>EFCore</code>的物件時</li>
<li>Generic Class/Method: 不想寫多個<code>Service</code>去處理多個檔案，設計成泛型形式以符合各種檔案類型</li>
<li><code>Attribute</code>: 透過<code>Description Attribute</code>，註記其對應的<code>Comlumn</code>欄位順序</li>
<li><a href="https://github.com/jamesmh/coravel">Coravel</a>:透過該套件，將寫好的<code>Service</code>掛成排程任務</li>
<li>Extension Method:有一些通用的<code>Method</code>，不要落落等塞在一個Service中，因此轉換成可以共用的<code>Extension Method</code></li>
<li><a href="https://docs.microsoft.com/zh-tw/ef/core/">EFCore</a>:資料存取用開發套件</li>
</ul>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>前兩篇提到基礎建設，這篇來實作商業邏輯吧，筆者在覆頌一下欲實作的細節</p>
<ul>
<li>從<code>FTP</code>下載檔案：實作細節可參考<a href="/2021/08/31/ftp-download/" title="[DotnetCore]FTP-下載上傳">[DotnetCore]FTP-下載上傳</a>，筆者就不另外說明了</li>
<li>從下載檔案逐筆讀取資料內容：這段使用<code>StreamReader</code>即可</li>
<li>透過<code>Generic Method</code>將資料內容轉換成物件清單：上兩篇中說明過</li>
<li>最後透過<code>AutoMapper Profile</code>設定轉換成EFCore物件</li>
<li>透過<code>EFCore</code>存進資料庫中</li>
</ul>
<p>前三項已解釋過，此篇就以最後兩項為主說明其實作細節</p>
<h2 id="Mapper-Profile設定及注入"><a href="#Mapper-Profile設定及注入" class="headerlink" title="Mapper Profile設定及注入"></a>Mapper Profile設定及注入</h2><p>上一篇裡做完前置作業，已經取得<code>Model List</code>，到這邊會有疑問為什麼不直接在最終的<code>EFCore Entity</code>上套上Column順序設定值就好，這樣就不用透過<code>AutoMapper</code>多轉一手。</p>
<p>第一個原因是筆者工作環境中所使用的<code>EFCore</code>模式為<code>DBFirst</code>的形式，那些<code>Entities</code>是透過<code>efcore scaffold</code>指令產生出來的，因自動產生出來的Class就不應該再手動去編輯。</p>
<p>第二個原因是之所以有<code>ViewModel</code>或者比較多人所稱呼的<code>DTO</code>物件，有其必要性，可以自由地套上<code>顯示層級</code>或者<code>Model Binding</code>層級上需要處理的設定，例如若從<code>API</code>接到的<code>Model</code>來說，可能會透過自定義的<code>JsonConverter</code>轉成特定格式，就像此系列中的實作邏輯，需透過<code>Description Attribute</code>套上<code>Column</code>順序設定值。</p>
<p>以上述兩個理由，足夠理由建立額外的<code>ViewModel</code>物件，處理商業邏輯處理時的物件，跟著筆者設定對應關係吧。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dotnet add package AutoMapper.Extensions.Microsoft.DependencyInjection</span></span><br><span class="line"><span class="comment">// Startup.cs</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 以上省略</span></span><br><span class="line">    <span class="comment">// Domain.Profiles為Profile檔案放置之專案名稱</span></span><br><span class="line">    services.AddAutoMapper(AppDomain.CurrentDomain.Load(<span class="string">&quot;Domain.Profiles&quot;</span>));</span><br><span class="line">    <span class="comment">// 以下省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// dotnet add package AutoMapper</span></span><br><span class="line"><span class="comment">// DomainJobProfile.cs</span></span><br><span class="line"><span class="keyword">using</span> AutoMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DomainJobProfile</span> : <span class="title">Profile</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 筆者這邊假設ViewModel物件與Entity物件Property Name及資料型別皆一致</span></span><br><span class="line">    CreateMap&lt;ADomainModel, AEntity&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="EFCore實作"><a href="#EFCore實作" class="headerlink" title="EFCore實作"></a>EFCore實作</h2><p>已經有<code>Mapper</code>可以轉換成最終<code>EFCore</code>使用的<code>Entity</code>物件，<code>EFCore</code>部份就只要<code>AddRange</code>跟<code>SaveChanges</code>即可。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注入取得IMapper(_mapper)、DBContext(_db)</span></span><br><span class="line"><span class="comment">// private static readonly ILogger _logger = LogManager.GetCurrentClassLogger();</span></span><br><span class="line"><span class="keyword">var</span> aEntityList= _mapper.Map&lt;List&lt;AEntity&gt;&gt;(modelList);</span><br><span class="line"><span class="keyword">var</span> existsDataOrNot = _db.AEntities</span><br><span class="line">    .Any(x =&gt; x.DataDate == aEntityList.FirstOrDefault().DataDate </span><br><span class="line">    &amp;&amp; x.EventCode == aEntityList.FirstOrDefault().EventCode);</span><br><span class="line"><span class="keyword">if</span> (existsDataOrNot)</span><br><span class="line">&#123;</span><br><span class="line">    _logger.Error(<span class="string">$&quot;[DomainJobService:DoProcess] 對應資料已存在!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">_db.AEntities.AddRange(aEntityList);</span><br><span class="line">_db.SaveChanges();</span><br></pre></td></tr></table></figure>

<h2 id="Service完整程式碼"><a href="#Service完整程式碼" class="headerlink" title="Service完整程式碼"></a>Service完整程式碼</h2><p>到這邊實作<code>Service</code>告一段落，筆者就把幾篇寫好的實作完整程式碼貼出來</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IDomainJobService</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IDomainJobService</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">    <span class="keyword">where</span> <span class="title">T</span> : <span class="title">BaseModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="built_in">bool</span> <span class="title">CanRunOrNot</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DoProcess</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DomainJobService</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DomainJobService</span>&lt;<span class="title">T</span>&gt; : <span class="title">IDomainJobService</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">    <span class="keyword">where</span> <span class="title">T</span> : <span class="title">BaseModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IFtpService _ftpService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> FtpSetting _ftpSetting;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IHostEnvironment _env;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> DBContext _db;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IMapper _mapper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> ILogger _logger = LogManager.GetCurrentClassLogger();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DomainJobService</span>(<span class="params">IFtpService ftpService</span></span></span><br><span class="line"><span class="params"><span class="function">        , IOptions&lt;FtpSetting&gt; options, IHostEnvironment env</span></span></span><br><span class="line"><span class="params"><span class="function">        , DBContext db, IMapper mapper</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _ftpService = ftpService;</span><br><span class="line">        _ftpSetting = options.Value;</span><br><span class="line">        _env = env;</span><br><span class="line">        _db = db;</span><br><span class="line">        _mapper = mapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">CanRunOrNot</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Call Sql Function for check, always return true for test</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoProcess</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Step0: Data Initial           </span></span><br><span class="line">        <span class="keyword">var</span> fileName = CustomTypeExtension.GetDescription(<span class="keyword">typeof</span>(T));</span><br><span class="line">        <span class="keyword">var</span> orderDict = CustomTypeExtension.GetPropertiesWithOrderDescription(<span class="keyword">typeof</span>(T));</span><br><span class="line">        <span class="comment">// Step1: Download Ftp Service</span></span><br><span class="line">        <span class="comment">//_ftpService.DownloadData(_ftpSetting, new List&lt;string&gt;() &#123; fileName &#125;);</span></span><br><span class="line">        <span class="keyword">var</span> filePath = Path.Combine(_env.ContentRootPath, <span class="string">&quot;upload&quot;</span>, <span class="string">&quot;Downloads&quot;</span>, fileName);</span><br><span class="line">        <span class="keyword">var</span> modelList = ObjectExtension.GetModelList&lt;T&gt;(filePath, Encoding.GetEncoding(<span class="string">&quot;Big5&quot;</span>), orderDict, <span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">        <span class="comment">// Step3: Add Range:AEntity</span></span><br><span class="line">        <span class="keyword">var</span> aEntityList= _mapper.Map&lt;List&lt;AEntity&gt;&gt;(modelList);</span><br><span class="line">        <span class="keyword">var</span> existsDataOrNot = _db.AEntities</span><br><span class="line">            .Any(x =&gt; x.DataDate == aEntityList.FirstOrDefault().DataDate </span><br><span class="line">            &amp;&amp; x.EventCode == aEntityList.FirstOrDefault().EventCode);</span><br><span class="line">        <span class="keyword">if</span> (existsDataOrNot)</span><br><span class="line">        &#123;</span><br><span class="line">            _logger.Error(<span class="string">$&quot;[DomainJobService:DoProcess] 對應資料已存在!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        _db.AEntities.AddRange(aEntityList);</span><br><span class="line">        _db.SaveChanges();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述中<code>CanRunOrNot()</code>部份要解釋一下，筆者工作環境金融業內部系統，基本上都會牽扯到營業日這件事，但營業日的定義有一定的運算邏輯，通常是撇除假日後的日期，若排程的設定若要照著營業日走，<code>CronExpression</code>是無法描述的，因此筆者這邊設計是每日跑，但每日排程觸發時，會呼叫一個<code>Sql Function</code>確認是否需要跑排程，然而於該<code>Sql Function</code>中撰寫營業日的判斷，回傳是否當日需要跑排程。</p>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>到此篇該實作的皆實作完畢，預告一下下一篇將這些實作透過<code>Startup</code>中設定注入至<code>DI Container</code>中，也包含<code>Coravel</code>的排程設定，才能完整的讓其整個流程運作起來，那我們就下篇見了。</p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>generic</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]泛型運用系列-Attribute設計篇</title>
    <url>/2022/01/14/dotnetcore-generic-series-attribute/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>前提情要請參考<a href="/2022/01/14/dotnetcore-generic-series-model/" title="[DotnetCore]泛型運用系列-Model設計篇">[DotnetCore]泛型運用系列-Model設計篇</a>，不過筆者還是在這邊再列一下會用到的技術觀念與套件：</p>
<ul>
<li><a href="https://automapper.org/">AutoMapper</a>:運用於將檔案內容對應的物件轉成<code>EFCore</code>的物件時</li>
<li>Generic Class/Method: 不想寫多個<code>Service</code>去處理多個檔案，設計成泛型形式以符合各種檔案類型</li>
<li><code>Attribute</code>: 透過<code>Description Attribute</code>，註記其對應的<code>Comlumn</code>欄位順序</li>
<li><a href="https://github.com/jamesmh/coravel">Coravel</a>:透過該套件，將寫好的<code>Service</code>掛成排程任務</li>
<li>Extension Method:有一些通用的<code>Method</code>，不要落落等塞在一個Service中，因此轉換成可以共用的<code>Extension Method</code></li>
<li><a href="https://docs.microsoft.com/zh-tw/ef/core/">EFCore</a>:資料存取用開發套件</li>
</ul>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>這篇主要是存取<code>Attribute</code>的方式設定出泛型在指派值的邏輯，以筆者這套實作邏輯中會用到<code>Column</code>順序，這就因人而異，剛好筆者要解析的資料內容，會將每個<code>Column</code>的值使用一個特殊符號隔開，因此筆者設計一個<code>Column</code>順序的值設定於<code>Attribute</code>中，使泛型<code>Method</code>中取得<code>Type</code>的<code>GetProperties</code>方法並取得對應的<code>CustomAttribute</code>的設定內容，因而可以寫出共用的實體屬性值指派的商業邏輯。</p>
<p>以上述描述的情境來說，筆者不想要再宣告其他自定義的<code>Attribute</code>，因此偷懶使用既有的<code>Description Attribute</code>當作<code>Column</code>順序的設定值，示意如下</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Description(<span class="string">&quot;A.txt&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ADomainModel</span> : <span class="title">BaseModel</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Description(<span class="string">&quot;1&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> AProperty1 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    [<span class="meta">Description(<span class="string">&quot;2&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> AProperty2 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    [<span class="meta">Description(<span class="string">&quot;3&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> AProperty3 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>筆者將<code>Description Attribute</code>用得淋漓盡致，<code>Class</code>層級的<code>Description</code>中設定其對應的<code>txt檔案名稱</code>，<code>Property</code>層級的<code>Description</code>則設定其<code>Column</code>順序值。接著不想要寫落落等取得<code>Description Attribute</code>中的設定值，寫一個<code>Extension Method</code>，名為<code>CustomTypeExtension</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">CustomTypeExtension</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 取得Class層級的Attribute設定值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetDescription</span>(<span class="params">Type type</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> descriptions = (DescriptionAttribute[])</span><br><span class="line">            type.GetCustomAttributes(<span class="keyword">typeof</span>(DescriptionAttribute), <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (descriptions.Length == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> descriptions[<span class="number">0</span>].Description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取得Property層級的Attribute設定值</span></span><br><span class="line">    <span class="comment">// 包裝成Dictionary的形式將Property Name及Column順序整理起來</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Dictionary&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; <span class="title">GetPropertiesWithOrderDescription</span>(<span class="params">Type type</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Dictionary&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; propertyDic = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt;();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> property <span class="keyword">in</span> type.GetProperties())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> order = property.GetCustomAttribute&lt;DescriptionAttribute&gt;()?.Description;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(order) == <span class="literal">false</span>)</span><br><span class="line">                propertyDic.Add(<span class="built_in">int</span>.Parse(order), property.Name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> propertyDic;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接著寫一個共用的<code>Extension Method</code>，將透過<code>Activator.CreateInstance&lt;T&gt;()</code>初始化的實體，針對實體中的屬性指派值的商業邏輯抽離至<code>Extension Method</code>中</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ObjectExtension</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">List</span>&lt;<span class="title">TResult</span>&gt; <span class="title">GetModelList</span>&lt;<span class="title">TResult</span>&gt;(<span class="params"><span class="built_in">string</span> localFilePath</span></span></span><br><span class="line"><span class="params"><span class="function">        , Encoding encoding</span></span></span><br><span class="line"><span class="params"><span class="function">        , Dictionary&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; orderDict</span></span></span><br><span class="line"><span class="params"><span class="function">        , <span class="built_in">char</span> splictChar</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> modelList = <span class="keyword">new</span> List&lt;TResult&gt;();</span><br><span class="line">        <span class="comment">// 依照傳入的Encoding讀取檔案內容</span></span><br><span class="line">        <span class="keyword">using</span> <span class="keyword">var</span> sr = <span class="keyword">new</span> StreamReader(localFilePath, encoding);</span><br><span class="line">        <span class="keyword">while</span> (sr.Peek() &gt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> line = sr.ReadLine();</span><br><span class="line">            <span class="comment">// 防呆:若為空資料列則跳過</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(line))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 使用傳入的分隔符號分割資料</span></span><br><span class="line">            <span class="keyword">var</span> infoList = line.Split(splictChar);</span><br><span class="line">            <span class="comment">// 資料Binding</span></span><br><span class="line">            <span class="keyword">var</span> model = Activator.CreateInstance&lt;TResult&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; infoList.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> propertyInfo = <span class="keyword">typeof</span>(TResult).GetProperties()</span><br><span class="line">                    .First(x =&gt; x.Name == orderDict.First(x =&gt; x.Key == (i + <span class="number">1</span>)).Value);</span><br><span class="line">                propertyInfo.SetValue(model, infoList[i].Trim());</span><br><span class="line">            &#125;</span><br><span class="line">            modelList.Add(model);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> modelList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟著筆者來看看怎麼運用吧</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Startup.cs</span></span><br><span class="line"><span class="comment">// 記得使用Encoding為Big5則須於Startup中宣告定義以下語法</span></span><br><span class="line"><span class="comment">// Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用CustomTypeExtension Method</span></span><br><span class="line"><span class="keyword">var</span> fileName = CustomTypeExtension.GetDescription(_model.GetType());</span><br><span class="line"><span class="keyword">var</span> orderDict = CustomTypeExtension.GetPropertiesWithOrderDescription(_model.GetType());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用ObjectExtension Method</span></span><br><span class="line"><span class="keyword">var</span> filePath = Path.Combine(_env.ContentRootPath, <span class="string">&quot;upload&quot;</span>, <span class="string">&quot;Downloads&quot;</span>, fileName);</span><br><span class="line"><span class="keyword">var</span> modelList = ObjectExtension.GetModelList&lt;T&gt;(filePath, Encoding.GetEncoding(<span class="string">&quot;Big5&quot;</span>)</span><br><span class="line">	, orderDict, <span class="string">&#x27;=&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>透過此篇的解構，筆者相信真正的<code>Domain Service</code>會變得很乾淨，且此篇撰寫出來的Extension Method可以給其他服務使用，當然筆者最終的目標是將下載檔案，將檔案中的資料內容存進資料庫這樣的行為變成是一個透過設定就能使用的服務，離目標不遠了，下篇見啦。</p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>
]]></content>
      <categories>
        <category>dotnetcore</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>generic</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]泛型運用系列-Model設計篇</title>
    <url>/2022/01/14/dotnetcore-generic-series-model/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者日前工作環境中要實作，從某個<code>FTP</code>位置下載檔案，下載到檔案後將檔案內容轉成物件清單，存進資料庫中，接著這些檔案依照屬性不同，拆成四分檔案，有共同欄位，也有各自的欄位，資料表則依照最大化原則，將所有檔案欄位最大化後設計成對應的欄位，當然設計一個識別欄位:<code>EventType</code>，識別是哪個檔案的資料。最後這個檔案內容轉換成資料表中的資料，要掛在排程上面做運作，筆者簡單列一下此一系列的實作需要用到的概念與套件如下:</p>
<ul>
<li><a href="https://automapper.org/">AutoMapper</a>:運用於將檔案內容對應的物件轉成<code>EFCore</code>的物件時</li>
<li>Generic Class/Method: 不想寫多個<code>Service</code>去處理多個檔案，設計成泛型形式以符合各種檔案類型</li>
<li><code>Attribute</code>: 透過<code>Description Attribute</code>，註記其對應的<code>Comlumn</code>欄位順序</li>
<li><a href="https://github.com/jamesmh/coravel">Coravel</a>:透過該套件，將寫好的<code>Service</code>掛成排程任務</li>
<li>Extension Method:有一些通用的<code>Method</code>，不要落落等塞在一個<code>Service</code>中，因此轉換成可以共用的<code>Extension Method</code></li>
<li><a href="https://docs.microsoft.com/zh-tw/ef/core/">EFCore</a>:資料存取用開發套件</li>
</ul>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>此篇主要介紹若要設計成Generic Class/Method的形式，增加其擴充彈性，第一步就是要宣告<code>Model</code>，筆者這邊將該四個檔案共同欄位，設計成一個<code>Base Class</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">BaseModel</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Description(<span class="string">&quot;2&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> TransactionDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">string</span> EventCode &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    [<span class="meta">Description(<span class="string">&quot;1&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> BranchCode &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> AuditUser &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">&quot;SYS&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> DateTime AuditTime &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = DateTime.Now;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上設計來說，有以下的好處</p>
<ul>
<li>設定預設值，不用個別寫在四個不同Class中</li>
<li>接著同樣的欄位部分，也不用重複宣告，也省掉宣告<code>Attribute</code>屬性</li>
<li>將共同欄位中需要各別設定的欄位部份，將其設計成<code>abstract</code>的形式，讓各自子<code>Class</code>一定要宣告</li>
</ul>
<p>除了上述說的好處之外，泛型的Method在撰寫時需要存取到共有的欄位時，皆會設計一個<code>Base Class</code>或<code>Interface</code>，接著宣告泛型類別的<code>Constriant</code>宣告時指定為該<code>Base Class</code>或<code>Interface</code>，因此你可以在<code>Generic Method</code>中可以存取得到共有的欄位，然後做一些進階的邏輯處理，範例如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DomainGenericClass</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">	<span class="keyword">where</span> <span class="title">T</span> : <span class="title">BaseModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoProcess</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> model = Activator.CreateInstance&lt;T&gt;();</span><br><span class="line">        model.AuditUser = <span class="string">&quot;SYS&quot;</span>;</span><br><span class="line">        model.AuditTime = DateTime.Now;</span><br><span class="line">        <span class="comment">// Other Logic</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>筆者因在工作環境中常撰寫底層元件，因此很常使用泛型來開發讓各個專案使用的方法，這篇內容就是筆者常用的招數之一。接著用幾篇來說明這次實作的下載檔案並將檔案內容存至資料庫應用，下篇見了。</p>
<p>參考</p>
<ul>
<li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/generics/constraints-on-type-parameters">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/generics/constraints-on-type-parameters</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>generic</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]教學系列-指定sdk版本建立專案</title>
    <url>/2021/12/01/dotnetcore-specify-sdk/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者這邊遇到的問題是電腦環境中有多個<code>sdk</code>版本，需要指定比較舊的<code>sdk</code>版本來建立專案，筆者之前剛幫公司用基礎專案時遇到<code>3.1LTS</code>版本，因此有跟著升級，<code>dotnet 5</code>因不是LTS版本就沒有跟著升，就坐著等<code>dotnet 6</code>了。</p>
<p>依上述，筆者公司開發環境停留在<code>3.1</code>，但因前一陣子重灌電腦，重新安裝<code>Visual Studio 2019</code>後，預設安裝<code>dotnet 5</code>，筆者還特地下載<code>dotnet core 3.1 sdk</code>來安裝，因此環境中有兩個版本，但若沒有特別指定時，會以最新的<code>sdk</code>版本對應的範本產生，最後列出筆者電腦環境的<code>sdk</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet --list-sdks</span><br><span class="line"><span class="comment"># 輸出內容</span></span><br><span class="line">3.1.415 [C:\Program Files\dotnet\sdk]</span><br><span class="line">5.0.403 [C:\Program Files\dotnet\sdk]</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>筆者這邊會示範加入<code>options</code>前和加入<code>options</code>之後的效果，就此紀錄成功以指定<code>sdk</code>版本建立專案過程。</p>
<h2 id="預設範本"><a href="#預設範本" class="headerlink" title="預設範本"></a>預設範本</h2><p>筆者示範一下沒有加任何<code>options</code>時的建置專案</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet new webapi -o demo-5.API</span><br><span class="line"><span class="comment"># 輸出內容範本「ASP.NET Core Web API」已成功建立。</span></span><br><span class="line"></span><br><span class="line">正在處理建立後的動作...</span><br><span class="line">正在 demo-5.API\demo-5.API.csproj 上執行 <span class="string">&#x27;dotnet restore&#x27;</span>...</span><br><span class="line">  正在判斷要還原的專案...</span><br><span class="line">  已還原 &#123;path&#125;\<span class="built_in">source</span>\repos\demo-5.API\demo-5.API.csproj (177 ms 內)。</span><br><span class="line">還原成功。</span><br></pre></td></tr></table></figure>

<p>接著進到此範例API專案中，觀看一下<code>csproj</code>檔案</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> demo-5.API</span><br><span class="line">code demo-5.API.csproj</span><br></pre></td></tr></table></figure>

<p>使用vscode將專案檔案打開來看一下，就會發現是<code>TargetFramework</code>中的值為<code>net5.0</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">&quot;Microsoft.NET.Sdk.Web&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TargetFramework</span>&gt;</span>net5.0<span class="tag">&lt;/<span class="name">TargetFramework</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">RootNamespace</span>&gt;</span>demo_5.API<span class="tag">&lt;/<span class="name">RootNamespace</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">&quot;Swashbuckle.AspNetCore&quot;</span> <span class="attr">Version</span>=<span class="string">&quot;5.6.3&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="指定dotnet-sdk版本"><a href="#指定dotnet-sdk版本" class="headerlink" title="指定dotnet sdk版本"></a>指定dotnet sdk版本</h2><p>因為筆者公司開發專案還停留在<code>dotnet 3.1</code>，若自己寫一些demo或測試專案時，希望sdk版本也是一致，因此研究了一下<code>dotnet new cli</code>指令相關<code>options</code>，發現指定sdk版本是放在第二層，是跟著你的範本的，以上述筆者示範來說，<code>webapi</code>專案，<code>webapi</code>範本專案後面有諸多<code>options</code>可以設定，類似像預設不要設定<code>https</code>等等，其中<code>-f</code>這個<code>option</code>可以指定<code>sdk</code>版本，另，以官方文件指出，我們可以輸入的值如下:</p>
<table>
<thead>
<tr>
<th>SDK 版本</th>
<th>預設值</th>
</tr>
</thead>
<tbody><tr>
<td>5.0</td>
<td>net5.0</td>
</tr>
<tr>
<td>3.1</td>
<td>netcoreapp3.1</td>
</tr>
<tr>
<td>3.0</td>
<td>netcoreapp3.0</td>
</tr>
<tr>
<td>2.1</td>
<td>netcoreapp2.1</td>
</tr>
</tbody></table>
<p>看完對照表之後，跟著筆者下指令吧，目標是建置出來的<code>webapi</code>範本專案套用<code>dotnet core 3.1</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet new webapi -o demo-3.API -f netcoreapp3.1</span><br><span class="line"><span class="comment"># 輸出內容</span></span><br><span class="line">範本「ASP.NET Core Web API」已成功建立。</span><br><span class="line"></span><br><span class="line">正在處理建立後的動作...</span><br><span class="line">正在 demo-3.API\demo-3.API.csproj 上執行 <span class="string">&#x27;dotnet restore&#x27;</span>...</span><br><span class="line">  正在判斷要還原的專案...</span><br><span class="line">  已還原 &#123;path&#125;\<span class="built_in">source</span>\repos\demo-3.API\demo-3.API.csproj (59 ms 內)。</span><br><span class="line">還原成功。</span><br></pre></td></tr></table></figure>

<p>依樣使用vscode打開專案檔來看一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> demo-3.API\</span><br><span class="line">code demo-3.API.csproj</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">&quot;Microsoft.NET.Sdk.Web&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TargetFramework</span>&gt;</span>netcoreapp3.1<span class="tag">&lt;/<span class="name">TargetFramework</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">RootNamespace</span>&gt;</span>demo_3.API<span class="tag">&lt;/<span class="name">RootNamespace</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>從專案檔內容可以看出，成功建立<code>dotnet core3.1</code>範本專案</p>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p><code>dotnet cli</code>指令應有盡有，筆者趁這個機會，重新看了一下<code>cli</code>教學文件，再熟悉一下相關設定<code>options</code>，也是一個不錯的收穫，若有一樣的困擾的讀者，希望有幫助到你們。</p>
<p>參考</p>
<ul>
<li><a href="https://docs.microsoft.com/zh-tw/dotnet/core/tools/dotnet-new-sdk-templates#webapi">https://docs.microsoft.com/zh-tw/dotnet/core/tools/dotnet-new-sdk-templates#webapi</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
      </tags>
  </entry>
  <entry>
    <title>[Electron]vanilla js套件系列-Modal:modal-vanilla</title>
    <url>/2021/11/23/electron-series-vanillajs-modal/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者工作環境中前端使用<code>angular</code>框架撰寫，<code>model binding</code>根本無敵阿，且<code>typescript</code>語言，對於筆者這種後端人員來說，上手速度是頗快的，扯遠了，筆者要強調的是能用<code>angular</code>或其他兩大框架寫前端根本就是一等公民，來到<code>Electron</code>專案，是有神者有做<code>angular-electron</code>或<code>vue-electron</code>的版本，但筆者覺得自己前端實力不夠，怕handle不了，還是乖乖用純js撰寫其專案，根本就變回二等公民，這篇主要介紹其中需要<code>modal</code>功能時，挑選只有<code>vanilla js</code>的<code>modal</code>套件來實作。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><h2 id="引入modal-min-js"><a href="#引入modal-min-js" class="headerlink" title="引入modal.min.js"></a>引入modal.min.js</h2><p>筆者這邊使用的是<a href="https://github.com/KaneCohen/modal-vanilla">modal-vanilla</a>，引用方式也滿簡單的，只要從該<code>github</code>連結中進到<code>dist</code>資料夾，下在<code>modal.min.js</code>到專案中引入即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;./scripts/modal.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>筆者這邊測試發現，需要引入bootstrap的css才會正常作業</p>
</blockquote>
<h2 id="宣告Modal區塊"><a href="#宣告Modal區塊" class="headerlink" title="宣告Modal區塊"></a>宣告Modal區塊</h2><p>接著使用官方的範例<code>code</code>吧，宣告一個modal區塊</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;static-modal&quot;</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">role</span>=<span class="string">&quot;dialog&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Close&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span>×<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;modal-title&quot;</span>&gt;</span>Modal title<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>One fine body…<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span>OK<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal-content --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal-dialog --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal --&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="撰寫Modal開啟按鈕事件"><a href="#撰寫Modal開啟按鈕事件" class="headerlink" title="撰寫Modal開啟按鈕事件"></a>撰寫Modal開啟按鈕事件</h2><p>接著寫一段script，也是照著官方教學，但首先要放置一個對應的button</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;mb-3 mt-3 js-static-modal-toggle-main btn btn-lg btn-primary&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span>Show Me The Modal<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--script--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span></span></span><br><span class="line"><span class="language-javascript">    .<span class="title function_">querySelector</span>(<span class="string">&quot;.js-static-modal-toggle-main&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    .<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">new</span> <span class="title class_">Modal</span>(&#123; <span class="attr">el</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;static-modal&quot;</span>) &#125;).<span class="title function_">show</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p>組合上述片段程式碼們</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Demo Modal<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">integrity</span>=<span class="string">&quot;sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;mb-3 mt-3 js-static-modal-toggle-main btn btn-lg btn-primary&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span>Show Me The Modal<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;static-modal&quot;</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">role</span>=<span class="string">&quot;dialog&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">              <span class="attr">type</span>=<span class="string">&quot;button&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;close&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">aria-label</span>=<span class="string">&quot;Close&quot;</span></span></span><br><span class="line"><span class="tag">            &gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span>×<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;modal-title&quot;</span>&gt;</span>Modal title<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>One fine body…<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span></span><br><span class="line">              Close</span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span></span><br><span class="line">              OK</span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- /.modal-content --&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- /.modal-dialog --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /.modal --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./scripts/modal.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span></span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">querySelector</span>(<span class="string">&quot;.js-static-modal-toggle-main&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">new</span> <span class="title class_">Modal</span>(&#123; <span class="attr">el</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;static-modal&quot;</span>) &#125;).<span class="title function_">show</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="實際效果"><a href="#實際效果" class="headerlink" title="實際效果"></a>實際效果</h2><p>實際效果如下，畫面上有一顆按鈕，按下後會浮出<code>modal</code>視窗，完美</p>
<img src="/2021/11/23/electron-series-vanillajs-modal/Untitled.png" class="" title="[Modal浮出效果]">

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>筆者覺得<code>gihub</code>上的大神們都很強，該套件就是盡量寫成跟<code>bootstrap</code>的<code>modal</code>使用方式很類似，若你習慣使用<code>bootstrap modal</code>，這個應該很容易上手，筆者這邊只做了簡單的示範，還有事件可以攔截擴充，應該就以<code>vanilla js</code>的方式解決，已經非常足夠了。</p>
<p>參考</p>
<ul>
<li><a href="https://kanecohen.github.io/modal-vanilla/">https://kanecohen.github.io/modal-vanilla/</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>electron</category>
      </categories>
      <tags>
        <tag>electron</tag>
        <tag>vanilla-js</tag>
      </tags>
  </entry>
  <entry>
    <title>[Electron]vanilla js套件系列-Loading效果</title>
    <url>/2021/11/23/electron-series-vanillajs-loading/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者這邊的主要遇到的情境是，因為要抓攝影鏡頭的視訊<code>streaming</code>到畫面中的<code>Video tag</code>上，但初始化需要一點時間，導致使用者尚未初始化完成前就去按下截圖按鈕，導致程式邏輯錯亂，筆者第一想到的就是加上<code>loading</code>效果，就如同前面幾篇講到的，<code>electron</code>環境，筆者這邊希望使用<code>Vanilla js</code>的解法，幸好有找到解法，此篇就以介紹這個解法為主，跟著筆者一起套上<code>loading</code>效果吧。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>筆者會使用<a href="/2021/11/23/electron-series-vanillajs-listjs/" title="[Electron]vanilla js套件系列-listjs">[Electron]vanilla js套件系列-listjs</a>的例子，繼續完成其<code>loading</code>效果的<code>demo</code>，筆者想要示範的效果是在<code>http request</code>打出去時，顯示<code>loading</code>效果，<code>response</code>回來後將<code>loading</code>效果關閉，滿適合用這個情境來示範的。</p>
<h2 id="宣告CSS"><a href="#宣告CSS" class="headerlink" title="宣告CSS"></a>宣告CSS</h2><p>筆者這邊就直接參考範例中的css，直接貼上</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Absolute Center Spinner */</span></span><br><span class="line"><span class="selector-class">.loading</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2em</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">2em</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: show;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* Transparent Overlay */</span></span><br><span class="line">  <span class="selector-class">.loading</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* :not(:required) hides these rules from IE9 and below */</span></span><br><span class="line">  <span class="selector-class">.loading</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:required</span>) &#123;</span><br><span class="line">    <span class="comment">/* hide &quot;loading...&quot; text */</span></span><br><span class="line">    <span class="attribute">font</span>: <span class="number">0</span>/<span class="number">0</span> a;</span><br><span class="line">    <span class="attribute">color</span>: transparent;</span><br><span class="line">    <span class="attribute">text-shadow</span>: none;</span><br><span class="line">    <span class="attribute">background-color</span>: transparent;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.loading</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:required</span>)<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">0.5em</span>;</span><br><span class="line">    -webkit-<span class="attribute">animation</span>: spinner <span class="number">1500ms</span> infinite linear;</span><br><span class="line">    -moz-<span class="attribute">animation</span>: spinner <span class="number">1500ms</span> infinite linear;</span><br><span class="line">    -ms-<span class="attribute">animation</span>: spinner <span class="number">1500ms</span> infinite linear;</span><br><span class="line">    -o-<span class="attribute">animation</span>: spinner <span class="number">1500ms</span> infinite linear;</span><br><span class="line">    <span class="attribute">animation</span>: spinner <span class="number">1500ms</span> infinite linear;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">0.5em</span>;</span><br><span class="line">    -webkit-<span class="attribute">box-shadow</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.75</span>) <span class="number">1.5em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.75</span>) <span class="number">1.1em</span> <span class="number">1.1em</span> <span class="number">0</span> <span class="number">0</span>, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.75</span>) <span class="number">0</span> <span class="number">1.5em</span> <span class="number">0</span> <span class="number">0</span>, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.75</span>) -<span class="number">1.1em</span> <span class="number">1.1em</span> <span class="number">0</span> <span class="number">0</span>, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>) -<span class="number">1.5em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>) -<span class="number">1.1em</span> -<span class="number">1.1em</span> <span class="number">0</span> <span class="number">0</span>, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.75</span>) <span class="number">0</span> -<span class="number">1.5em</span> <span class="number">0</span> <span class="number">0</span>, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.75</span>) <span class="number">1.1em</span> -<span class="number">1.1em</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.75</span>) <span class="number">1.5em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.75</span>) <span class="number">1.1em</span> <span class="number">1.1em</span> <span class="number">0</span> <span class="number">0</span>, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.75</span>) <span class="number">0</span> <span class="number">1.5em</span> <span class="number">0</span> <span class="number">0</span>, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.75</span>) -<span class="number">1.1em</span> <span class="number">1.1em</span> <span class="number">0</span> <span class="number">0</span>, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.75</span>) -<span class="number">1.5em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.75</span>) -<span class="number">1.1em</span> -<span class="number">1.1em</span> <span class="number">0</span> <span class="number">0</span>, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.75</span>) <span class="number">0</span> -<span class="number">1.5em</span> <span class="number">0</span> <span class="number">0</span>, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.75</span>) <span class="number">1.1em</span> -<span class="number">1.1em</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* Animation */</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">@-webkit-keyframes</span> spinner &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">      -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">      -moz-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">      -ms-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">      -o-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">      -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">      -moz-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">      -ms-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">      -o-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@-moz-keyframes</span> spinner &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">      -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">      -moz-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">      -ms-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">      -o-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">      -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">      -moz-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">      -ms-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">      -o-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@-o-keyframes</span> spinner &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">      -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">      -moz-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">      -ms-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">      -o-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">      -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">      -moz-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">      -ms-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">      -o-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@keyframes</span> spinner &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">      -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">      -moz-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">      -ms-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">      -o-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">      -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">      -moz-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">      -ms-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">      -o-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="宣告html區塊"><a href="#宣告html區塊" class="headerlink" title="宣告html區塊"></a>宣告html區塊</h2><p>筆者這邊就選擇<code>body</code>區塊中貼上</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;loading&quot;</span> <span class="attr">class</span>=<span class="string">&quot;loading&quot;</span> <span class="attr">onClick</span>=<span class="string">&quot;hideSpinner()&quot;</span>&gt;</span></span><br><span class="line">        Loading<span class="symbol">&amp;#8230;</span>     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--以下省略--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="宣告JS"><a href="#宣告JS" class="headerlink" title="宣告JS"></a>宣告JS</h2><p>先定義好<code>show</code>跟<code>hide spinner</code>的function</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> loadingDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;loading&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showSpinner</span>(<span class="params"></span>) &#123;</span><br><span class="line">  loadingDiv.<span class="property">style</span>.<span class="property">visibility</span> = <span class="string">&#x27;visible&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hideSpinner</span>(<span class="params"></span>) &#123;</span><br><span class="line">  loadingDiv.<span class="property">style</span>.<span class="property">visibility</span> = <span class="string">&#x27;hidden&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="實際呼叫"><a href="#實際呼叫" class="headerlink" title="實際呼叫"></a>實際呼叫</h2><p>依照筆者的情境，呼叫其上章節中所撰寫的show及hide spinner function</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// window load好後直接顯示spinner</span></span><br><span class="line"><span class="title function_">showSpinner</span>();</span><br><span class="line">axios</span><br><span class="line">  .<span class="title function_">get</span>(<span class="string">&quot;https://jsonplaceholder.typicode.com/posts&quot;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> options = &#123;</span><br><span class="line">        <span class="attr">valueNames</span>: [ <span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;body&#x27;</span>, <span class="string">&#x27;userId&#x27;</span> ],</span><br><span class="line">        <span class="attr">item</span>: <span class="string">&#x27;&lt;tr&gt;&lt;td class=&quot;id&quot;&gt;&lt;/td&gt;&lt;td class=&quot;title&quot;&gt;&lt;/td&gt;&lt;td class=&quot;body&quot;&gt;&lt;/td&gt;&lt;td class=&quot;userId&quot;&gt;&lt;/td&gt;&lt;/tr&gt;&#x27;</span>,</span><br><span class="line">        <span class="attr">page</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">pagination</span>: <span class="literal">true</span></span><br><span class="line">        &#125;;</span><br><span class="line">    <span class="keyword">var</span> values = res.<span class="property">data</span>;</span><br><span class="line">    <span class="keyword">var</span> postList = <span class="keyword">new</span> <span class="title class_">List</span>(<span class="string">&#x27;table-list&#x27;</span>, options, values);</span><br><span class="line">    <span class="comment">// 收到response後hide spinner</span></span><br><span class="line">    <span class="title function_">hideSpinner</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="comment">// 發生錯誤也要先hide spinner後執行自身邏輯</span></span><br><span class="line">    <span class="title function_">hideSpinner</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Error: &quot;</span>, err)</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<div class="admonition error"><p>以<code>loading</code>效果顯示情境來說比較適合有<code>errorcallback</code>的使用情境，不然發生錯誤時<code>loading</code>效果會一直在，使用者體驗會扣分，最後記得在<code>errorcallback</code>中呼叫hideSpinner</p>
</div>

 

<img src="/2021/11/23/electron-series-vanillajs-loading/Untitled.png" class="" title="[http request過程中顯示loading效果]">

<img src="/2021/11/23/electron-series-vanillajs-loading/Untitled-1.png" class="" title="[response收到後隱藏loading效果]">

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>這篇就到這邊了，<code>electron</code>環境激發筆者開發各種<code>Vanilla js</code>的解決方案，雖辛苦，也是另一種收穫，收集各種<code>Vanilla js</code>的解決方案，太棒了，又解決了一個筆者頭痛的問題。</p>
<p>參考</p>
<ul>
<li><a href="https://codepen.io/AshutoshD/pen/dMEGqM">https://codepen.io/AshutoshD/pen/dMEGqM</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>electron</category>
      </categories>
      <tags>
        <tag>electron</tag>
        <tag>vanilla-js</tag>
      </tags>
  </entry>
  <entry>
    <title>[Electron]vanilla js套件系列-listjs</title>
    <url>/2021/11/23/electron-series-vanillajs-listjs/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者與<code>Electron</code>淵源非常深，有一次筆者在上工之前的空檔，有認識的人介紹了一個硬體介接的軟體專案，要在樹梅派上面執行，當時筆者心目中有兩個選擇，一個是<code>Python</code>，一個是<code>Electron</code>，不過<code>Python</code>則需要再找一些<code>UI framework</code>來實作畫面部份，那時候對於<code>Electron</code>也是一份好奇，用<code>html css</code>就能調出畫面，還可以直接套用<code>bootstrap</code>，簡直完美，毅然決然決定使用<code>Electron</code>來開發，但開發過程有很多地方，尤其是硬體介接的部份，卡了很久，眼看上線時間快到，最終放棄作罷，最後使用<code>Python+Tkinter</code>完成該專案，實為可惜。</p>
<span id="more"></span>

<p>這次有專案要實作<code>Streaming</code>的小專案，筆者又燃起Electron魂，想到html5的media相關API非常成熟，直接實作了，但第一版有使用jquery刻一些互動效果，要開發進階功能實遇到太多引用問題了，換回最原始使用<code>Vanilla js</code>的方式撰寫，其中學會技巧就是要找到純js的套件時需要下關鍵字<code>Vanilla</code>，才會找到比較符合期待的套件，該篇主題為實作<code>table</code>的<code>搜尋</code>及<code>pagination</code>時找到的套件介紹。</p>
<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>筆者盡量模擬<code>Electron</code>開發環境，大概就是不要引用<code>jquery</code>相關套件，連<code>bootstrap</code>部份也只引入<code>css</code>部份而已，再則盡量使用<code>script src</code>宣告的方式引入<code>js</code>相關套件，筆者針對此篇的需求，使用的是<a href="https://listjs.com/">list.js</a>，跟著筆者實作吧。</p>
<h2 id="Public-API"><a href="#Public-API" class="headerlink" title="Public API"></a>Public API</h2><p>筆者為示範，必須得找到一個公開的API，筆者撰寫的electron專案使用情境是會有一個<code>Sqlite</code>檔案資料庫，使用<code>knex</code>套件存取，筆者會有另一篇介紹<code>knex</code>套件的文章，此篇就以存取公開API的結果來呈現其table的結構。</p>
<p>筆者之前在寫vue系列實就找到過一個public api，繼續沿用下去了，<a href="https://jsonplaceholder.typicode.com/posts">Posts API</a>，另，筆者者邊會使用<code>axios</code>套件實作<code>http request</code>。</p>
<p>實際撰寫的程式碼如下</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/axios/0.24.0/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    axios</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      .<span class="title function_">get</span>(<span class="string">&quot;https://jsonplaceholder.typicode.com/posts&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 到時寫處理邏輯在這</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Error: &quot;</span>, err));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<img src="/2021/11/23/electron-series-vanillajs-listjs/Untitled.png" class="" title="[public api結果]">

<p>可以看到印出的結果，欄位分別為</p>
<ul>
<li>id</li>
<li>title</li>
<li>body</li>
<li>userId</li>
</ul>
<p>存取API部份就先寫到這邊，接下來介紹Html結構及listjs的宣告方式。</p>
<h2 id="List-js宣告"><a href="#List-js宣告" class="headerlink" title="List.js宣告"></a>List.js宣告</h2><p>筆者這邊套用官方文件教學中的<a href="https://listjs.com/examples/new-list/">NewList</a>這個章節的應用，意思就是<code>html</code>結構中的<code>table</code>是空的，全部資料由外部注入，照著刻應該沒有甚麼問題，上章節已經知道欄位了，就照著欄位在Listjs的初始化options中宣告</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">    <span class="attr">valueNames</span>: [ <span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;body&#x27;</span>, <span class="string">&#x27;userId&#x27;</span> ],</span><br><span class="line">    <span class="comment">// listjs塞入資料實的結構，筆者這邊使用table結構，因此宣告成tr&gt;td結構</span></span><br><span class="line">    <span class="attr">item</span>: <span class="string">&#x27;&lt;tr&gt;&lt;td class=&quot;id&quot;&gt;&lt;/td&gt;&lt;td class=&quot;title&quot;&gt;&lt;/td&gt;&lt;td class=&quot;body&quot;&gt;&lt;/td&gt;&lt;td class=&quot;userId&quot;&gt;&lt;/td&gt;&lt;/tr&gt;&#x27;</span>,</span><br><span class="line">    <span class="attr">page</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">pagination</span>: <span class="literal">true</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="keyword">var</span> values = res.<span class="property">data</span>;</span><br><span class="line"><span class="keyword">var</span> postList = <span class="keyword">new</span> <span class="title class_">List</span>(<span class="string">&#x27;table-list&#x27;</span>, options, values);</span><br></pre></td></tr></table></figure>

<p>上述程式碼對應的html結構為</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--listjs對應的tag--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;table-list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-3 mb-3 mt-3&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--只要宣告input並且class設定為search即可擁有listjs的搜尋功能--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;search form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Search&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pagination&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-bordered table-hover&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>Id<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>抬頭<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>內文<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>使用者<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--listjs預設抓class名稱為list的區塊當作資料塞入的識別--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">          </span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Pagination及美化版面"><a href="#Pagination及美化版面" class="headerlink" title="Pagination及美化版面"></a>Pagination及美化版面</h2><p>Pagination部份滿簡單的，主要在options中設定</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="attr">page</span>: <span class="number">10</span>,<span class="comment">// 一頁幾筆資料設定值</span></span><br><span class="line"><span class="attr">pagination</span>: <span class="literal">true</span> <span class="comment">// 預設為false</span></span><br></pre></td></tr></table></figure>

<p>但是預設效果滿醜的，需要修改它，筆者也不是甚麼專業的UI/UX，想要直接套用<code>bootstrap pagination</code>的效果，但是<code>listjs</code>沒有開放設定<code>pagination</code>中的每一個<code>item</code>套用的自定義<code>class</code>，不過它的套用<code>tag</code>是固定的，最外層的<code>class</code>預設是<code>pagination</code>，但可以透過<code>options</code>設定可以更改，但內層的是不能變更</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;ul <span class="keyword">class</span>=<span class="string">&quot;pagination&quot;</span>&gt;</span><br><span class="line">	&lt;!--依照是否該頁碼與當頁頁碼相符而自動套上active--&gt;</span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;page&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<p>要直接抄<code>bootstrap pagination</code>是無法靠靜態檔案的，因為<code>bootstrap</code>最新的都是<code>scss</code>版本了，需要執行中的頁面才可以看出完整的<code>css</code>設定，筆者透過<a href="https://getbootstrap.com/docs/5.1/components/pagination/">bootstrap pagination</a>，參考了一下其結構後宣告為</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    <span class="selector-class">.pagination</span>&#123;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">padding-left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">list-style</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">li</span><span class="selector-class">.active</span> <span class="selector-class">.page</span> &#123;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">3</span>;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#0d6efd</span>;</span><br><span class="line">        <span class="attribute">border-color</span>: <span class="number">#0d6efd</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">li</span> <span class="selector-class">.page</span> &#123;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0.375rem</span> <span class="number">0.75rem</span>;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#0d6efd</span>;</span><br><span class="line">        <span class="attribute">text-decoration</span>: none;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#dee2e6</span>;</span><br><span class="line">        <span class="attribute">transition</span>: color .<span class="number">15s</span> ease-in-out,background-color .<span class="number">15s</span> ease-in-out,border-color .<span class="number">15s</span> ease-in-out,box-shadow .<span class="number">15s</span> ease-in-out;</span><br><span class="line">    &#125;       </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p>最後看一下組合之後的完整程式碼</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">link</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">integrity</span>=<span class="string">&quot;sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Demo Listjs<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="selector-class">.pagination</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">display</span>: flex;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">padding-left</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">list-style</span>: none;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="selector-tag">li</span><span class="selector-class">.active</span> <span class="selector-class">.page</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">z-index</span>: <span class="number">3</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">background-color</span>: <span class="number">#0d6efd</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">border-color</span>: <span class="number">#0d6efd</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="selector-tag">li</span> <span class="selector-class">.page</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">padding</span>: <span class="number">0.375rem</span> <span class="number">0.75rem</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">position</span>: relative;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">display</span>: block;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">color</span>: <span class="number">#0d6efd</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">text-decoration</span>: none;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#dee2e6</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">transition</span>: color .<span class="number">15s</span> ease-in-out,background-color .<span class="number">15s</span> ease-in-out,border-color .<span class="number">15s</span> ease-in-out,box-shadow .<span class="number">15s</span> ease-in-out;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        &#125;       </span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;table-list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-3 mb-3 mt-3&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;search form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Search&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pagination&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-bordered table-hover&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Id<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>抬頭<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>內文<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>使用者<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                </span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/list.js/2.3.1/list.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/axios/0.24.0/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        axios</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          .<span class="title function_">get</span>(<span class="string">&quot;https://jsonplaceholder.typicode.com/posts&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> options = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">valueNames</span>: [ <span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;body&#x27;</span>, <span class="string">&#x27;userId&#x27;</span> ],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">item</span>: <span class="string">&#x27;&lt;tr&gt;&lt;td class=&quot;id&quot;&gt;&lt;/td&gt;&lt;td class=&quot;title&quot;&gt;&lt;/td&gt;&lt;td class=&quot;body&quot;&gt;&lt;/td&gt;&lt;td class=&quot;userId&quot;&gt;&lt;/td&gt;&lt;/tr&gt;&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">page</span>: <span class="number">10</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">pagination</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> values = res.<span class="property">data</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> postList = <span class="keyword">new</span> <span class="title class_">List</span>(<span class="string">&#x27;table-list&#x27;</span>, options, values);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// console.log(res.data);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Error: &quot;</span>, err));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="實際效果"><a href="#實際效果" class="headerlink" title="實際效果"></a>實際效果</h2><p>做到這邊，告一段落了，完美的只使用<code>Vanilla js</code>就能做到<code>table</code>的<code>search</code>, <code>pagination</code>，太棒了</p>
<img src="/2021/11/23/electron-series-vanillajs-listjs/Untitled-1.png" class="" title="[分頁效果]">

<img src="/2021/11/23/electron-series-vanillajs-listjs/Untitled-2.png" class="" title="[搜尋效果]">

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>筆者在<code>Electron</code>專案套用也是順利地套上去了，由於專案內容不能貼出，只能用html靜態檔案的方式做<code>demo</code>，希望有幫助到跟筆者有一樣需求的人。</p>
<p>參考</p>
<ul>
<li><a href="https://listjs.com/examples/new-list/">https://listjs.com/examples/new-list/</a></li>
<li><a href="https://getbootstrap.com/docs/5.1/components/pagination/">https://getbootstrap.com/docs/5.1/components/pagination/</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>electron</category>
      </categories>
      <tags>
        <tag>electron</tag>
        <tag>vanilla-js</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular]技巧系列-BarcodeListener</title>
    <url>/2021/11/20/angular-series-barcode-listener/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者在工作環境中，有一個小週邊系統是給分行人員使用，其中有一段是需要透過<code>Barcode Scanner</code>掃描其帳單中的條碼，作為<code>Form</code>表單送出時的一個欄位，筆者看同事一開始的做法是在畫面上放一個<code>Input</code>，其游標須<code>Focus</code>在該<code>Input</code>上，然後按下<code>Barcode Scanner</code>去掃描條碼。</p>
<p>上述情境會延伸一些問題，使用者將游標移至其他表單元件或者系統上會有<code>Toast</code>訊息，使用者可能會點擊其<code>Toast</code>訊息關閉，上述零零總總情境後，若要掃描條碼，必須得將游標自動<code>Focus</code>回條碼所屬的<code>Input</code>上，極為困難，要寫很多code去做到；若沒有自動將游標<code>Focus</code>回對應的<code>Input</code>上，使用者會覺得困擾，每次掃描前都要移動滑鼠，將游標移回條碼所屬的<code>Input</code>上，此篇內容就是要解決上述遇到的問題。</p>
<span id="more"></span>

<p>筆者這邊的開發環境如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm --version</span><br><span class="line">6.14.11</span><br><span class="line"></span><br><span class="line">node --version</span><br><span class="line">v10.24.0</span><br><span class="line"></span><br><span class="line">ng --version</span><br><span class="line">_                      _                 ____ _     ___</span><br><span class="line">    / \   _ __   __ _ _   _| | __ _ _ __     / ___| |   |_ _|</span><br><span class="line">   / △ \ | <span class="string">&#x27;_ \ / _` | | | | |/ _` | &#x27;</span>__|   | |   | |    | |</span><br><span class="line">  / ___ \| | | | (_| | |_| | | (_| | |      | |___| |___ | |</span><br><span class="line"> /_/   \_\_| |_|\__, |\__,_|_|\__,_|_|       \____|_____|___|</span><br><span class="line">                |___/</span><br><span class="line"></span><br><span class="line">Angular CLI: 11.2.15</span><br><span class="line">Node: 10.24.0</span><br><span class="line">OS: win32 x64</span><br><span class="line"></span><br><span class="line">Angular: 11.2.14</span><br><span class="line">... animations, common, compiler, compiler-cli, core, forms</span><br><span class="line">... platform-browser, platform-browser-dynamic, router</span><br><span class="line">Ivy Workspace: Yes</span><br><span class="line"></span><br><span class="line">Package                         Version</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">@angular-devkit/architect       0.1102.15</span><br><span class="line">@angular-devkit/build-angular   0.1102.15</span><br><span class="line">@angular-devkit/core            11.2.15</span><br><span class="line">@angular-devkit/schematics      11.2.15</span><br><span class="line">@angular/cli                    11.2.15</span><br><span class="line">@schematics/angular             11.2.15</span><br><span class="line">@schematics/update              0.1102.15</span><br><span class="line">rxjs                            6.6.7</span><br><span class="line">typescript                      4.1.6</span><br></pre></td></tr></table></figure>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>筆者第一份工作就是做<code>MES</code>相關軟體，其客戶環境都在工廠中，很常接觸到使用<code>Barcode Scanner</code>的環境，其相對應的系統上的很多資料是從<code>Barcode Scanner</code>讀取取得，那時就有一個觀念是<code>監聽Keyboard</code>事件，因<code>Barcode Scanner</code>的特性，分為兩種</p>
<ul>
<li>一種是<code>Prefix, Suffix</code>特殊符號的方式判斷開始、結束，會有一個特殊的<code>Prefix Code</code>，結尾都會帶<code>Enter</code>鍵，就知道是從<code>Barcode Scanner</code>輸入值r</li>
<li>一種是<code>Time-based</code>的方式判斷，畢竟人工輸入無法這麼快速，<code>Barcode Scanner</code>掃描卻非常快速，利用這個特點，我們可以監聽全域的<code>Keypress</code>事件，並且設定<code>timeout</code>時間非常短暫，時間到將暫存的chars往外拋並清空，再回到初始狀態</li>
</ul>
<p>第一種的有幾個現成包好的<code>angular</code>套件可以使用，但筆者的情境可能無法適用</p>
<ul>
<li>一是無法對於每個分行用甚麼<code>barcode scanner</code>做一些限制</li>
<li>二來不太可能一個新的<code>Barcode Scanner</code>就得幫它設定好<code>Prefix</code>跟<code>Suffix</code></li>
</ul>
<p>筆者選擇第二種<code>Time-based</code>的方式判斷，跟著筆者實作測試看看吧。</p>
<h2 id="建立Angular專案"><a href="#建立Angular專案" class="headerlink" title="建立Angular專案"></a>建立Angular專案</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng new demo-code</span><br><span class="line"><span class="built_in">cd</span> demo-code</span><br><span class="line">code .</span><br></pre></td></tr></table></figure>

<h2 id="撰寫Barcode監聽程式"><a href="#撰寫Barcode監聽程式" class="headerlink" title="撰寫Barcode監聽程式"></a>撰寫Barcode監聽程式</h2><p>建立好Angular專案，實作其程式，為demo，就直接寫在<code>app.component.ts</code>中</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">HostListener</span>, <span class="title class_">OnDestroy</span>, <span class="title class_">OnInit</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FormBuilder</span>, <span class="title class_">FormGroup</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/forms&#x27;</span>;</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./app.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.scss&#x27;</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span>, <span class="title class_">OnDestroy</span> &#123;</span><br><span class="line">  title = <span class="string">&#x27;demo-barcode&#x27;</span>;</span><br><span class="line">  pressed = <span class="literal">false</span>;</span><br><span class="line">  <span class="attr">chars</span>: <span class="built_in">any</span>[] = [];</span><br><span class="line">  <span class="attr">frmDemo</span>: <span class="title class_">FormGroup</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> builder: FormBuilder</span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">ngOnDestroy</span>(): <span class="built_in">void</span> &#123;&#125;</span><br><span class="line">  <span class="title function_">ngOnInit</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">frmDemo</span> = <span class="variable language_">this</span>.<span class="property">builder</span>.<span class="title function_">group</span>(&#123;</span><br><span class="line">      <span class="attr">barcode</span>: [<span class="string">&#x27;&#x27;</span>],</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@HostListener</span>(<span class="string">&#x27;document:keypress&#x27;</span>, [<span class="string">&#x27;$event&#x27;</span>])</span><br><span class="line">  <span class="title function_">handleKeyboardEvent</span>(<span class="params">e: KeyboardEvent</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">which</span> &gt;= <span class="number">48</span> &amp;&amp; e.<span class="property">which</span> &lt;= <span class="number">57</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">chars</span>.<span class="title function_">push</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(e.<span class="property">which</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">pressed</span> == <span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">chars</span>.<span class="property">length</span> &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> barcode = <span class="variable language_">this</span>.<span class="property">chars</span>.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">frmDemo</span>.<span class="title function_">get</span>(<span class="string">&#x27;barcode&#x27;</span>).<span class="title function_">setValue</span>(barcode);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">chars</span> = [];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pressed</span> = <span class="literal">false</span>;</span><br><span class="line">      &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pressed</span> = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">  &#123;&#123; frmDemo.value | json &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="實際執行"><a href="#實際執行" class="headerlink" title="實際執行"></a>實際執行</h2><p>實作完程式，執行看看吧，要準備好Barcode Scanner及各式各樣的條碼</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure>

<p>在瀏覽器中開啟其對應網址，<code>http://localhost:4200</code>，實作程式畫面中印出<code>Form Value</code>即可知道有無掃描監聽成功，實際效果如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;barcode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0116100001088&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>使用<code>Time-based</code>的特性，搭配<code>全域Keypress</code>事件取得<code>Barcode Scanner</code>掃描出來的值變得如此簡單，不用再為<code>Focus</code>來<code>Focus</code>去而煩惱，不過這個只是<code>demo</code>版本，實際應用時，可能也要加一些防呆機制，若條碼有規則，在<code>timeout function</code>中做一個實際的驗證，這篇就到這邊了，希望有幫助到各位。</p>
<p>參考</p>
<ul>
<li><a href="https://github.com/pridemusvaire/barcode-scanner-js/blob/master/barcode-scanner/code-with-comments.js">https://github.com/pridemusvaire/barcode-scanner-js/blob/master/barcode-scanner/code-with-comments.js</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>barcodelistener</tag>
      </tags>
  </entry>
  <entry>
    <title>[Rust]教學系列:Windows疑難雜症解決</title>
    <url>/2021/11/20/rust-series-windows-execute/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者這邊主要在Windows環境中安裝好<code>Rust</code>開發環境後，可以透過<code>rustc —version</code>，可以順利顯示出<code>Rust</code>版本號，<code>cargo new</code>也沒問題，但<code>cargo run</code>時，會出現錯誤訊息:</p>
<blockquote>
<p>linking with <code>link.exe</code> failed: exit code: 1181</p>
</blockquote>
<p>找了一下，是少安裝<code>C++ build tools</code>，其實<code>Rust</code>官方網站上的Install頁面就有提醒，除了安裝檔之外，也要記得安裝<code>C++build tools</code>。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>筆者這邊是透過<code>Visual Studio Installer</code>安裝相關檔案，但安裝完相關檔案後，發現還是不行，主要是透過參考中的<code>Stackoverflow</code>的一個回答</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rustup toolchain install stable-x86_64-pc-windows-gnu</span><br><span class="line">rustup default stable-x86_64-pc-windows-gnu</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p><code>Windows</code>環境真的會比較多問題，不像<code>Linux</code>，<code>Mac</code>只要下一個指令就完成，筆者一開始也是試著使用<code>WSL2</code>環境中的<code>Ubuntu</code>環境中建置，但因為還是會開<code>Windows</code>環境中的<code>Visual Studio Code</code>當作開發工具來撰寫Rust語言的Demo Code，因此會安裝一些<code>Rust</code>開發相關的<code>Extension</code>，此時這些安裝套件也會用到<code>Windows</code>環境本身的<code>Rust</code>開發環境，這樣才會有相關的<code>language server</code>服務，可以順利的程式碼高亮以及<code>Intellisense</code>，才有辦法往下寫，因此必須得在<code>Windows</code>環境中安裝<code>Rust</code>開發環境，以此紀錄。</p>
<p>參考</p>
<ul>
<li><a href="https://stackoverflow.com/questions/55603111/unable-to-compile-rust-hello-world-on-windows-linker-link-exe-not-found/55603112#55603112">https://stackoverflow.com/questions/55603111/unable-to-compile-rust-hello-world-on-windows-linker-link-exe-not-found/55603112#55603112</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>rust</category>
      </categories>
      <tags>
        <tag>rust</tag>
      </tags>
  </entry>
  <entry>
    <title>[Windows]技巧系列-透過Proxy下載設定</title>
    <url>/2021/11/20/windows-series-problem-proxy/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者這邊想要在工作環境中安裝Rust開發環境，以利撰寫部落格會使用到的<code>Demo Project</code>，因此想要在工作環境<code>Windows</code>環境中安裝其開發環境，以<code>Rust</code>官方網站上面的教學，基本上只要下載好<code>Install</code>的<code>exe</code>檔案，應該就會搞定。</p>
<p>但由於筆者環境有防火牆設定，需要透過<code>Proxy</code>才能往外連線並下載，就像筆者跟同事們都會設定<code>.npmrc</code>或者<code>vscode</code>中的<code>proxy</code>設定以及<code>.gitconfig</code>皆會設定其<code>http_proxy</code>的連結，但這種按下<code>exe</code>檔案這種安裝方式，筆者還真的第一次遇到，這篇就照著<code>Stackoverflow</code>的教學，透過<code>Powershell</code>設定其<code>http_proxy</code>設定後，從<code>Powershell</code>中執行其安裝檔。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>接下來內容皆於<code>Powershell</code>中執行</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$proxy</span>=&#123;proxy_url&#125;</span><br><span class="line"><span class="variable">$ENV:HTTP_PROXY</span>=<span class="variable">$proxy</span></span><br><span class="line"><span class="variable">$ENV:HTTPS_PROXY</span>=<span class="variable">$proxy</span></span><br><span class="line"><span class="built_in">cd</span> .\Downloads\ <span class="comment"># 進到下載資料夾</span></span><br><span class="line">.\rustup<span class="literal">-init</span>.exe <span class="comment"># 執行其安裝檔</span></span><br></pre></td></tr></table></figure>

<img src="/2021/11/20/windows-series-problem-proxy/Untitled.png" class="" title="[Powershell實際執行畫面]">

<p>順利安裝成功，顯示<code>Rust is installed now. Great!</code>，表示大功告成。</p>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>其實上述技巧不只適用於<code>Rust</code>的開發環境安裝，只要使用安裝檔案安裝的程式，若中間有去外面連結去抓取檔案的皆適用，以此紀錄。</p>
<p>參考</p>
<ul>
<li><a href="https://stackoverflow.com/questions/42843329/how-can-i-install-rust-using-rustup-on-windows-when-behind-a-firewall">https://stackoverflow.com/questions/42843329/how-can-i-install-rust-using-rustup-on-windows-when-behind-a-firewall</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>windows</category>
        <category>problemsolving</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>problemsolving</tag>
      </tags>
  </entry>
  <entry>
    <title>[Rust]教學系列-猜謎遊戲:最終篇</title>
    <url>/2021/11/20/rust-series-guessing-game-full/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>來到「猜謎遊戲」的最終篇章了，前面兩篇<a href="/2021/11/18/rust-series-guessing-game-stdin/" title="[Rust]教學系列-猜謎遊戲:取得使用者輸入值">[Rust]教學系列-猜謎遊戲:取得使用者輸入值</a>、<a href="/2021/11/19/rust-series-guessing-game-rand/" title="[Rust]教學系列-猜謎遊戲:取亂數">[Rust]教學系列-猜謎遊戲:取亂數</a>，我們已經把前置作業該做的都做完了，最終篇就是重頭戲中的重頭戲，將取得的使用者輸入值與隨機產生的亂數做一個比較，若一樣則比賽結束，若不一致則可以讓使用者繼續猜，跟著筆者一起實作吧。</p>
<p>筆者先預告一下此篇主要是會使用到<code>Rust</code>的重要方法<code>match</code>以及若使用者輸入值與神秘數字不一樣時，可以讓使用者一直猜下去的<code>loop</code>技巧。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><h2 id="比較數字"><a href="#比較數字" class="headerlink" title="比較數字"></a>比較數字</h2><p>需要引入一些基礎模組套件並使用</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::cmp::Ordering;</span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> guess.<span class="title function_ invoke__">cmp</span>(&amp;secret_number)&#123;</span><br><span class="line">    Ordering::Less =&gt; <span class="built_in">println!</span>(<span class="string">&quot;太小了!&quot;</span>),</span><br><span class="line">    Ordering::Greater =&gt; <span class="built_in">println!</span>(<span class="string">&quot;太大了!&quot;</span>),</span><br><span class="line">    Ordering::Equal =&gt; <span class="built_in">println!</span>(<span class="string">&quot;獲勝!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以發現上述的程式碼是無法建置的，是因為guess為使用者輸入值，是一個<code>String</code>型態，<code>secret_number</code>則是透過<code>gen_range</code>產生的亂數，是數字型態，兩邊資料型別不對等的情況下，是無法比較的。<code>VSCode</code>中的<code>Rust Extension</code>有<code>Rust Language Server</code>服務，會偵測到錯誤並提示</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">mismatched types</span><br><span class="line"></span><br><span class="line">expected <span class="keyword">struct</span> `std::string::<span class="type">String</span>`, found integer</span><br></pre></td></tr></table></figure>

<p>意即以第一個比較對象為基準，因為<code>guess</code>為使用者輸入值，資料型別理所當然是<code>String</code>型態，因此透過<code>cmp</code>方法比較的兩邊，資料型別要一致的狀態下，會跳出<code>string</code>對<code>string</code>的提示。</p>
<p>解釋<code>match</code>方法結構，筆者找不出更直白的方式敘述，以下兩段敘述引用官方教學文件中的翻譯敘述：</p>
<div class="admonition info"><p><code>match</code>表達式由<strong>分支</strong>（arms）所組成。分支包含一個<strong>模式</strong>（pattern）以及對應的程式碼，這在當<code>match</code>表達式開頭的數值能與該分支的模式配對時就能執行。Rust 會用<code>match</code>得到的數值依序遍歷每個分支中的模式。<code>match</code>結構與模式是 Rust 中非常強大的特色，能讓你表達各種程式碼可能會遇上的情形，並確保你有將它們全部處理完。這些特色功能會在第六章與第十八章分別討論其細節。</p>
</div>

 

<div class="admonition info"><p>讓我們看看在此例中使用<code>match</code>表達式時會發生什麼事。假設使用者猜測的數字是 50 而這次隨機產生的祕密數字是 38。當程式碼比較 50 與 38 時，<code>cmp</code>方法會回<code>Ordering::Greater</code>，因為 50 大於 38。<code>match</code>表達式會取得<code>Ordering::Greater</code>數值並開始檢查每個分支的模式。它會先查看第一個分支的模<code>Ordering::Less</code>並看出數值<code>Ordering::Greater</code>無法與<code>Ordering::Less</code>配對，所以它忽略該分支的程式碼，並移到下一個分支。而下個分支的模<code>Ordering::Greater</code>能配對到<code>Ordering::Greater</code>！所以該分支對應的程式碼就會執行並印出<code>太大了！</code>到螢幕上。最後<code>match</code>表達式就會結束，因為在此情境中它已經不需要再查看最後一個分支。</p>
</div>

<p>看完上述敘述，給筆者一種感覺很像其他語言中的<code>switch case</code>，畢竟<code>match</code>在<code>Rust</code>語言的世界中屬<code>流程控制</code>，筆者認為應該就是筆者熟悉的C#世界中的<code>switch case</code>，官方教學文件也會有一篇專門介紹<code>match</code>的章節，到時再跟著筆者慢慢體會其作法及威力吧。</p>
<h2 id="字串轉型"><a href="#字串轉型" class="headerlink" title="字串轉型"></a>字串轉型</h2><p>接著就需要用到<code>字串轉型</code>的技巧了，因為畢竟我是猜數字遊戲，需要當作數值做比較才有其意義，因此將使用者輸入值<code>guess</code>(String型別)轉型成可以跟<code>secret_number</code>可以比較的型態</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">guess</span>: <span class="type">u32</span> = guess.<span class="title function_ invoke__">trim</span>().<span class="title function_ invoke__">parse</span>().<span class="title function_ invoke__">expect</span>(<span class="string">&quot;請輸入一個數字！&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>看到這裡，有沒有一種感覺，這什麼鬼 XD，上面已經有<code>guess</code>變數了，可以再宣告一個<code>guess</code>嗎？這是<code>Rust</code>語言的特色之一：<code>shadow遮蔽</code>，因為有這個特色，我們可以重複使用變數名稱，且右邊的<code>guess</code>就是第一個<code>String型別</code>的資料，經過運算之後指派給新的變數<code>guess</code>，這個概念之後會有專門一篇說明。</p>
<p>程式裡面使用到<code>trim().parse()</code>，經過[上篇]的說明，應該知道回傳是一個<code>泛型Result型別</code>，因此可以再接著使用<code>expect</code>這個方法，筆者試看看若<code>command line</code>輸入的是不是數字時的反應</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Finished dev [unoptimized + debuginfo] target(s) <span class="keyword">in</span> 0.02s</span><br><span class="line">     Running `target/debug/guessing_game`</span><br><span class="line">請猜測一個數字!</span><br><span class="line">祕密數字為：96</span><br><span class="line">請輸入你的猜測數字!</span><br><span class="line">oooo <span class="comment"># 故意輸入一串英文字母</span></span><br><span class="line"><span class="comment"># 錯誤訊息：自定義的訊息＋error訊息</span></span><br><span class="line">thread <span class="string">&#x27;main&#x27;</span> panicked at <span class="string">&#x27;請輸入一個數字!: ParseIntError &#123; kind: InvalidDigit &#125;&#x27;</span>, src/main.rs:17:43</span><br><span class="line">note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace</span><br></pre></td></tr></table></figure>

<h2 id="階段性執行結果"><a href="#階段性執行結果" class="headerlink" title="階段性執行結果"></a>階段性執行結果</h2><p>寫到這邊，已經完成一個可執行的猜謎遊戲了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cargo run</span><br><span class="line"><span class="comment"># 輸出結果</span></span><br><span class="line">請猜測一個數字!</span><br><span class="line">祕密數字為：30</span><br><span class="line">請輸入你的猜測數字!</span><br><span class="line">50 <span class="comment"># 手動輸入</span></span><br><span class="line">太大了!</span><br><span class="line">你的猜測數字：50</span><br></pre></td></tr></table></figure>

<p>當然以執行結果來說，是不是覺得不夠完美，有以下幾個項目可以改善</p>
<ul>
<li>不應該印出祕密數字</li>
<li>轉換資料型別失敗時的處理</li>
<li>若猜錯，是否可以再繼續進行猜數字，直到猜中為止</li>
</ul>
<h2 id="迴圈設計"><a href="#迴圈設計" class="headerlink" title="迴圈設計"></a>迴圈設計</h2><p>筆者這邊解釋一下為何要加入迴圈設計</p>
<ul>
<li>依照轉型失敗時的處理，勢必要讓使用者再輸入一次，直到可以將其值成功轉換成數字型別</li>
<li>猜錯數字，必須得讓使用者再猜一次</li>
</ul>
<p>基於上述兩個理由，必須使用迴圈將主要邏輯包住，可以重複執行同樣的邏輯，Rust語言的迴圈設計則使用<code>loop</code>關鍵字，將需要重複執行的程式邏輯區塊包住即可有效果，另外搭配</p>
<ul>
<li><code>continue</code>：中間有邏輯符合則執行到最後，直接進入下一個迴圈</li>
<li><code>break</code>：已達終止條件，終止迴圈</li>
</ul>
<h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p>筆者就不賣關子了，直接把上章節說的不完美的地方加入迴圈設計後的改善結果吧，講一下程式實作邏輯</p>
<ul>
<li>產生1-100間的亂數</li>
<li>loop開始<ul>
<li>取得使用者輸入值</li>
<li>將使用者輸入值轉換資料型別為數值(若轉換型別錯誤則讓<code>loop</code>繼續)</li>
<li>資料比較邏輯：若猜中，終止<code>loop</code></li>
</ul>
</li>
</ul>
<p>最後列出完整程式碼</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> rand::Rng;</span><br><span class="line"><span class="keyword">use</span> std::cmp::Ordering;</span><br><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;請猜測一個數字!&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">secret_number</span> = rand::<span class="title function_ invoke__">thread_rng</span>().<span class="title function_ invoke__">gen_range</span>(<span class="number">1</span>..<span class="number">101</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;請輸入你的猜測數字!&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">guess</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        io::<span class="title function_ invoke__">stdin</span>().<span class="title function_ invoke__">read_line</span>(&amp;<span class="keyword">mut</span> guess).<span class="title function_ invoke__">expect</span>(<span class="string">&quot;讀取該行失敗&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">guess</span>: <span class="type">u32</span> = <span class="keyword">match</span> guess.<span class="title function_ invoke__">trim</span>().<span class="title function_ invoke__">parse</span>() &#123;</span><br><span class="line">            <span class="title function_ invoke__">Ok</span>(num) =&gt; num,</span><br><span class="line">            <span class="title function_ invoke__">Err</span>(_) =&gt; <span class="keyword">continue</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;你的猜測數字：&#123;&#125;&quot;</span>, guess);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">match</span> guess.<span class="title function_ invoke__">cmp</span>(&amp;secret_number) &#123;</span><br><span class="line">            Ordering::Less =&gt; <span class="built_in">println!</span>(<span class="string">&quot;太小了!&quot;</span>),</span><br><span class="line">            Ordering::Greater =&gt; <span class="built_in">println!</span>(<span class="string">&quot;太大了!&quot;</span>),</span><br><span class="line">            Ordering::Equal =&gt; &#123;</span><br><span class="line">                <span class="built_in">println!</span>(<span class="string">&quot;獲勝!&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="執行結果"><a href="#執行結果" class="headerlink" title="執行結果"></a>執行結果</h2><p>筆者自己也來玩一場吧</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cargo run</span><br><span class="line"><span class="comment"># 輸出結果</span></span><br><span class="line">請猜測一個數字!</span><br><span class="line">請輸入你的猜測數字!</span><br><span class="line">50</span><br><span class="line">你的猜測數字：50</span><br><span class="line">太大了!</span><br><span class="line">請輸入你的猜測數字!</span><br><span class="line">25</span><br><span class="line">你的猜測數字：25</span><br><span class="line">太大了!</span><br><span class="line">請輸入你的猜測數字!</span><br><span class="line">15</span><br><span class="line">你的猜測數字：15</span><br><span class="line">太小了!</span><br><span class="line">請輸入你的猜測數字!</span><br><span class="line">22</span><br><span class="line">你的猜測數字：22</span><br><span class="line">太小了!</span><br><span class="line">請輸入你的猜測數字!</span><br><span class="line">23</span><br><span class="line">你的猜測數字：23</span><br><span class="line">獲勝!</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>做完有趣的題目，下篇開始要無聊的介紹<code>資料型別</code>，<code>基礎設計概念</code>等觀念，還有一些<code>Rust</code>獨有的概念原則，開始一一揭開<code>Rust</code>神秘的面紗，筆者希望可以講完基礎概念後，可以實作一些<code>Side Project</code>，讓自己可以更加靈活的運用<code>Rust</code>語言。最後筆者Recap一下今天的一些重要觀念</p>
<ul>
<li><code>match</code>的用法：很像其他語言中的<code>switch case</code>，屬流程控制的一環</li>
<li><code>parse</code>方法：轉型方法，回傳<code>泛型Result型別</code></li>
<li><code>loop</code>技巧：包住想要重複執行的程式邏輯區塊，搭配<code>continue</code>或<code>break</code>使用</li>
</ul>
<p>參考</p>
<ul>
<li><a href="https://rust-lang.tw/book-tw/ch02-00-guessing-game-tutorial.html">https://rust-lang.tw/book-tw/ch02-00-guessing-game-tutorial.html</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>rust</category>
      </categories>
      <tags>
        <tag>rust</tag>
      </tags>
  </entry>
  <entry>
    <title>[Rust]教學系列-猜謎遊戲:取亂數</title>
    <url>/2021/11/19/rust-series-guessing-game-rand/</url>
    <content><![CDATA[<img src="/2021/11/19/rust-series-guessing-game-rand/Untitled-4.png" class="" title="[rand crate技術文件]">

<span id="more"></span>
<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者這邊利用下班、假日時間，打算花半年時間學習新的程式語言，將所學過程紀錄下來，寫成部落格，雖然<code>Rust</code>的教學文件非常的完整，也有繁體中文的版本，但筆者認為唯有用自己的話寫下來，讓別人懂，才是真正學會，因此決定撰寫<code>Rust</code>教學系列文章。</p>
<p>目前來到官網範例中的「<code>猜謎遊戲</code>」環節，<a href="/2021/11/18/rust-series-guessing-game-stdin/" title="[Rust]教學系列-猜謎遊戲:取得使用者輸入值">[Rust]教學系列-猜謎遊戲:取得使用者輸入值</a>已經可以取得使用者輸入的猜數值，這篇要來繼續撰寫，取亂數的部份，我們要用到<code>Cargo</code>的方式將取得隨機亂數函式庫引進來，使用該套件產生1~100間的亂數，跟著筆者一起實作吧。</p>
<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>這篇使用<code>rand</code>套件來實作取亂數，筆者之前就有提到官方建議<code>cargo</code>來管理其相依套件，那套件本身會在哪裡，讓我們使用<code>cargo</code>指令來下載呢，答案就是<code>crate</code>，使用其他的語言舉例來說的話，<code>nodejs</code>使用<code>npm</code>管理相依套件，那會有<code>npm public registry</code>，讓我們可以用<code>npm i</code>去下載相依套件，又如寫<code>.net</code>的工程師來說，會使用<code>nuget</code>管理相依套件，那也會有一個<code>nuget gallery</code>公開的<code>registry</code>，可以連線下載，那<code>Rust</code>語言來說用<code>cargo</code>管理相依套件，會從<a href="https://crates.io/">https://crates.io/</a>下載其相關套件。</p>
<blockquote>
<p><a href="http://crates.io/">Crates.io</a> 是個讓 Rust 生態系統中的每個人都能發佈它們的開源 Rust 專案並讓其他人使用的地方</p>
</blockquote>
<h2 id="安裝rand套件"><a href="#安裝rand套件" class="headerlink" title="安裝rand套件"></a>安裝rand套件</h2><p>筆者<a href="/2021/11/16/rust-series-hello-cargo/" title="[Rust]教學系列-Hello Cargo">[Rust]教學系列-Hello Cargo</a>中有大概講解一下其<code>cargo</code>指令建立專案後的檔案結構，其中<code>Cargo.toml</code>中的<code>dependencies</code>區塊中宣告我們相依套件，因此我們會在這宣告需要使用到的套件<code>rand</code></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">[dependencies]</span><br><span class="line">rand = <span class="string">&quot;0.8.3&quot;</span></span><br></pre></td></tr></table></figure>

<p>接著使用<code>cargo</code>指令建置，因為上面已設定相依套件，因此建置過程會安裝相依套件，意即<code>rand</code>套件相依的套件也會一併安裝</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cargo build</span><br><span class="line"><span class="comment"># 輸出結果</span></span><br><span class="line">    Blocking waiting <span class="keyword">for</span> file lock on package cache</span><br><span class="line">    Updating crates.io index</span><br><span class="line">    Blocking waiting <span class="keyword">for</span> file lock on package cache</span><br><span class="line">   Compiling cfg-if v1.0.0</span><br><span class="line">   Compiling ppv-lite86 v0.2.15</span><br><span class="line">   Compiling getrandom v0.2.3</span><br><span class="line">   Compiling rand_core v0.6.3</span><br><span class="line">   Compiling rand_chacha v0.3.1</span><br><span class="line">   Compiling rand v0.8.4</span><br><span class="line">   Compiling guession_game v0.1.0 (\Projects\guession_game)</span><br><span class="line">    Finished dev [unoptimized + debuginfo] target(s) <span class="keyword">in</span> 28.19s</span><br></pre></td></tr></table></figure>

<p>可以看出<code>rand</code>套件相依套件有</p>
<ul>
<li><code>cfg-if</code></li>
<li><code>ppv-lite86</code></li>
<li><code>getrandom</code></li>
<li><code>rand_core</code></li>
<li><code>rand_chacha</code></li>
</ul>
<p>上述這些<code>rand</code>套件相依的套件也會一併安裝</p>
<h2 id="產生隨機數字"><a href="#產生隨機數字" class="headerlink" title="產生隨機數字"></a>產生隨機數字</h2><p>使用<code>gen_range</code>這個方法取得隨機產生數值，可以傳入<code>start..end</code>，該方法會從<code>start</code>到<code>end</code>之間的數字中，隨機取得一個數字當作回傳值</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> rand::Rng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">secret_number</span> = rand::<span class="title function_ invoke__">thread_rng</span>().<span class="title function_ invoke__">gen_range</span>(<span class="number">1</span>..<span class="number">101</span>);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;秘密數字為：&#123;&#125;&quot;</span>, secret_number);</span><br></pre></td></tr></table></figure>

<p>上述程式碼中，引入<code>rand package</code>中的<code>Rng Trait</code>，其中使用<code>thread_rng</code>的函式中的<code>gen_range</code>方法，傳入參數為<code>start..end</code>，包含<code>start</code>，不包含<code>end</code>，若要包含<code>end</code>則需改用<code>start..=end</code>，以上述例子來說，我們需要改成<code>gen_range(1..=100)</code>，也是一樣的效果的。</p>
<h2 id="透過Cargo指令產生技術文件"><a href="#透過Cargo指令產生技術文件" class="headerlink" title="透過Cargo指令產生技術文件"></a>透過Cargo指令產生技術文件</h2><p>這時候是時候要來講一下<code>Rust</code>語言的特色之一<code>生產力</code>部份，以上述來說我們要從何而知這些套件有哪些方法可以使用，<code>Rust</code>這邊有一個產生技術文件的機制，不過筆者不知道公開套件是否要上架前必須得提供技術文件，就不得而知了，不過筆者猜測是一定要的程序。</p>
<p>我們可以透過<code>cargo doc —open</code>的方式產生並開啟，他就是一個<code>html</code>格式的技術文件。基本上<code>cargo</code>會掃描該專案下相依的套件(包含自己)，產生成可讀性高的<code>html</code>檔案，因為有下<code>—open</code>，因此會產生完畢後會自動開啟。</p>
<p>產生技術文件檔案的相對路徑為<code>&#123;專案目錄&#125;target/doc/guession_game/index.html</code></p>
<img src="/2021/11/19/rust-series-guessing-game-rand/Untitled.png" class="" title="[local技術文件首頁-顯示專案套件資訊]">

<img src="/2021/11/19/rust-series-guessing-game-rand/Untitled-1.png" class="" title="[local技術文件-rand套件首頁]">

<img src="/2021/11/19/rust-series-guessing-game-rand/Untitled-2.png" class="" title="[local技術文件-gen_range方法說明]">

<p>亦可到<code>creates.io</code>中的該套件下的<code>documentation</code>連結中看到一模一樣的技術文件，筆者猜測就是拿各套件的技術文件加以包裝，變成<code>local</code>的技術文件檔案</p>
<img src="/2021/11/19/rust-series-guessing-game-rand/Untitled-3.png" class="" title="[crates.io-套件技術文件連結]">

<img src="/2021/11/19/rust-series-guessing-game-rand/Untitled-3.png" class="" title="[crate線上技術文件-rand套件首頁]">

<h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p>最後附上以上篇及這篇組合之下的程式碼</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"><span class="keyword">use</span> rand::Rng;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;請猜測一個數字!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">secret_number</span> = rand::<span class="title function_ invoke__">thread_rng</span>().<span class="title function_ invoke__">gen_range</span>(<span class="number">1</span>..<span class="number">101</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;秘密數字為：&#123;&#125;&quot;</span>, secret_number);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;請輸入你的猜測數字!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">guess</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line"></span><br><span class="line">    io::<span class="title function_ invoke__">stdin</span>()</span><br><span class="line">        .<span class="title function_ invoke__">read_line</span>(&amp;<span class="keyword">mut</span> guess)</span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;讀取該行失敗&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;你的猜測數字：&#123;&#125;&quot;</span>, guess);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="執行結果"><a href="#執行結果" class="headerlink" title="執行結果"></a>執行結果</h2><p>依照完整程式碼，跟著筆者執行看看其效果吧</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cargo run</span><br><span class="line"><span class="comment"># 輸出結果</span></span><br><span class="line">Finished dev [unoptimized + debuginfo] target(s) <span class="keyword">in</span> 0.01s</span><br><span class="line">     Running `target\debug\guession_game.exe`</span><br><span class="line">請猜測一個數字!</span><br><span class="line">秘密數字為：51</span><br><span class="line">請輸入你的猜測數字!</span><br><span class="line">10</span><br><span class="line">你的猜測數字：10</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>到這邊，已經完成猜謎遊戲的第二部份了，最後只剩下將使用者輸入值與隨機產生的神秘數字做一個比較，此部份會於下篇說明，最後筆者recap一下這篇講到的內容</p>
<ul>
<li>編輯Cargo.toml中的dependencies區塊，宣告其套件其版本號，例：<code>rand = &quot;0.8.3&quot;</code>，透過<code>cargo build</code>，將相依套件安裝好</li>
<li>透過<code>gen_range</code>方法可以取得在特定範圍內隨機產生的一組數字，有<code>overload</code>方法，一個是傳入<code>start..end</code>，另一個則<code>start..=end</code>，依照個人喜好做選擇</li>
<li><code>cargo doc —open</code>指令的方式產生技術文件並開啟技術文件</li>
</ul>
<p>參考</p>
<ul>
<li><a href="https://rust-lang.tw/book-tw/ch02-00-guessing-game-tutorial.html">https://rust-lang.tw/book-tw/ch02-00-guessing-game-tutorial.html</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>rust</category>
      </categories>
      <tags>
        <tag>rust</tag>
      </tags>
  </entry>
  <entry>
    <title>[Rust]教學系列-猜謎遊戲:取得使用者輸入值</title>
    <url>/2021/11/18/rust-series-guessing-game-stdin/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者就照著官方教學文件，繼續往下走了，來到撰寫猜謎遊戲的環節，主要是做一個<code>command line</code>互動遊戲，因為尚未講解到語法、資料型別等，因此這個猜謎遊戲就當作初試<code>Rust</code>的撰寫體驗，不了解的部份，由後面章節會繼續介紹其語法、資料型別等。官方文件的策略是先由一個簡單的小遊戲，來入門<code>Rust</code>的程式語法、思考邏輯、<code>Coding Style</code>等。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>程式內容為使用亂數產生1~100間的數字，與使用者輸入的數字做對比，沒有猜對，可以一直猜下去，猜對則跳出成功訊息結束。</p>
<h2 id="建立專案"><a href="#建立專案" class="headerlink" title="建立專案"></a>建立專案</h2><p>已經介紹過<code>Cargo</code>，官方也建議使用<code>Cargo</code>做建立專案，套件管理，建置、執行專案，首先，建立一個猜字遊戲專案</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cargo new guessing_game</span><br><span class="line"><span class="built_in">cd</span> guessing_game</span><br></pre></td></tr></table></figure>

<p>先用<code>cargo</code>指令執行驗證看看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cargo run</span><br><span class="line"><span class="comment"># 輸出結果</span></span><br><span class="line">Compiling guessing_game v0.1.0 (/Projects/guessing_game)</span><br><span class="line">    Finished dev [unoptimized + debuginfo] target(s) <span class="keyword">in</span> 0.38s</span><br><span class="line">     Running `target/debug/guessing_game`</span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure>

<h2 id="讀取使用者輸入值"><a href="#讀取使用者輸入值" class="headerlink" title="讀取使用者輸入值"></a>讀取使用者輸入值</h2><p>猜謎遊戲第一步就是要讓使用者輸入猜數，程式實作要讀取使用者輸入值並存至變數中，爾後需與隨機產生的數字作比較，來看看<code>Rust</code>語言要怎麼實作吧</p>
<h3 id="宣告變數值"><a href="#宣告變數值" class="headerlink" title="宣告變數值"></a>宣告變數值</h3><p>首先要宣告一個變數值存入使用者輸入值</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">guess</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br></pre></td></tr></table></figure>

<p>由於<code>Rust</code>本身宣告變數時，預設是不可變的，若是可變動變數則需要加一個<code>mut</code>關鍵字於變數名稱前方，接著看到的是<code>String::new()</code>，new是String型別的關聯函式，需使用<code>::</code>這個符號串接，其實也沒這麼複雜，就是new出一個空字串。</p>
<h3 id="讀取使用者輸入值-1"><a href="#讀取使用者輸入值-1" class="headerlink" title="讀取使用者輸入值"></a>讀取使用者輸入值</h3><p>讀取使用者輸入值需引入標準函式庫，使用<code>use</code>關鍵字引入函式庫，函式庫為<code>std</code>底下的<code>io</code></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"></span><br><span class="line">io::<span class="title function_ invoke__">stdin</span>()</span><br><span class="line">    .<span class="title function_ invoke__">read_line</span>(&amp;<span class="keyword">mut</span> guess)</span><br><span class="line">    .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;讀取該行失敗&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>若沒有使用<code>use std::io;</code>則撰寫時<code>std::io::stdin()</code>，就是呼叫標準函式庫下的<code>io</code>函式庫，<code>io</code>函式庫下有一個<code>command line</code>輸入值handle的型別函式<code>stdin</code>。</p>
<p><code>stdin</code>函式底下有一個<code>method</code>名稱叫<code>read_line</code>，使用該方法可以取得使用者輸入值，那讀出來的輸入值存到哪個變數中呢，由<code>method</code>的<code>parameter</code>中傳入，道理跟上面宣告變數一樣，<code>Rust</code>世界中預設皆不可變，因此需要使用<code>&amp;mut guess</code>傳入，若維持不可變則使用<code>&amp;guess</code>傳入即可，其中<code>&amp;</code>這個符號<code>reference</code>的概念，之後筆者會照著官方教學，會有一篇獨立的教學文章來說明。</p>
<p>最後是<code>expect</code>，<code>Rust</code>這邊將標準函式庫中的<code>method</code>回傳值都包裝成<code>泛型Result型別</code>，因此透過<code>Result</code>型別我們可以處理可能發生的<code>Exception</code>，<code>Result</code>型別底下有一個<code>method</code>，名稱叫<code>expect</code>，以結果<code>ok</code>或<code>error</code>而傳入不同參數給<code>expect</code>方法，筆者以<code>vscode</code>中<code>expect</code>的解說中的範例來說</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// expect的方法定義</span></span><br><span class="line"><span class="comment">// pub fn expect(self, msg: &amp;str) -&gt; T</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">x</span>: <span class="type">Result</span>&lt;<span class="type">u32</span>, &amp;<span class="type">str</span>&gt; = <span class="title function_ invoke__">Err</span>(<span class="string">&quot;emergency failure&quot;</span>);</span><br><span class="line">x.<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Testing expect&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 執行結果</span></span><br><span class="line"><span class="comment">// thread &#x27;main&#x27; panicked at &#x27;Testing expect: &quot;emergency failure&quot;&#x27;, src/main.rs:4:7</span></span><br></pre></td></tr></table></figure>

<p>以結果來看，若發生<code>Error</code>則，顯示訊息會是「<code>傳入的string：error訊息</code>」，因此若以筆者上述宣告的來說，發生錯誤則會顯示「<code>讀取該行失敗：error訊息</code>」，先有這樣的概念即可。</p>
<h3 id="輸出猜數"><a href="#輸出猜數" class="headerlink" title="輸出猜數"></a>輸出猜數</h3><p>最後將使用者輸入的猜數印出來做這段的結尾，使用<code>println!</code>文字格式化輸出</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;你的猜測數字：&#123;&#125;&quot;</span>, guess);</span><br></pre></td></tr></table></figure>

<h3 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h3><p>最後組合一下上面宣告的那些程式碼，完整程式碼如下</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;請猜測一個數字!&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;請輸入你的猜測數字!&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">guess</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    io::<span class="title function_ invoke__">stdin</span>()</span><br><span class="line">        .<span class="title function_ invoke__">read_line</span>(&amp;<span class="keyword">mut</span> guess)</span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;讀取該行失敗&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;你的猜測數字：&#123;&#125;&quot;</span>, guess);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="執行結果"><a href="#執行結果" class="headerlink" title="執行結果"></a>執行結果</h2><p>依照上述程式碼，跟著筆者一起來看看執行結果吧</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cargo run</span><br><span class="line"><span class="comment"># 輸出結果</span></span><br><span class="line">Compiling guessing_game v0.1.0 (/Projects/guessing_game)</span><br><span class="line">    Finished dev [unoptimized + debuginfo] target(s) <span class="keyword">in</span> 0.44s</span><br><span class="line">     Running `target/debug/guessing_game`</span><br><span class="line">請猜測一個數字!</span><br><span class="line">請輸入你的猜測數字!</span><br><span class="line">10</span><br><span class="line">你的猜測數字：10</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>猜謎遊戲就先到這邊，下篇繼續完成其他部份，筆者最後recap一下今天所學的東西</p>
<ul>
<li>引入<code>package</code>函式庫，使用<code>use</code>關鍵字，例：<code>use std::io;</code></li>
<li>宣告不可變參數，使用<code>let</code>及<code>mut</code>關鍵字，例：<code>let mut guess = String::new();</code></li>
<li>取得使用者輸入值，使用<code>io</code>函式庫下的<code>stdin</code>函式庫中的<code>read_line</code>方法，例：<code>io::stdin().read_line(&amp;mut guess);</code></li>
<li>泛型<code>Result</code>型別中的<code>expect</code>方法，宣告輸出<code>error</code>訊息時的搭配訊息，例：<code>expect(&quot;該行讀取失敗&quot;);</code></li>
<li>格式化輸出技巧，使用<code>&#123;&#125;</code>符號定義參數取代位置，會依序取代，例：<code>println!(&quot;你的猜測數字：&#123;&#125;&quot;, guess);</code></li>
<li><code>::</code>符號：函式庫取用，例：<code>io::stdin()</code>，<code>String::new()</code></li>
<li><code>&amp;</code>符號：<code>reference</code>的方式傳入，例：<code>read_line(&amp;mut guess);</code></li>
</ul>
<p>參考</p>
<ul>
<li><a href="https://rust-lang.tw/book-tw/ch02-00-guessing-game-tutorial.html">https://rust-lang.tw/book-tw/ch02-00-guessing-game-tutorial.html</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>rust</category>
      </categories>
      <tags>
        <tag>rust</tag>
      </tags>
  </entry>
  <entry>
    <title>[Rust]教學系列-Hello Cargo</title>
    <url>/2021/11/16/rust-series-hello-cargo/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>上篇介紹到<code>Rust</code>的特色之一：生產力部份，每個程式語言都要有一個套件管理工具，方便管理相依套件，這篇的主角：<code>Cargo</code>，如同<code>npm</code>對於<code>nodejs</code>，<code>nuget</code>對於<code>.net</code>等等，上篇安裝開發環境:<code>rustup</code>時已經安裝好<code>Cargo</code>了，只要使用它即可，上篇介紹<code>Hello World</code>部份是手動的方式建立檔案，透過<code>Cargo</code>可以建立專案，管理相依性套件，跟著筆者實作了。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>首先驗證一下<code>Cargo</code>的版本號</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cargo --version</span><br><span class="line"><span class="comment"># cargo 1.55.0 (32da73ab1 2021-08-23)</span></span><br></pre></td></tr></table></figure>

<h2 id="透過Cargo建立專案"><a href="#透過Cargo建立專案" class="headerlink" title="透過Cargo建立專案"></a>透過Cargo建立專案</h2><p>透過Cargo指令的方式建立專案，使用new關鍵字，來看一下他有哪些options可以宣告</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cargo new --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># 以下為上述指令結果</span></span><br><span class="line">cargo-new</span><br><span class="line">Create a new cargo package at &lt;path&gt;</span><br><span class="line"></span><br><span class="line">USAGE:</span><br><span class="line">    cargo new [OPTIONS] &lt;path&gt;</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line">    -q, --quiet                    No output printed to stdout</span><br><span class="line">        --registry &lt;REGISTRY&gt;      Registry to use</span><br><span class="line">        --vcs &lt;VCS&gt;                Initialize a new repository <span class="keyword">for</span> the given version control system (git, hg, pijul, or</span><br><span class="line">                                   fossil) or <span class="keyword">do</span> not initialize any version control at all (none), overriding a global</span><br><span class="line">                                   configuration. [possible values: git, hg, pijul, fossil, none]</span><br><span class="line">        --bin                      Use a binary (application) template [default]</span><br><span class="line">        --lib                      Use a library template</span><br><span class="line">        --edition &lt;YEAR&gt;           Edition to <span class="built_in">set</span> <span class="keyword">for</span> the crate generated [possible values: 2015, 2018, 2021]</span><br><span class="line">        --name &lt;NAME&gt;              Set the resulting package name, defaults to the directory name</span><br><span class="line">    -v, --verbose                  Use verbose output (-vv very verbose/build.rs output)</span><br><span class="line">        --color &lt;WHEN&gt;             Coloring: auto, always, never</span><br><span class="line">        --frozen                   Require Cargo.lock and cache are up to <span class="built_in">date</span></span><br><span class="line">        --locked                   Require Cargo.lock is up to <span class="built_in">date</span></span><br><span class="line">        --offline                  Run without accessing the network</span><br><span class="line">        --config &lt;KEY=VALUE&gt;...    Override a configuration value (unstable)</span><br><span class="line">    -Z &lt;FLAG&gt;...                   Unstable (nightly-only) flags to Cargo, see <span class="string">&#x27;cargo -Z help&#x27;</span> <span class="keyword">for</span> details</span><br><span class="line">    -h, --<span class="built_in">help</span>                     Prints <span class="built_in">help</span> information</span><br><span class="line"></span><br><span class="line">ARGS:</span><br><span class="line">    &lt;path&gt;</span><br><span class="line"></span><br><span class="line">Run `cargo <span class="built_in">help</span> new` <span class="keyword">for</span> more detailed information.</span><br></pre></td></tr></table></figure>

<p>說明部份滿清楚的，只要沒有指定任何<code>Options</code>，基本上<code>cargo new</code> 時，預設會是<code>binary target</code>，類似像上篇透過<code>rustc</code>指令編譯後產生的<code>binary</code>檔案形式，之後進階使用時，可能才會考慮選擇其他選項，可以再透過<code>cargo help new</code>來觀看完整的說明，用到時再研究了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cargo new hello_cargo</span><br><span class="line"><span class="built_in">cd</span> hello_cargo</span><br><span class="line"><span class="comment"># 使用vscode打開</span></span><br><span class="line">code .</span><br></pre></td></tr></table></figure>

<h2 id="專案結構介紹"><a href="#專案結構介紹" class="headerlink" title="專案結構介紹"></a>專案結構介紹</h2><p>使用<code>cargo new</code>建立後的專案，結構滿簡單易懂的，包含</p>
<ul>
<li><code>src</code>資料夾，裡面會自動產生一個<code>main.rs</code>，並自動生產一個<code>main</code>方法，也就是<code>Rust</code>的程式入口。</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/main.rs</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>Cargo.toml</code>，相等於<code>package.json</code>，或者<code>dotnetcore</code>專案檔<code>csproj</code>中的<code>ItemGroup&gt;PackageReference</code>一樣宣告著這個專案的介紹以及相依套件及對應版本號</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"># 宣告該專案的資訊</span><br><span class="line">[package]</span><br><span class="line">name = <span class="string">&quot;hello_cargo&quot;</span></span><br><span class="line">version = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line">edition = <span class="string">&quot;2018&quot;</span></span><br><span class="line"></span><br><span class="line"># See more keys and their definitions at https:<span class="comment">//doc.rust-lang.org/cargo/reference/manifest.html</span></span><br><span class="line"># 相依套件宣告會落於此</span><br><span class="line">[dependencies]</span><br></pre></td></tr></table></figure>

<h2 id="透過Cargo建置專案"><a href="#透過Cargo建置專案" class="headerlink" title="透過Cargo建置專案"></a>透過Cargo建置專案</h2><p>既然透過<code>Cargo</code>建立專案，也可以透過<code>Cargo</code>指令來編譯專案，還記得我們上篇用什麼指令編譯嗎，先看看上篇的編譯方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rustc main.rs</span><br></pre></td></tr></table></figure>

<p>透過<code>Cargo</code>指令則</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切記要進到專案資料夾</span></span><br><span class="line">cargo build</span><br><span class="line"><span class="comment"># Finished dev [unoptimized + debuginfo] target(s) in 0.55s</span></span><br></pre></td></tr></table></figure>

<p>建置完成後的檔案會產生於<code>target &gt; debug &gt; hello_cargo</code>，可以發現是debug路徑下，若想要用<code>release</code>的方式建置，要多加<code>release</code>關鍵字，產生的檔案會位於<code>target &gt; release</code> 中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cargo build --release</span><br></pre></td></tr></table></figure>

<h2 id="透過Cargo執行專案"><a href="#透過Cargo執行專案" class="headerlink" title="透過Cargo執行專案"></a>透過Cargo執行專案</h2><p>最後執行專案，上篇介紹時直接執行編譯出來的<code>binary</code>檔案的方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./main</span><br></pre></td></tr></table></figure>

<p>透過<code>Cargo</code>指令則</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cargo run</span><br><span class="line"><span class="comment"># Finished dev [unoptimized + debuginfo] target(s) in 0.01s</span></span><br><span class="line"><span class="comment">#      Running `target/debug/hello_cargo`</span></span><br><span class="line"><span class="comment"># Hello, world!</span></span><br></pre></td></tr></table></figure>

<h2 id="透過Cargo檢驗專案"><a href="#透過Cargo檢驗專案" class="headerlink" title="透過Cargo檢驗專案"></a>透過Cargo檢驗專案</h2><p>最後介紹一下另外一個常用的<code>Cargo</code>指令：<code>cargo check</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cargo check</span><br><span class="line"><span class="comment"># Finished dev [unoptimized + debuginfo] target(s) in 0.01s</span></span><br></pre></td></tr></table></figure>

<h2 id="常用Cargo指令"><a href="#常用Cargo指令" class="headerlink" title="常用Cargo指令"></a>常用Cargo指令</h2><p>上面敘述使用到的Cargo指令們</p>
<ul>
<li><code>cargo build</code> 建置專案</li>
<li><code>cargo run</code> 其實已經包含建置專案及執行專案，意思是可以不用執行<code>cargo build</code>，直接執行<code>cargo run</code>也可以順便建置</li>
<li><code>cargo check</code> 單傳驗證該專案是否有錯誤</li>
</ul>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p><code>Rust</code>官方建議使用的套件管理器介紹到此，官方也建議盡量使用<code>cargo</code>指令做事情，才會享有最完整的<code>Rust</code>開發體驗，因為會有完整的教學文件可以參考，正所謂<code>生產力</code>這個優點，就是需要用到時有地方可以查看其用法，少走不少冤望路，開發起來就很順了，這篇就到這，下篇繼續。</p>
<p>參考</p>
<ul>
<li><a href="https://rust-lang.tw/book-tw/ch01-03-hello-cargo.html">https://rust-lang.tw/book-tw/ch01-03-hello-cargo.html</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>rust</category>
      </categories>
      <tags>
        <tag>rust</tag>
      </tags>
  </entry>
  <entry>
    <title>[Rust]教學系列-Hello World</title>
    <url>/2021/11/16/rust-series-hello-world/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p><code>Rust</code>程式語言的介紹</p>
<blockquote>
<p>讓每個人都能打造出可靠又高效軟體的程式語言</p>
</blockquote>
<p>足夠吸引人了吧，筆者打算花下班與假日時間，持續半年，執行學會一種新的程式語言挑戰，就挑最近火紅的<code>Rust</code>程式語言作為挑戰的對象，Rust程式語言特色如下：</p>
<ul>
<li>高效能：編譯型程式語言，有好的不執行的函式庫及垃圾回收機制</li>
<li>可靠性：完整且嚴謹的型別系統，在編譯時期就能找到錯誤並改善</li>
<li>生產力：有完整的生態系，如教學文件、套件管理、建置工具等</li>
</ul>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>第一步驟是要安裝其<code>Rust</code>的開發環境</p>
<h2 id="安裝Rust開發環境"><a href="#安裝Rust開發環境" class="headerlink" title="安裝Rust開發環境"></a>安裝Rust開發環境</h2><h3 id="Linux-Mac"><a href="#Linux-Mac" class="headerlink" title="Linux/Mac"></a>Linux/Mac</h3><p><code>Mac</code>環境就直接下指令即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl --proto <span class="string">&#x27;=https&#x27;</span> --tlsv1.2 -sSf https://sh.rustup.rs | sh</span><br><span class="line"><span class="comment"># 成功訊息</span></span><br><span class="line"><span class="comment"># Rust is installed now. Great!</span></span><br></pre></td></tr></table></figure>

<p>上述指令主要是安裝<code>rustup</code>套件，使用該套件安裝<code>rust</code>，好處就是之後要更新<code>Rust</code>版本，只要下<code>rustup update</code>即可，意義上等同於<code>nvm</code>（管理<code>node</code>）。</p>
<p>另，MacOS中，為編譯，需要額外安裝<code>xcode-select</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure>

<h3 id="Rust版本資訊"><a href="#Rust版本資訊" class="headerlink" title="Rust版本資訊"></a>Rust版本資訊</h3><p>最後來執行看看顯示版本指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rustc --version</span><br><span class="line"><span class="comment"># 以下為呈現結果</span></span><br><span class="line"><span class="comment"># rustc 1.55.0 (c8dfcfe04 2021-09-06)</span></span><br></pre></td></tr></table></figure>

<p>若有顯示出版本號表示有安裝成功，恭喜你，可以開始撰寫<code>Rust</code>程式了</p>
<h2 id="撰寫Hello-World"><a href="#撰寫Hello-World" class="headerlink" title="撰寫Hello World"></a>撰寫Hello World</h2><p>筆者下班後是使用Macbook Pro，因此筆者之後示範皆於Mac Os環境中執行，跟著筆者建立一個Hello World專案吧</p>
<h3 id="建立專案"><a href="#建立專案" class="headerlink" title="建立專案"></a>建立專案</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> hello_world</span><br><span class="line"><span class="built_in">cd</span> hello_world</span><br><span class="line"><span class="built_in">touch</span> main.rs</span><br></pre></td></tr></table></figure>

<h3 id="撰寫程式"><a href="#撰寫程式" class="headerlink" title="撰寫程式"></a>撰寫程式</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>()&#123;</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Rust</code>主要程式入口為<code>main</code>，當中使用<code>println!</code>函數印出「Hello World!」</p>
<h3 id="編譯程式及執行"><a href="#編譯程式及執行" class="headerlink" title="編譯程式及執行"></a>編譯程式及執行</h3><p>撰寫完程式，到了編譯環節了，<code>Rust</code>語言本身也是編譯式語言，透過<code>Rust</code>編譯器編譯，編譯完成的檔案就可以直接執行了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rustc main.rs</span><br><span class="line"><span class="comment"># 主要會在同個目錄會產生一個main檔案，直接執行它即可</span></span><br><span class="line">./main</span><br><span class="line"><span class="comment"># Hello, world!</span></span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>筆者在年初時跟志同道合朋友，一起組<code>Go lang</code>讀書會，但讀完後沒有在工作上使用，也沒有像這樣寫部落格文章的方式記錄下來，日子久了該忘的都忘了，不該忘的也忘了，哈，覺得有點可惜，因此這次筆者自己讀<code>Rust</code>語言，就認真給他寫出來，講到別人理解，表示才真正學會，這篇就先到這邊了，希望筆者可以繼續持續下去。</p>
<p>參考</p>
<ul>
<li><a href="https://doc.rust-lang.org/book/ch01-02-hello-world.html">https://doc.rust-lang.org/book/ch01-02-hello-world.html</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>rust</category>
      </categories>
      <tags>
        <tag>rust</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]ORM系列-SqlSugar:共同欄位新增、編輯技巧</title>
    <url>/2021/11/15/orm-series-sqlsugar-audit-columns/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者的慣例，使用<code>ORM</code>框架時，會先找一下可以擴充的點，畢竟<code>Select</code>、<code>Insert</code>、<code>Update</code>這種用到時，查看一下官方文件是可以馬上得到答案的，且用法都大同小異，擴充點好不好，適不適合自己的使用情境，對筆者來說選擇要不要使用這個<code>ORM</code>框架的主要考量原因之一，當然會看一下網路上大神們的文章，效能比較表，筆者會因為語法簡單好用，擴充點又符合自己的使用情境，犧牲一下效能，對筆者來說是ok的，因為比較效能的時間單位都是ns級的，基本上不要差太多，是沒什麼感覺的。這篇主要是講解<code>SqlSugar</code>套件，在操作共同欄位，像<code>CreatedAt</code>、<code>CreatedBy</code>、<code>UpdatedAt</code>、<code>UpdatedBy</code>這種，找到對應的擴充點，做統一處理。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p><code>SqlSugar</code>本身有提供<code>AOP</code>機制，透過相關事件，很方便地紀錄執行過程的Log，筆者在<a href="/2021/11/12/orm-series-sqlsugar-interceptor/" title="[DotnetCore]ORM系列-SqlSugar:AOP篇">[DotnetCore]ORM系列-SqlSugar:AOP篇</a>有詳細說明，<code>SqlSugar</code>另有提供<code>DataExecuting</code>事件，讓我們可以很方便地去修改其對應的Model值，以筆者實作過<code>SqlSugar</code>的<code>AOP</code>機制，覺得也可以使用<code>OnExecutingChangeSql</code>事件中變更其<code>parameter</code>的值，但就沒這麼方便，<code>SqlSugar</code>於<code>5.0.3.5</code>版本開始提供其<code>DataExecuting</code>事件，更方便地撰寫統一處裡的欄位值</p>
<h2 id="資料過濾器"><a href="#資料過濾器" class="headerlink" title="資料過濾器"></a>資料過濾器</h2><p>跟著筆者實際動手寫吧，先看一下結構語法</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">db.Aop.DataExecuting = (oldValue, entityInfo) =&gt;</span><br><span class="line"> &#123;</span><br><span class="line">    <span class="comment">// 寫操作邏輯   </span></span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure>

<p>撰寫程式前，需釐清一下其邏輯，以筆者的情境來說<code>CreatedAt</code>、<code>CreatedBy</code>、<code>UpdatedAt</code>、<code>UpdatedBy</code>這四個欄位，依照操作Type為<code>Insert</code>或<code>Update</code>而設定欄位不一樣</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">db.Aop.DataExecuting = (oldValue, entityInfo) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 寫操作邏輯   </span></span><br><span class="line">    <span class="keyword">switch</span> (entityInfo.OperationType)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> DataFilterType.InsertByObject:</span><br><span class="line">            <span class="keyword">switch</span> (entityInfo.PropertyName)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;CreatedAt&quot;</span>:</span><br><span class="line">                    entityInfo.SetValue(DateTime.Now);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;CreatedBy&quot;</span>:</span><br><span class="line">                    <span class="comment">// 取得登入使用者</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;UpdatedAt&quot;</span>:</span><br><span class="line">                    entityInfo.SetValue(DateTime.Now);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;UpdatedBy&quot;</span>:</span><br><span class="line">                    <span class="comment">// 取得登入使用者</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> DataFilterType.UpdateByObject:</span><br><span class="line">            <span class="keyword">switch</span> (entityInfo.PropertyName)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;UpdatedAt&quot;</span>:</span><br><span class="line">                    entityInfo.SetValue(DateTime.Now);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;UpdatedBy&quot;</span>:</span><br><span class="line">                    <span class="comment">// 取得登入使用者</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="實際執行"><a href="#實際執行" class="headerlink" title="實際執行"></a>實際執行</h2><h3 id="建立資料表"><a href="#建立資料表" class="headerlink" title="建立資料表"></a>建立資料表</h3><p>為實作，必須將筆者使用的MySql範例資料庫：classicmodels，加一個含有這些共同欄位的資料表，就索性命名為demo資料表吧，結構如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span><span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span><span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">[<span class="meta">SugarTable(<span class="string">&quot;demo&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">demo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">demo</span>()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Desc:</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Default:</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Nullable:False</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>           </span></span><br><span class="line">    [<span class="meta">SugarColumn(IsPrimaryKey=true,IsIdentity=true)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">long</span> Id &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Desc:</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Default:</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Nullable:False</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>           </span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Desc:</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Default:</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Nullable:False</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>           </span></span><br><span class="line">    <span class="keyword">public</span> DateTime CreatedAt &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Desc:</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Default:</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Nullable:True</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>           </span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CreatedBy &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Desc:</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Default:</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Nullable:True</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>           </span></span><br><span class="line">    <span class="keyword">public</span> DateTime? UpdatedAt &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Desc:</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Default:</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Nullable:True</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>           </span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> UpdatedBy &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="安裝測試套件"><a href="#安裝測試套件" class="headerlink" title="安裝測試套件"></a>安裝測試套件</h3><p>筆者這邊為方便，安裝一套可以隨機產生名字的套件，以利demo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet add package RandomNameGeneratorLibrary</span><br></pre></td></tr></table></figure>

<p>語法就照套件github上的教學照刻即可</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _personGenerator = <span class="keyword">new</span> PersonNameGenerator();</span><br><span class="line"><span class="keyword">var</span> name = _personGenerator.GenerateRandomFirstAndLastName();</span><br></pre></td></tr></table></figure>

<h3 id="實作新增作業"><a href="#實作新增作業" class="headerlink" title="實作新增作業"></a>實作新增作業</h3><ul>
<li>撰寫Action</li>
</ul>
<p>筆者為示範成功更新Created、Updated相關欄位，使用<code>Insert</code>語法，筆者會另外寫一篇介紹<code>SqlSugar</code>的<code>Insert</code>、<code>Update</code>語法，目前就先將就看一下</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 新增一筆demo資料</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">ProducesResponseType(typeof(string), StatusCodes.Status200OK)</span>]</span><br><span class="line">[<span class="meta">HttpPost(<span class="string">&quot;insert&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">InsertDemo</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> _personGenerator = <span class="keyword">new</span> PersonNameGenerator();</span><br><span class="line">    <span class="keyword">var</span> name = _personGenerator.GenerateRandomFirstAndLastName();</span><br><span class="line">    _db.Insertable&lt;Sugar.demo&gt;(<span class="keyword">new</span> Sugar.demo()</span><br><span class="line">    &#123;</span><br><span class="line">        Name = name</span><br><span class="line">    &#125;).ExecuteCommand();</span><br><span class="line">    <span class="keyword">return</span> Ok(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程式碼前兩行就是用套件產生隨機取得的名字，將取得的名字當作<code>demo.Name</code>的值塞進<code>demo</code>資料表，以<code>SqlSugar</code>來說要執行Insert語法時，呼叫<code>ExecuteCommand</code>，其實另外還有不同的<code>Execute</code>方法，留給另一篇說明，最後回傳隨機產生的名字。</p>
<ul>
<li>Postman測試</li>
</ul>
<p>寫完Action相關語法後，跟著筆者使用Postman做一下測試吧</p>
<img src="/2021/11/15/orm-series-sqlsugar-audit-columns/insert-postman.png" class="" title="[Postman-新增作業]">

<ul>
<li>資料庫結果</li>
</ul>
<p>看一下資料庫中的結果</p>
<img src="/2021/11/15/orm-series-sqlsugar-audit-columns/insert-dbeaver.png" class="" title="[Dbeaver-新增資料]">

<p>筆者這邊使用<code>DBeaver</code>的介面當作結果呈現一部份，可以看到Insert語法中筆者只塞了一個Name屬性值，<code>CreatedAt</code>和<code>UpdatedAt</code>的值由AOP中的資料過濾器做掉了，有寫入成功。</p>
<h3 id="實作更新作業"><a href="#實作更新作業" class="headerlink" title="實作更新作業"></a>實作更新作業</h3><ul>
<li>撰寫Action</li>
</ul>
<p>筆者為示範Updated相關欄位更新，實作一組Update作業</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 更新客戶名稱</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;id&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">ProducesResponseType(typeof(string), StatusCodes.Status200OK)</span>]</span><br><span class="line">[<span class="meta">HttpPost(<span class="string">&quot;update/&#123;id&#125;&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">UpdateDemo</span>(<span class="params"><span class="built_in">long</span> id</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> _personGenerator = <span class="keyword">new</span> PersonNameGenerator();</span><br><span class="line">    <span class="keyword">var</span> name = _personGenerator.GenerateRandomFirstAndLastName();</span><br><span class="line">    <span class="keyword">var</span> demoModel = _db.Queryable&lt;Sugar.demo&gt;().First(x =&gt; x.Id == id);</span><br><span class="line">    demoModel.Name = name;</span><br><span class="line">    _db.Updateable(demoModel).ExecuteCommand();</span><br><span class="line">    <span class="keyword">return</span> Ok(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大概邏輯就是先依照Id值找到對應的資料，將<code>Name</code>屬性值使用新的隨機產生名字取代，使用<code>SqlSugar</code>的<code>Update</code>語法做更新，觀察一下<code>UpdatedAt</code>欄位是否被更新。首先再確認一下新增成功後的欄位值</p>
<blockquote>
<p>Insert成功欄位值</p>
</blockquote>
<table>
<thead>
<tr>
<th>欄位名稱</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>Id</td>
<td>3</td>
</tr>
<tr>
<td>Name</td>
<td>Nga Prager</td>
</tr>
<tr>
<td>CreatedAt</td>
<td>2021-11-15 10:05:43</td>
</tr>
<tr>
<td>UpdatedAt</td>
<td>2021-11-15 10:05:43</td>
</tr>
</tbody></table>
<ul>
<li>Postman測試</li>
</ul>
<p>上述新增成功的資料Id值為3，使用的Url為<a href="http://localhost:5000/api/Customer/update/3">http://localhost:5000/api/Customer/update/3</a></p>
<img src="/2021/11/15/orm-series-sqlsugar-audit-columns/update-postman.png" class="" title="[Postman-更新作業]">

<ul>
<li>資料庫結果</li>
</ul>
<img src="/2021/11/15/orm-series-sqlsugar-audit-columns/update-dbeaver.png" class="" title="[Dbeaver-更新資料]">

<p>檢視一下新增，更新欄位值對照表</p>
<blockquote>
<p>Insert、Update成功欄位值</p>
</blockquote>
<table>
<thead>
<tr>
<th>欄位名稱</th>
<th>新增值</th>
<th>更新值</th>
</tr>
</thead>
<tbody><tr>
<td>Id</td>
<td>3</td>
<td>3</td>
</tr>
<tr>
<td>Name</td>
<td>Nga Prager</td>
<td>TonyYazdani</td>
</tr>
<tr>
<td>CreatedAt</td>
<td>2021-11-15 10:05:43</td>
<td>2021-11-15 10:05:43</td>
</tr>
<tr>
<td>UpdatedAt</td>
<td>2021-11-15 10:05:43</td>
<td>2021-11-15 10:16:39</td>
</tr>
</tbody></table>
<p>有成功更新其<code>UpdatedAt</code>欄位值，表示筆者宣告的<code>AOP</code>資料過濾器是有效的。</p>
<h3 id="SqlSugar的AOP-生命週期檢視"><a href="#SqlSugar的AOP-生命週期檢視" class="headerlink" title="SqlSugar的AOP 生命週期檢視"></a>SqlSugar的AOP 生命週期檢視</h3><p>筆者這邊想要花點時間實驗一下，以<a href="/2021/11/12/orm-series-sqlsugar-interceptor/" title="[DotnetCore]ORM系列-SqlSugar:AOP篇">[DotnetCore]ORM系列-SqlSugar:AOP篇</a>的那些事件以及此主題中使用到的資料過濾器的執行先後順序，所謂知己知彼，百戰百勝，花點時間理解一下期執行順序，才不會撰寫的與執行的結果不符而造成錯誤的結果，筆者在<code>DataExecuting</code>事件的最上面加以下這行</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">_logger.Info(<span class="string">$@&quot;[DataExecuting:OperateType]:<span class="subst">&#123;entityInfo.OperationType.ToString()&#125;</span>;</span></span><br><span class="line"><span class="string">                            [DataExecuting:PropertyName]:<span class="subst">&#123;entityInfo.PropertyName&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>筆者這邊使用Update作業當作觀察的依據，使用Postman重複打update url，觀看一下執行順序吧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Select作業</span><br><span class="line">2021-11-15 10:31:01.5895 INFO [OnExecutingChangeSql]SELECT `Id`,`Name`,`CreatedAt`,`CreatedBy`,`UpdatedAt`,`UpdatedBy` FROM `demo`   WHERE ( `Id` = @Id0 )  ORDER BY NOW()  LIMIT 0,1</span><br><span class="line">2021-11-15 10:31:01.5936 INFO [OnExecutingChangeSql]@Id0:3</span><br><span class="line">2021-11-15 10:31:01.5936 INFO [OnLogExecuting]Executing SQL: SELECT `Id`,`Name`,`CreatedAt`,`CreatedBy`,`UpdatedAt`,`UpdatedBy` FROM `demo`   WHERE ( `Id` = @Id0 )  ORDER BY NOW()  LIMIT 0,1</span><br><span class="line">2021-11-15 10:31:01.6522 INFO [OnLogExecuted]Executed Time:00:00:00.0581930</span><br><span class="line">// Update作業</span><br><span class="line">2021-11-15 10:31:01.6553 INFO [DataExecuting:OperateType]:UpdateByObject;</span><br><span class="line">                            [DataExecuting:PropertyName]:Id</span><br><span class="line">2021-11-15 10:31:01.6555 INFO [DataExecuting:OperateType]:UpdateByObject;</span><br><span class="line">                            [DataExecuting:PropertyName]:Name</span><br><span class="line">2021-11-15 10:31:01.6555 INFO [DataExecuting:OperateType]:UpdateByObject;</span><br><span class="line">                            [DataExecuting:PropertyName]:CreatedAt</span><br><span class="line">2021-11-15 10:31:01.6555 INFO [DataExecuting:OperateType]:UpdateByObject;</span><br><span class="line">                            [DataExecuting:PropertyName]:CreatedBy</span><br><span class="line">2021-11-15 10:31:01.6555 INFO [DataExecuting:OperateType]:UpdateByObject;</span><br><span class="line">                            [DataExecuting:PropertyName]:UpdatedAt</span><br><span class="line">2021-11-15 10:31:01.6555 INFO [DataExecuting:OperateType]:UpdateByObject;</span><br><span class="line">                            [DataExecuting:PropertyName]:UpdatedBy</span><br><span class="line">2021-11-15 10:31:01.6588 INFO [OnExecutingChangeSql]UPDATE `demo`  SET</span><br><span class="line">           `Name`=@Name,`CreatedAt`=@CreatedAt,`CreatedBy`=@CreatedBy,`UpdatedAt`=@UpdatedAt,`UpdatedBy`=@UpdatedBy  WHERE `Id`=@Id</span><br><span class="line">2021-11-15 10:31:01.6588 INFO [OnExecutingChangeSql]@Id:3</span><br><span class="line">2021-11-15 10:31:01.6588 INFO [OnExecutingChangeSql]@Name:Sachiko Ellery</span><br><span class="line">2021-11-15 10:31:01.6594 INFO [OnExecutingChangeSql]@CreatedAt:11/15/2021 10:05:43</span><br><span class="line">2021-11-15 10:31:01.6594 INFO [OnExecutingChangeSql]@CreatedBy:</span><br><span class="line">2021-11-15 10:31:01.6594 INFO [OnExecutingChangeSql]@UpdatedAt:11/15/2021 10:31:01</span><br><span class="line">2021-11-15 10:31:01.6594 INFO [OnExecutingChangeSql]@UpdatedBy:</span><br><span class="line">2021-11-15 10:31:01.6594 INFO [OnLogExecuting]Executing SQL: UPDATE `demo`  SET</span><br><span class="line">           `Name`=@Name,`CreatedAt`=@CreatedAt,`CreatedBy`=@CreatedBy,`UpdatedAt`=@UpdatedAt,`UpdatedBy`=@UpdatedBy  WHERE `Id`=@Id</span><br><span class="line">2021-11-15 10:31:01.6631 INFO [OnLogExecuted]Executed Time:00:00:00.0033790</span><br></pre></td></tr></table></figure>

<p>由<code>Select</code>及<code>Update</code>作業綜合來看，可以整理出以下重點</p>
<ul>
<li><code>Select</code>作業時不會經過<code>DataExecuting</code>事件</li>
<li><code>Update</code>作業的事件順序為<ul>
<li><code>DataExecuting</code></li>
<li><code>OnExecutingChangeSql</code></li>
<li><code>OnLogExecuting</code></li>
<li><code>OnLogExecuted</code></li>
</ul>
</li>
</ul>
<p>以結果來看，算滿符合預期的結果，這樣大概就知道若要做什麼事情，找到對的事件做實作邏輯的宣告，才不會亂了套。</p>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>筆者經由實驗，以編輯共同欄位時，透過<code>DataExecuting</code>事件是綽綽有餘的，除了筆者此主題中實驗的<code>Created</code>、<code>Updated</code>相關欄位之外，或許可能有其他應用，筆者若有新的應用也會再放上來。另，SqlSugar教學文件中提供<code>Repository Pattern</code>的教學，筆者再找時間利用<code>Repository Pattern</code>重做一次此篇主題，看看其差異。</p>
<p>參考</p>
<ul>
<li><a href="https://www.donet5.com/Home/Doc?typeId=1204">https://www.donet5.com/Home/Doc?typeId=1204</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>sqlsugar</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>sqlsugar</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]ORM系列-SqlSugar:AOP篇</title>
    <url>/2021/11/12/orm-series-sqlsugar-interceptor/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>前幾篇介紹完<code>SqlSugar</code>的應用後，這篇筆者要來實作<code>SqlSugar</code>的<code>AOP</code>機制了，基本上就是Sql執行前後，或者發生Error後的事件，應有盡有，剛好符合筆者公司的要求，每個執行的作業出錯時要記錄下來，尤其是出錯時，最好能記錄到完整的SQL指令，釐清問題上更加有幫助，筆者介紹的幾個ORM框架通常都有類似的解決方案，表示這是大家都需要的功能</p>
<ul>
<li>[EFCore Interceptor]待補</li>
<li><a href="/2021/09/07/orm-series-chloe-interceptor/" title="[DotnetCore]ORM系列-Chloe:Interceptor篇">[DotnetCore]ORM系列-Chloe:Interceptor篇</a></li>
</ul>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p><code>SqlSugar</code>用法請參考筆者的<a href="/2021/11/01/orm-series-sqlsugar-entry/" title="[DotnetCore]ORM系列-SqlSugar:入門篇">[DotnetCore]ORM系列-SqlSugar:入門篇</a>，筆者這邊就沿用該範例，再回憶使用方式</p>
<h2 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet add package sqlSugarCore</span><br><span class="line"><span class="comment"># 若資料庫為MySql，要多安裝MySqlConnector</span></span><br><span class="line">dotnet add package MySqlConnector</span><br></pre></td></tr></table></figure>

<h2 id="註冊SqlSugar"><a href="#註冊SqlSugar" class="headerlink" title="註冊SqlSugar"></a>註冊SqlSugar</h2><p>於<code>Startup</code>中註冊，以利<code>Service</code>層時注入使用<code>SqlSugar實體</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">services.AddTransient(provider =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SqlSugarClient(<span class="keyword">new</span> ConnectionConfig()</span><br><span class="line">    &#123;</span><br><span class="line">        DbType = DbType.SqlServer,</span><br><span class="line">        ConnectionString = &#123;ConnectionString&#125;,<span class="comment">// 換成真實的連結字串</span></span><br><span class="line">        InitKeyType = InitKeyType.Attribute,</span><br><span class="line">        IsAutoCloseConnection = <span class="literal">true</span> <span class="comment">// 表示Service使用完畢Dispose時連線自動關閉</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="新增Interceptor"><a href="#新增Interceptor" class="headerlink" title="新增Interceptor"></a>新增Interceptor</h2><p>Interceptor部份，必須依賴於<code>SqlSugar實體</code>，針對<code>SqlSugar</code>實體，加註一些<code>AOP</code>機制，<code>SqlSugar</code>提供四個事件觸發Method讓我們可以加註宣告</p>
<ul>
<li>SQL執行前</li>
<li>SQL執行完成後</li>
<li>SQL發生Error時</li>
<li>SQL執行前可修改SQL指令及置換參數</li>
</ul>
<p>另外還有</p>
<ul>
<li>數據過濾器(筆者會另外寫一篇)</li>
<li>資料差異事件監聽(目前筆者沒有這個需求，到時有使用情境時再來寫)</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">services.AddTransient(provider =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> db = <span class="keyword">new</span> SqlSugarClient(<span class="keyword">new</span> ConnectionConfig()</span><br><span class="line">    &#123;</span><br><span class="line">        DbType = DbType.SqlServer,</span><br><span class="line">        ConnectionString = &#123;ConnectionString&#125;,<span class="comment">// 換成真實的連結字串</span></span><br><span class="line">        InitKeyType = InitKeyType.Attribute,</span><br><span class="line">        IsAutoCloseConnection = <span class="literal">true</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//SQL執行完成後觸發</span></span><br><span class="line">    db.Aop.OnLogExecuted = (sql, pars) =&gt; </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//執行完了可以輸出SQL執行時間 (OnLogExecutedDelegate) </span></span><br><span class="line">        Console.Write(<span class="string">&quot;time:&quot;</span> + db.Ado.SqlExecutionTime.ToString()); </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//SQL執行前觸發</span></span><br><span class="line">    db.Aop.OnLogExecuting = (sql, pars) =&gt; </span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//SQL發生Error時觸發</span></span><br><span class="line">    db.Aop.OnError = (exp) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//exp.sql 這樣可以拿到原始的完整SQL            </span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//可以修改SQL和參數的值</span></span><br><span class="line">    db.Aop.OnExecutingChangeSql = (sql, pars) =&gt; </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//sql=newsql</span></span><br><span class="line">        <span class="comment">//foreach(var p in pars) //修改</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KeyValuePair&lt;<span class="built_in">string</span>, SugarParameter[]&gt;(sql,pars);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> db;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="實際執行"><a href="#實際執行" class="headerlink" title="實際執行"></a>實際執行</h2><p>筆者就用<code>NLog</code>以文字檔的方式記錄一下各個事件發生的順序以及內容物，請參考筆者的<a href="/2021/08/23/nlog/" title="[DotnetCore]NLog使用">[DotnetCore]NLog使用</a>，筆者這邊為demo，<code>nlog.config</code>中只設定了<code>file</code>這條rule，套上nlog之後的語法</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//SQL執行完成後觸發</span></span><br><span class="line">db.Aop.OnLogExecuted = (sql, pars) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//執行完了可以輸出SQL執行時間 (OnLogExecutedDelegate) </span></span><br><span class="line">    _logger.Info(<span class="string">&quot;[OnLogExecuted]Executed Time:&quot;</span> + db.Ado.SqlExecutionTime.ToString());</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//SQL執行前觸發</span></span><br><span class="line">db.Aop.OnLogExecuting = (sql, pars) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    _logger.Info(<span class="string">$&quot;[OnLogExecuting]Executing SQL: <span class="subst">&#123;sql&#125;</span>&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//SQL發生Error時觸發</span></span><br><span class="line">db.Aop.OnError = (exp) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//exp.sql 這樣可以拿到原始的完整SQL   </span></span><br><span class="line">		_logger.Info(<span class="string">$&quot;[OnError]Sql:<span class="subst">&#123;exp.Sql&#125;</span>&quot;</span>);</span><br><span class="line">    _logger.Info(<span class="string">$&quot;[OnError]Exeception:<span class="subst">&#123;exp&#125;</span>&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//可以修改SQL和參數的值</span></span><br><span class="line">db.Aop.OnExecutingChangeSql = (sql, pars) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//sql=newsql</span></span><br><span class="line">    _logger.Info(<span class="string">$&quot;[OnExecutingChangeSql]<span class="subst">&#123;sql&#125;</span>&quot;</span>);</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="keyword">var</span> p <span class="keyword">in</span> pars) <span class="comment">//修改</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger.Info(<span class="string">$&quot;[OnExecutingChangeSql]<span class="subst">&#123;p.ParameterName&#125;</span>:<span class="subst">&#123;p.Value.ToString()&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> KeyValuePair&lt;<span class="built_in">string</span>, SugarParameter[]&gt;(sql, pars);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="執行結果"><a href="#執行結果" class="headerlink" title="執行結果"></a>執行結果</h2><h3 id="正常執行作業"><a href="#正常執行作業" class="headerlink" title="正常執行作業"></a>正常執行作業</h3><p>筆者這邊使用<a href="/2021/11/02/orm-series-sqlsugar-query/" title="[DotnetCore]ORM系列-SqlSugar:查詢篇1">[DotnetCore]ORM系列-SqlSugar:查詢篇1</a>那篇文章的操作，跟著筆者看一下整個<code>Interceptor</code>的生命週期吧，先做一個正常的查詢，取得前十筆資料</p>
<p><a href="http://localhost:5000/api/Customer/take/10">http://localhost:5000/api/Customer/take/10</a></p>
<p>接著看一下Log文字檔案</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2021-11-12 09:40:37.9649 INFO [OnExecutingChangeSql]SELECT `CustomerNumber`,`CustomerName`,`ContactLastName`,`ContactFirstName`,`Phone`,`AddressLine1`,`AddressLine2`,`City`,`State`,`PostalCode`,`Country`,`SalesRepEmployeeNumber`,`CreditLimit` FROM `Customers`     LIMIT 0,10</span><br><span class="line">2021-11-12 09:40:37.9707 INFO [OnLogExecuting]Executing SQL: SELECT `CustomerNumber`,`CustomerName`,`ContactLastName`,`ContactFirstName`,`Phone`,`AddressLine1`,`AddressLine2`,`City`,`State`,`PostalCode`,`Country`,`SalesRepEmployeeNumber`,`CreditLimit` FROM `Customers`     LIMIT 0,10</span><br><span class="line">2021-11-12 09:40:38.4760 INFO [OnLogExecuted]Executed Time:00:00:00.5043520</span><br></pre></td></tr></table></figure>

<p>可以看出SqlSugar的Interceptor的順序依序為</p>
<ul>
<li>OnExecutingChangeSql</li>
<li>OnLogExecuting</li>
<li>OnLogExecuted</li>
</ul>
<h3 id="錯誤執行作業"><a href="#錯誤執行作業" class="headerlink" title="錯誤執行作業"></a>錯誤執行作業</h3><p>筆者這邊在寫一個錯誤的語法，執行一個不存在的<code>Stored Procedure</code>，來模擬觸發<code>OnError</code>事件</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 模擬製作Error觸發</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">HttpPost(<span class="string">&quot;error&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">ErrorSimulate</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    _db.Ado.SqlQuery&lt;Sugar.customers&gt;(<span class="string">&quot;CALL SP1 (@CustomerName, @Country)&quot;</span></span><br><span class="line">        , <span class="keyword">new</span>&#123; CustomerName = <span class="string">&quot;Signal Gift Stores&quot;</span>, Country = <span class="string">&quot;USA&quot;</span> &#125;);</span><br><span class="line">    <span class="keyword">return</span> Ok(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上節寫法，於<code>OnError</code>事件中只記錄下Sql是不足夠的，需要將<code>Sql</code>對應的<code>Parameter</code>也要一併紀錄下來，才可以事後驗證追蹤問題，筆者實驗後發現<code>OnError</code>事件中的<code>DBParameter</code>藏在<code>exp.parametres</code>中，因<code>parameter</code>可能是多個，因此是以<code>List</code>的形式存在著，筆者仿照對應的結構建立一個Class</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ErrorDBParameter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> _Size &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> IsRefCursor &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> DbType &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Direction &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> IsNullable &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ParameterName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Size &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">object</span> SourceColumn &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> SourceColumnNullMapping &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">object</span> UdtTypeName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Value &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">object</span> TempDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> SourceVersion &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">object</span> TypeName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> IsJson &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> IsArray &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Precision &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Scale &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接著改寫OnError事件中的Log記錄邏輯</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//SQL發生Error時觸發</span></span><br><span class="line">db.Aop.OnError = (exp) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//exp.sql 這樣可以拿到原始的完整SQL   </span></span><br><span class="line">    _logger.Info(<span class="string">$&quot;[OnError]Sql:<span class="subst">&#123;exp.Sql&#125;</span>&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> parameters = JsonConvert.SerializeObject(exp.Parametres);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(parameters))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> paraList = JsonConvert.DeserializeObject&lt;List&lt;Models.ErrorDBParameter&gt;&gt;(parameters);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> p <span class="keyword">in</span> paraList)</span><br><span class="line">        &#123;</span><br><span class="line">            _logger.Info(<span class="string">$&quot;[OnError:Paramater]<span class="subst">&#123;p.ParameterName&#125;</span>:<span class="subst">&#123;p.Value&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    _logger.Info(<span class="string">$&quot;[OnError]Exeception:<span class="subst">&#123;exp.GetBaseException()&#125;</span>&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>筆者這邊為防呆，有些<code>Sql</code>可能是沒有<code>Parameter</code>的，這樣勢必<code>exp.Parametres</code>是空值，因此使用<code>JsonConvert.SerializeObject</code>的方式轉成字串，判斷其是否為null，再進行Deserialize的作業，使用上面建立好的<code>Class</code>去反序列化，紀錄部分在乎的是<code>ParameterName</code>及其<code>Value</code>，將它們記錄下來，最後<code>Exception</code>部份，直接取原始的<code>Exception</code>，透過<code>exp.GetBaseException</code>，這樣的紀錄資訊已足夠追蹤問題。</p>
<p>最後執行Postman，看一下Log文字檔案紀錄</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// url: http://localhost:5000/api/Customer/error</span><br><span class="line">2021-11-12 10:25:07.0449 INFO [OnExecutingChangeSql]Exec SP1 @CustomerName, @Country</span><br><span class="line">2021-11-12 10:25:07.0491 INFO [OnExecutingChangeSql]@CustomerName:Signal Gift Stores</span><br><span class="line">2021-11-12 10:25:07.0491 INFO [OnExecutingChangeSql]@Country:USA</span><br><span class="line">2021-11-12 10:25:07.0510 INFO [OnLogExecuting]Executing SQL: Exec SP1 @CustomerName, @Country</span><br><span class="line">2021-11-12 10:25:07.5917 INFO [OnError]Sql:Exec SP1 @CustomerName, @Country</span><br><span class="line">2021-11-12 10:25:07.8539 INFO [OnError:Paramater]@CustomerName:Signal Gift Stores</span><br><span class="line">2021-11-12 10:25:07.8539 INFO [OnError:Paramater]@Country:USA</span><br><span class="line">2021-11-12 10:25:07.8553 INFO [OnError]Exeception:SqlSugar.SqlSugarException: PROCEDURE classicmodels.SP1 does not exist</span><br></pre></td></tr></table></figure>

<p>可以看出執行錯誤時的<code>Interceptor</code>順序為</p>
<ul>
<li>OnExecutingChangeSql</li>
<li>OnLogExecuting</li>
<li>OnError</li>
</ul>
<p>從上述兩種情境執行結果可以看出<code>OnExecuted</code>及<code>OnError</code>是依照執行正確與否擇一觸發。</p>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>筆者在公司環境混用<code>EFCore</code>及<code>Dapper</code>，為了<code>SQL Log</code>花了一番功夫，也不是很完整的Solution，筆者這邊是用自定義的<code>SqlConnection</code>及<code>DBCommand</code>等方式完成，所以是<code>override</code>的概念來擴充，本身不會參與執行階段，變成原本的需求是Sql出現Error時才需記錄其完整SQL指令部份就沒有百分之百達到，依筆者的作法，所有的Sql指令都會紀錄，但出現Error後紀錄又是另一個事件<code>GlobalErrorHanlder</code>，因此Log紀錄會分化成兩筆資料，實際追蹤上是需要一點時間查找。</p>
<p>反觀<code>SqlSugar</code>，可以使用Lambda操作(Insert, Update)，也可以執行原生SQL，Interceptor事件也是包得好好的，依筆者公司的需求，只要實作<code>OnError</code>事件即可，是個完美解決方案，筆者會花些時間在公司導入<code>SqlSugar</code>，以取代<code>EFCore</code>、<code>Dapper</code>混用效果。</p>
<p>參考</p>
<ul>
<li><a href="https://www.donet5.com/Home/Doc?typeId=1204">https://www.donet5.com/Home/Doc?typeId=1204</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>sqlsugar</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>sqlsugar</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]ORM系列-SqlSugar:實體產生器</title>
    <url>/2021/11/11/orm-series-sqlsugar-model-generator/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者這邊已經寫了幾篇<code>SqlSugar</code>的介紹文章，筆者一開始就形容<code>SqlSugar</code>是<code>EFCore</code>跟<code>Dapper</code>的完美融合體，結合兩個套件有的優點並極大化其效用，就像這篇的主題，<code>SqlSugar</code>有提供產生實體的相關API，筆者目標是加以包裝變成是一個<code>dotnet tool</code>，可以透過下指令的方式完成產生實體作業。</p>
<span id="more"></span>
<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>要做成dotnet tool，需要<code>CommandLine</code>相關函式，官方有提供<code>System.CommandLine</code>這個命名空間下，但筆者這邊使用的是將<code>System.CommandLine</code>往上包一層的套件<a href="https://github.com/commandlineparser/commandline">CommandLineParser</a>，<br>只要於宣告物件上套上特定的<code>Attribute</code>即可生效，超方便使用。</p>
<h2 id="建立專案"><a href="#建立專案" class="headerlink" title="建立專案"></a>建立專案</h2><p>筆者這邊就使用<code>dotnet cli</code>來建立</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet new console -o Demo.Models.Generator</span><br><span class="line"><span class="built_in">cd</span> Demo.Models.Generator</span><br><span class="line">code .</span><br></pre></td></tr></table></figure>

<h2 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h2><p>筆者這邊使用的是<a href="https://github.com/commandlineparser/commandline">CommandLineParser</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet add package CommandLineParser</span><br><span class="line">dotnet add package sqlsugarcore</span><br><span class="line">dotnet add package MySqlConnector</span><br></pre></td></tr></table></figure>

<h2 id="Options物件宣告"><a href="#Options物件宣告" class="headerlink" title="Options物件宣告"></a>Options物件宣告</h2><p>接下來先製作<code>Options</code>物件，基本上就包含</p>
<ul>
<li>連線字串</li>
<li>實體檔案放置位置</li>
<li>實體物件的預設NameSpace</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Options</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Option(&#x27;c&#x27;, <span class="string">&quot;connectionstring&quot;</span>, Required = true, HelpText = <span class="string">&quot;資料庫連線字串&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ConnectionString &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Option(&#x27;p&#x27;, <span class="string">&quot;path&quot;</span>, Required = true, HelpText = <span class="string">&quot;Models檔案放置路徑&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ModelPath &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Option(&#x27;n&#x27;, <span class="string">&quot;namespace&quot;</span>, Required = true, HelpText = <span class="string">&quot;Model命名空間&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ModelNameSpace &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="定義實作邏輯"><a href="#定義實作邏輯" class="headerlink" title="定義實作邏輯"></a>定義實作邏輯</h2><p>筆者這邊就以參考的部落格中的教學文章一樣，宣告一個執行<code>Command</code>的實作邏輯，實作細節參考<code>SqlSugar</code>的<code>實體生成</code>那一章節，一行就搞定，包含詳細的<code>SqlSugar</code>對應的<code>Attribute</code>已套上，非常的方便，不然自己手動一個一個宣告會很浪費時間，這也算是基礎建設的一環，最好是透過一行指令就能搞定最好。</p>
<p>筆者公司環境之前都使用<code>EFCore</code>及<code>Dapper</code>混合使用的關係，實體部分透過<code>EFCore</code>的<code>Cli</code>指令來完成，因為筆者環境都是使用<code>DBFirst</code>的方式，使用到的指令就是<code>dotnet ef scaffold</code>來完成生成實體作業，且筆者同事把這行指令用成<code>batch檔案</code>，每次要更新實體，只要點擊兩下即可完成。筆者的靈感來自於這裡，因此想要把<code>SqlSugar</code>的實體生成部份包裝成<code>dotnet tool</code>的形式來表現，使用一行指令即可完成。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Run</span>(<span class="params">Options option</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//Console.WriteLine($&quot;The value for --connectionstring is: &#123;option.ConnectionString&#125;&quot;);</span></span><br><span class="line">    <span class="comment">//Console.WriteLine($&quot;The value for --path is: &#123;option.ModelPath&#125;&quot;);</span></span><br><span class="line">    <span class="comment">//Console.WriteLine($&quot;The value for --namespace is: &#123;option.ModelNameSpace&#125;&quot;);</span></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">var</span> _db = <span class="keyword">new</span> SqlSugarClient(<span class="keyword">new</span> ConnectionConfig()</span><br><span class="line">    &#123;</span><br><span class="line">        DbType = SqlSugar.DbType.SqlServer,</span><br><span class="line">        ConnectionString = option.ConnectionString,</span><br><span class="line">        InitKeyType = InitKeyType.Attribute,</span><br><span class="line">        IsAutoCloseConnection = <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">    _db.DbFirst.IsCreateAttribute().CreateClassFile(option.ModelPath, option.ModelNameSpace);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Main中呼叫"><a href="#Main中呼叫" class="headerlink" title="Main中呼叫"></a>Main中呼叫</h2><p>完整程式碼如下:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;       </span><br><span class="line">        Parser.Default.ParseArguments&lt;Options&gt;(args).WithParsed(Run);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="命令列執行"><a href="#命令列執行" class="headerlink" title="命令列執行"></a>命令列執行</h2><p>筆者這邊就先以<code>dotnet run</code>來展示其效果</p>
<h3 id="help說明效果"><a href="#help說明效果" class="headerlink" title="help說明效果"></a>help說明效果</h3><p>跟著筆者看一下<code>Options</code>宣告完後自動有help的說明</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet run -- --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># 以下為輸出結果</span></span><br><span class="line">Demo.Models.Generator 1.0.0</span><br><span class="line">Copyright (C) 2021 Demo.Models.Generator</span><br><span class="line"></span><br><span class="line">  -c, --connectionstring    Required. 資料庫連線字串</span><br><span class="line"></span><br><span class="line">  -p, --path                Required. Models檔案放置路徑</span><br><span class="line"></span><br><span class="line">  -n, --namespace           Required. Model命名空間</span><br><span class="line"></span><br><span class="line">  --<span class="built_in">help</span>                    Display this <span class="built_in">help</span> screen.</span><br><span class="line"></span><br><span class="line">  --version                 Display version information.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="產生Model檔案指令"><a href="#產生Model檔案指令" class="headerlink" title="產生Model檔案指令"></a>產生Model檔案指令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet run -- -c <span class="string">&quot;Server=localhost;Database=classicmodels;Uid=root;Pwd=\!QAZ2wsx&quot;</span> -p <span class="string">&quot;/Users/eugenesu/Desktop/Desktop - Eugene’s MacBook Pro/Learning/Blog/DemoProjects/Demo.ORM/Demo.ORM.API/Models/SqlSugar&quot;</span> -n <span class="string">&quot;Demo.ORM.Models.SqlSugar&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="產生的Model檔案內容"><a href="#產生的Model檔案內容" class="headerlink" title="產生的Model檔案內容"></a>產生的Model檔案內容</h2><p>透過指令產生之Model，已套上SqlSugar獨有的Attribute，利用DBFirst方式建立SqlSugar符合的資料庫對應物件如此簡單啊</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> SqlSugar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Demo.ORM.Models.SqlSugar</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">SugarTable(<span class="string">&quot;customers&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">customers</span></span><br><span class="line">    &#123;</span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="title">customers</span>()</span>&#123;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Desc:</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Default:</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Nullable:False</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>           </span></span><br><span class="line">           [<span class="meta">SugarColumn(IsPrimaryKey=true)</span>]</span><br><span class="line">           <span class="keyword">public</span> <span class="built_in">int</span> customerNumber &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Desc:</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Default:</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Nullable:False</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>           </span></span><br><span class="line">           <span class="keyword">public</span> <span class="built_in">string</span> customerName &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Desc:</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Default:</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Nullable:False</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>           </span></span><br><span class="line">           <span class="keyword">public</span> <span class="built_in">string</span> contactLastName &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Desc:</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Default:</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Nullable:False</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>           </span></span><br><span class="line">           <span class="keyword">public</span> <span class="built_in">string</span> contactFirstName &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Desc:</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Default:</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Nullable:False</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>           </span></span><br><span class="line">           <span class="keyword">public</span> <span class="built_in">string</span> phone &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Desc:</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Default:</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Nullable:False</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>           </span></span><br><span class="line">           <span class="keyword">public</span> <span class="built_in">string</span> addressLine1 &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Desc:</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Default:</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Nullable:True</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>           </span></span><br><span class="line">           <span class="keyword">public</span> <span class="built_in">string</span> addressLine2 &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Desc:</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Default:</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Nullable:False</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>           </span></span><br><span class="line">           <span class="keyword">public</span> <span class="built_in">string</span> city &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Desc:</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Default:</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Nullable:True</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>           </span></span><br><span class="line">           <span class="keyword">public</span> <span class="built_in">string</span> state &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Desc:</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Default:</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Nullable:True</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>           </span></span><br><span class="line">           <span class="keyword">public</span> <span class="built_in">string</span> postalCode &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Desc:</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Default:</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Nullable:False</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>           </span></span><br><span class="line">           <span class="keyword">public</span> <span class="built_in">string</span> country &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Desc:</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Default:</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Nullable:True</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>           </span></span><br><span class="line">           <span class="keyword">public</span> <span class="built_in">int</span>? salesRepEmployeeNumber &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Desc:</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Default:</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> Nullable:True</span></span><br><span class="line">           <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>           </span></span><br><span class="line">           <span class="keyword">public</span> <span class="built_in">decimal</span>? creditLimit &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>筆者這邊還尚欠一環，應該要將該專案包裝成<code>nuget</code>套件，並安裝於<code>dotnet tool</code>中，才可以真正的以<code>dotnet tool</code>的形式執行相關作業，筆者會再寫一篇說明，這篇就到這邊了，希望對你有幫助。</p>
<p>參考</p>
<ul>
<li><a href="https://blog.walterlv.com/post/introduce-command-line-parser.html">https://blog.walterlv.com/post/introduce-command-line-parser.html</a></li>
<li><a href="https://github.com/commandlineparser/commandline">https://github.com/commandlineparser/commandline</a></li>
<li><a href="https://www.donet5.com/Home/Doc?typeId=1207">https://www.donet5.com/Home/Doc?typeId=1207</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>sqlsugar</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>sqlsugar</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]ORM系列-Chloe:共同欄位新增、編輯技巧</title>
    <url>/2021/11/04/orm-series-chloe-audit-columns/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>有在觀看筆者的ORM系列文就知道，其中<code>EFCore</code>就這麼一篇出現過，即使用<code>override</code> <code>SaveChanges</code>方法來達到針對共同欄位的新增、編輯功能，什麼叫<code>共同欄位</code>，筆者常設計的就是<code>CreatedAt</code>、<code>CreatedBy</code>、<code>UpdatedAt</code>、<code>UpdatedBy</code>等，這因開發環境不同，習慣的命名方式可能不一樣，但一樣的是，要紀錄該筆資料列的新增、編輯的時間及使用者，原因就這麼單純。<br>若以<code>Dapper</code>或<code>ADO.Net</code>以純SQL的方式製作，會在<code>Insert</code>、<code>Update</code>語法上多組這些相關欄位上去，也不是不行，但以一個大型系統來說，若偏後台管理平台來說，這些欄位都是極重要，且每張資料表皆必須要有，這時每段Service都要填上，也是會累死人，<a href="/2021/09/05/orm-series-efcore-override-savechanges/" title="[DotnetCore]ORM系列-EFCore:資料表共同欄位設定">[DotnetCore]ORM系列-EFCore:資料表共同欄位設定</a>就是於<code>EFCore</code>世界中的解決方式，筆者今天想要來聊聊<code>Chloe</code>的解決方式。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><h2 id="回憶Interceptor"><a href="#回憶Interceptor" class="headerlink" title="回憶Interceptor"></a>回憶Interceptor</h2><p>這章節，筆者就很快帶過，<code>Chloe</code>套件本身提供攔截器，你要存取資料庫的IO作業途中，可以透過攔截器做一些事情，例如紀錄Log等等，可以透過它提供的事件器做攔截，主要大分類分為<code>Executing</code>及<code>Executed</code>兩大類，對於<code>ADO.Net</code>提供的方法</p>
<ul>
<li>ExecuteNonQuery</li>
<li>ExecuteReader</li>
<li>ExecuteScalar</li>
</ul>
<p>以上這三種對應<code>Executing</code>及<code>Executed</code>，共有六大Method可以改寫</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DbCommandInterceptor</span> : <span class="title">IDbCommandInterceptor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">NonQueryExecuted</span>(<span class="params">IDbCommand command, DbCommandInterceptionContext&lt;<span class="built_in">int</span>&gt; interceptionContext</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">NonQueryExecuting</span>(<span class="params">IDbCommand command, DbCommandInterceptionContext&lt;<span class="built_in">int</span>&gt; interceptionContext</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 执行 DbCommand.ExecuteReader() 时调用 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReaderExecuting</span>(<span class="params">IDbCommand command, DbCommandInterceptionContext&lt;IDataReader&gt; interceptionContext</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        interceptionContext.DataBag.Add(<span class="string">&quot;startTime&quot;</span>, DateTime.Now);</span><br><span class="line">        Console.WriteLine(command.CommandText);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 执行 DbCommand.ExecuteReader() 后调用 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReaderExecuted</span>(<span class="params">IDbCommand command, DbCommandInterceptionContext&lt;IDataReader&gt; interceptionContext</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        DateTime startTime = (DateTime)(interceptionContext.DataBag[<span class="string">&quot;startTime&quot;</span>]);</span><br><span class="line">        Console.WriteLine(DateTime.Now.Subtract(startTime).TotalMilliseconds);</span><br><span class="line">        <span class="keyword">if</span> (interceptionContext.Exception == <span class="literal">null</span>)</span><br><span class="line">            Console.WriteLine(interceptionContext.Result.FieldCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ScalarExecuted</span>(<span class="params">IDbCommand command, DbCommandInterceptionContext&lt;<span class="built_in">object</span>&gt; interceptionContext</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ScalarExecuting</span>(<span class="params">IDbCommand command, DbCommandInterceptionContext&lt;<span class="built_in">object</span>&gt; interceptionContext</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接著於DI區段中註冊其Interceptor</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 以上省略</span></span><br><span class="line">    services.AddScoped&lt;ChloeORM.IDbContext&gt;((serviceProvider) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> dbContext = <span class="keyword">new</span> ChloeORM.MySql.MySqlContext(</span><br><span class="line">            <span class="keyword">new</span> MySqlConnectionFactory(Configuration.GetConnectionString(<span class="string">&quot;ClassicModels&quot;</span>)));</span><br><span class="line">            dbContext.Session.AddInterceptor(<span class="keyword">new</span> DbCommandInterceptor());<span class="comment">//新增自己實作的Interceptor</span></span><br><span class="line">        <span class="keyword">return</span> dbContext;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 以下省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Insert改造作業"><a href="#Insert改造作業" class="headerlink" title="Insert改造作業"></a>Insert改造作業</h2><p>筆者DEMO御用的<code>MySQL</code>範例資料庫<code>classicmodels</code>，可惜沒有設計這種共同欄位，筆者就拿自己實作的專案中真實例子來做示範，但因專案本身需保密，筆者這邊就僅貼出與這主題相關的Code，該專案搭配的資料庫是<code>PostgreSql</code>，因此<code>Chloe</code>套件部份需安裝</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet add package Chloe.PostgreSQL</span><br></pre></td></tr></table></figure>
<p>另外註明一下專案搭配資料庫中，共同欄位分別為</p>
<ul>
<li>created_at</li>
<li>created_by</li>
<li>updated_at</li>
<li>updated_by</li>
</ul>
<h3 id="SQL-Parser"><a href="#SQL-Parser" class="headerlink" title="SQL Parser"></a>SQL Parser</h3><p>筆者要來解釋一下，為什麼需要這節勒，從上述的回憶章節可以看出，在<code>Interceptor事件</code>中可以取得的是<code>IDbCommand</code>物件，可以想像一下，之所以可以透過Lamba的形式存取、操作資料庫，是因<code>Chloe</code>套件將我們撰寫的<code>Lambda</code>語法透過<code>Expression Tree</code>的解析，最終組合成Sql指令，並以<code>IDBCommand</code>的形式，透過<code>Microsoft.Data.SqlClient(ADO.Net)</code>，進行資料庫操作。<br>因此我們想要在Interceptor事件中加工，必須得解析其<code>CommandText</code>，筆者搜尋了一下<code>SQL Parser</code>這個關鍵字，眼中浮現的是<a href="https://github.com/bruce-dunwiddie/tsql-parser">https://github.com/bruce-dunwiddie/tsql-parser</a>，<code>TSQL</code>解析一大利器，不妨來用看看吧。</p>
<h4 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet add package TSQL.Parser</span><br></pre></td></tr></table></figure>
<h4 id="原理介紹"><a href="#原理介紹" class="headerlink" title="原理介紹"></a>原理介紹</h4><p>跟著筆者看一段code感受一下其用法及威力</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tsql = command.CommandText;</span><br><span class="line">TSQLStatement statement = TSQLStatementReader.ParseStatements(tsql)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">switch</span> (statement.Type)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> TSQLStatementType.Insert:</span><br><span class="line">        <span class="comment">//撰寫實際操作內容</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我們將得到的sql指令透過<code>TSQLStatementReader.ParseStatements</code>解析，因無法確認sql指令包含幾個sql指令，因此該Method回傳的是一個<code>TSQLStatement List</code>，因筆者確定專案情境只會包含一個sql指令，因此取第一個Item，接著要做一些過濾使更安全的實作。試想我們撰寫程式碼的地方是Interceptor，經由註冊是全域套用的，只要透過<code>Chloe</code>套件操作的DBCommand皆會經過該Interceptor事件方法。<br>因Sql指令本身屬select或exec SP，insert或者update等諸多指令，皆會經過這些事件方法中，因此必須過濾為<code>Insert Type</code>，理解到這邊已掌握其套路。接著介紹一下<code>TSQL.Parser</code>的運作原理，他會將我們餵進去的sql指令一段一段解析，拆解為不同類型的<code>TSQLTokenType</code>，筆者用到的類別為</p>
<ul>
<li>StringLiteral</li>
<li>Variable</li>
</ul>
<p>像<code>Insert Into</code>這種則歸類在<code>Keyword</code>類型中，但因筆者一開始就判斷好<code>TSQLStatementType.Insert</code>，因此不需要再過濾一次其<code>Keyword</code>類型的<code>TSQLTokenType</code>，我們只要將<code>StringLiteral</code>及<code>Variable</code>搜集好，再做一些邏輯處理就可以了。</p>
<h3 id="整合至Interceptor事件中"><a href="#整合至Interceptor事件中" class="headerlink" title="整合至Interceptor事件中"></a>整合至Interceptor事件中</h3><p>透過上個章節，已經有<code>TSQL.Parser</code>的基礎概念後，接著該是實作的時候了，但還差一步，回憶章節中提到的有六大Event Method可以使用，筆者這主題的情境是實際執行SQL指令前做加工，因此一定是寫在<code>Executing</code>事件中，再來就要實際跑跑看<code>Chloe</code>的<code>Insert</code>語法會跑到哪個事件中，經由筆者測試，發現<code>Chloe</code>的<code>Insert</code>語法會使用<code>ExecuteReader</code>，而非<code>ExecuteNonQuery</code>，其因在於<code>Chloe</code>很貼心的將<code>Insert</code>後的資料列所對應之<code>識別序號</code>會撈回來讓程式端繼續使用，因此使用<code>ExecuteReader</code>。<br>這樣一來我們就知道將程式該寫在哪裡，就在<code>ReaderExecuting</code>事件中，接著看程式碼之前聊聊筆者的思路</p>
<ul>
<li>蒐集<code>StringLiteral</code>及<code>Variable</code>類型的<code>TSQLTokenType</code></li>
<li>因Sql指令的特色，Column與Variable是雙雙對對對應關係，因此透過關鍵字<code>create_at</code>、<code>update_at</code>找到<code>StringLiteral</code>清單中的<code>Index</code></li>
<li>透過第二步驟得到的<code>Index</code>，於<code>Variable</code>清單中搜尋對應的<code>Paramater Name</code></li>
<li>透過第三步驟得到的<code>Parameter Name</code>於command.Paramaters中搜尋其對應Parameter</li>
<li>透過第四步驟得到的<code>DBParameter</code>的<code>Value</code>重新指定為<code>DateTime.Now</code></li>
</ul>
<p>講完洛洛等的思路，咀嚼一下，接著看實際程式碼</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReaderExecuting</span>(<span class="params">IDbCommand command, DbCommandInterceptionContext&lt;IDataReader&gt; interceptionContext</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> tsql = command.CommandText;</span><br><span class="line">    TSQLStatement statement = TSQLStatementReader.ParseStatements(tsql)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">switch</span> (statement.Type)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> TSQLStatementType.Insert:</span><br><span class="line">            TSQLInsertStatement insert = TSQLStatementReader.ParseStatements(tsql)[<span class="number">0</span>] <span class="keyword">as</span> TSQLInsertStatement;</span><br><span class="line">            <span class="keyword">var</span> stringLiteralList = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">            <span class="keyword">var</span> variableList = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">            <span class="keyword">foreach</span> (TSQLToken token <span class="keyword">in</span> insert.Tokens)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">switch</span> (token.Type)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">case</span> TSQLTokenType.StringLiteral:</span><br><span class="line">                        stringLiteralList.Add(token.Text);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> TSQLTokenType.Variable:</span><br><span class="line">                        variableList.Add(token.Text);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> createdAtIndex = stringLiteralList.IndexOf(<span class="string">&quot;\&quot;created_at\&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> updatedAtIndex = stringLiteralList.IndexOf(<span class="string">&quot;\&quot;updated_at\&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> createdAtdbParameter = command.Parameters[command.Parameters.IndexOf(variableList[createdAtIndex - <span class="number">1</span>])] <span class="keyword">as</span> NpgsqlParameter;</span><br><span class="line">            createdAtdbParameter.Value = DateTime.Now;</span><br><span class="line">            <span class="keyword">var</span> updatedAtdbParameter = command.Parameters[command.Parameters.IndexOf(variableList[updatedAtIndex - <span class="number">1</span>])] <span class="keyword">as</span> NpgsqlParameter;</span><br><span class="line">            updatedAtdbParameter.Value = DateTime.Now;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="literal">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 以下省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上程式碼部份，要交代一下的是，筆者已經在前面說過<code>Column</code>與<code>Variable(Parameter Name)</code>雙雙對對的關係，為何還要<code>Index - 1</code>，而不是直接使用相同的<code>Index</code>?那是因為<code>Chloe</code>本身在轉換Sql指令時<code>Table名稱</code>也會加<code>雙引號</code>，導致<code>TSQL Parser</code>的解析下，<code>Table名稱</code>也會被歸類在<code>String Literal</code>的<code>TSQLTokenType</code>中，因此<code>Index - 1</code>才會是對的Index，這是筆者事先於Linqpad中驗證過得出的經驗。</p>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>來到這，已大功告成，筆者認為已把來龍去脈交代過，進階延伸就靠各位的本領了，因筆者某些專案僅使用<code>Chloe</code>套件存取資料庫，因此得找出相對應的解決方案，筆者也持續在精進中，希望這篇對你有幫助。</p>
<p>參考</p>
<ul>
<li><a href="https://dotnetfiddle.net/Hz0TvA">https://dotnetfiddle.net/Hz0TvA</a></li>
<li><a href="https://github.com/bruce-dunwiddie/tsql-parser">https://github.com/bruce-dunwiddie/tsql-parser</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
  </entry>
  <entry>
    <title>[DotnetCore]ORM系列-SqlSugar:查詢篇1</title>
    <url>/2021/11/02/orm-series-sqlsugar-query/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>昨日介紹完<code>SqlSugar</code>後，是否被他的簡單易用吸引了呢，筆者今天就介紹它的查詢實作，就會漸漸發現其功能之強大，今天就照<a href="https://www.donet5.com/Home/Doc?typeId=1187">https://www.donet5.com/Home/Doc?typeId=1187</a>操作一遍吧。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>查詢部份的可以使用的操作多到爆炸，這篇就以挑幾則查詢做示範，會將查詢分門別類，大概會分成數篇來做一一介紹。以<code>Queryable</code>開頭，使用泛型方式將欲查詢的<code>Model</code>傳入，接著使用<code>Where</code>關鍵字作過濾條件作業，<code>ORM</code>框架該有的皆有，讓我有一種感覺是<code>EFCore</code>跟<code>Dapper</code>的綜合體，且是擷取兩邊的優點而設計。</p>
<h2 id="基礎查詢"><a href="#基礎查詢" class="headerlink" title="基礎查詢"></a>基礎查詢</h2><p>基礎查詢不外乎就是將條件過濾串接，分為主鍵查詢、單、多條件過濾查詢，也有些情境是會使用到<code>OR</code>將多個條件串接，通通都有支援。</p>
<h3 id="根據主鍵查詢"><a href="#根據主鍵查詢" class="headerlink" title="根據主鍵查詢"></a>根據主鍵查詢</h3><p>筆者這邊使用<code>Customer</code>表，該表的主鍵為<code>CustomerName</code>，因此使用<code>CustomerName</code>當作Route參數一部份，傳進Action中過濾</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 依照主鍵取得資料</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;customerNumber&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">ProducesResponseType(typeof(Customers), StatusCodes.Status200OK)</span>]</span><br><span class="line">[<span class="meta">HttpPost(<span class="string">&quot;&#123;customerNumber&#125;&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetCustomerById</span>(<span class="params"><span class="built_in">int</span> customerNumber</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> Ok(_db.Queryable&lt;Customers&gt;().First(x =&gt; x.CustomerNumber == customerNumber));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/11/02/orm-series-sqlsugar-query/where_by_primarykey.png" class="" title="[根據主鍵查詢]">

<h3 id="單條件查詢"><a href="#單條件查詢" class="headerlink" title="單條件查詢"></a>單條件查詢</h3><p>筆者這邊設計一個<code>Conditions</code>物件，為條件過濾做準備</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomerConditions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CustomerName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CountryName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="built_in">string</span>&gt; StateList &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接著為示範單條件過濾，筆者這邊使用<code>CustomerName</code>欄位當作主要單條件過濾的欄位</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 單條件過濾</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;conditions&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">ProducesResponseType(typeof(List&lt;Customers&gt;), StatusCodes.Status200OK)</span>]</span><br><span class="line">[<span class="meta">HttpPost(<span class="string">&quot;where&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetCustomerByConditions</span>(<span class="params">CustomerConditions conditions</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> result = _db.Queryable&lt;Customers&gt;()</span><br><span class="line">    .Where(x =&gt; x.CustomerName.Contains(conditions.CustomerName))</span><br><span class="line">    .Select&lt;Customers&gt;()</span><br><span class="line">    .ToList();</span><br><span class="line">    <span class="keyword">return</span> Ok(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/11/02/orm-series-sqlsugar-query/where_by_one_condition.png" class="" title="[單條件查詢]">
<h3 id="多條件查詢"><a href="#多條件查詢" class="headerlink" title="多條件查詢"></a>多條件查詢</h3><p>接著筆者這邊使用上節提到的<code>Conditions</code>物件，筆者這節會使用<code>CustomerName</code>、<code>Country</code>欄位當作多條件過濾使用欄位</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 多條件查詢</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;conditions&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">ProducesResponseType(typeof(List&lt;Customers&gt;), StatusCodes.Status200OK)</span>]</span><br><span class="line">[<span class="meta">HttpPost(<span class="string">&quot;wheremultiple&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetCustomersByMultipleConditions</span>(<span class="params">CustomerConditions conditions</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> result = _db.Queryable&lt;Customers&gt;()</span><br><span class="line">    .Where(x =&gt; x.CustomerName.Contains(conditions.CustomerName) &amp;&amp; x.Country.Contains(conditions.CountryName))</span><br><span class="line">    .ToList();</span><br><span class="line">    <span class="keyword">return</span> Ok(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/11/02/orm-series-sqlsugar-query/where_by_multiple_conditions.png" class="" title="[多條件查詢]">
<h3 id="動態OR查詢"><a href="#動態OR查詢" class="headerlink" title="動態OR查詢"></a>動態OR查詢</h3><p>一定會遇到查詢情境是，某個欄位條件符合A或B，這個時後可以使用<code>SqlSugar</code>提供的<code>Expression</code>來達到</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Or查詢</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;conditions&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">ProducesResponseType(typeof(List&lt;Customers&gt;), StatusCodes.Status200OK)</span>]</span><br><span class="line">[<span class="meta">HttpPost(<span class="string">&quot;or&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetCustomersByOrConditions</span>(<span class="params">CustomerConditions conditions</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> expressions = Expressionable.Create&lt;Customers&gt;();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> state <span class="keyword">in</span> conditions.StateList)</span><br><span class="line">    &#123;</span><br><span class="line">        expressions.Or(x =&gt; x.State == state);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> result = _db.Queryable&lt;Customers&gt;()</span><br><span class="line">    .Where(expressions.ToExpression())</span><br><span class="line">    .ToList();</span><br><span class="line">    <span class="keyword">return</span> Ok(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/11/02/orm-series-sqlsugar-query/where_by_expression.png" class="" title="[Or查詢]">
<h2 id="Top查詢"><a href="#Top查詢" class="headerlink" title="Top查詢"></a>Top查詢</h2><h3 id="取得第一筆"><a href="#取得第一筆" class="headerlink" title="取得第一筆"></a>取得第一筆</h3><p>使用<code>First</code>關鍵字做取得，其實已經於<code>主鍵查詢</code>時已實作過，基本上跟<code>Linq</code>的<code>FirstOrDefault</code>相同，沒有資料則會回傳<code>null</code>，筆者就不再特別示範</p>
<h3 id="前幾筆紀錄"><a href="#前幾筆紀錄" class="headerlink" title="前幾筆紀錄"></a>前幾筆紀錄</h3><p>筆者這邊將<code>PageSize</code>當作<code>Route</code>的一部份，完成撈取前幾筆紀錄的查詢</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 取得前幾筆資料</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;pageSize&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">ProducesResponseType(typeof(List&lt;Customers&gt;), StatusCodes.Status200OK)</span>]</span><br><span class="line">[<span class="meta">HttpPost(<span class="string">&quot;take/&#123;pageSize&#125;&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetCustomersByTake</span>(<span class="params"><span class="built_in">int</span> pageSize</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> result = _db.Queryable&lt;Customers&gt;()</span><br><span class="line">    .Take(pageSize)</span><br><span class="line">    .ToList();</span><br><span class="line">    <span class="keyword">return</span> Ok(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/11/02/orm-series-sqlsugar-query/take_pagesize.png" class="" title="[取得前幾筆查詢]">

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>筆者這邊Demo Project寫下來的感覺是，若會使用<code>LinqToSql</code>的人，毫無違和感，要熟悉一下關鍵字，進到<code>Where</code>條件的Expression輸入區塊時，完全熟悉起來，強型別就是棒啊，簡單查詢完全不想用純<code>String</code>的sql宣告查詢，且不用像<code>EFCore</code>大砲那樣顧前顧後，若操作不好，擦槍走火的事件發生，基本上就是把你宣告的Expression單純轉換成Sql後往資料庫查詢，將查詢結果已幫你Binding至對應的Model中，完全是ORM框架中的一大利器啊。</p>
<p>參考</p>
<ul>
<li><a href="https://www.donet5.com/Home/Doc?typeId=1187">https://www.donet5.com/Home/Doc?typeId=1187</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>sqlsugar</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>sqlsugar</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]ORM系列-SqlSugar:入門篇</title>
    <url>/2021/11/01/orm-series-sqlsugar-entry/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>又來到介紹ORM框架的時候到了，筆者之前就介紹過類似的<a href="/2021/09/04/orm-series-chloe-entry/" title="[DotnetCore]ORM系列-Chloe:入門篇">[DotnetCore]ORM系列-Chloe:入門篇</a>，總覺得差一點，類似像<code>Interceptor</code>, Chloe部份是DataBag的概念，可以於<code>Interceptor</code>事件間傳遞物件，筆者寫過一篇<a href="/2021/09/05/orm-series-efcore-override-savechanges/" title="[DotnetCore]ORM系列-EFCore:資料表共同欄位設定">[DotnetCore]ORM系列-EFCore:資料表共同欄位設定</a>，其中針對每個表中共同擁有的欄位做更新時著實方便。<br><code>Chloe</code>也不是做不到，因<code>Interceptor</code>中可存取到<code>IDBCommand</code>，必須自己加以實作，不像<code>EFCore</code>、<code>SqlSugar</code>那樣有包好的事件可使用。筆者於公司開發專案環境中使用<code>EFCore</code>、<code>Dapper</code>，由於<code>Dapper</code>必須得撰寫sql，Insert、Update時<code>EFCore</code>方便些，由於筆者對於<code>EFCore</code>也不是非常熟捻，因此於<code>Hangfire</code>併發Job時吃了一點苦，高併發會導致連線錯亂，直接噴無法連線資料庫等各種不可控的錯誤，心念一轉，何不直接導入此主題要介紹的ORM框架-<code>SqlSugar</code></p>
<span id="more"></span>
<ul>
<li>可以透過Linq完成資料庫資料庫DML操作(select, insert, update, delete)</li>
<li>可以透過純sql的方式完成DML操作(plain sql, store procedure)</li>
<li>可以使用ADO.Net的各種method</li>
<li>跨資料庫存取</li>
<li>多種資料庫資源</li>
<li>一個專案可以設置多個config連線至多個資料庫操作</li>
</ul>
<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>這篇就以入們應用為主，筆者繼續使用之前設置過的環境，請參考</p>
<ul>
<li><a href="/2021/08/23/mysql-install/" title="[MySQL]安裝與設定">[MySQL]安裝與設定</a></li>
<li><a href="/2021/08/23/mysql-sample-db/" title="[MySQL]範例資料庫設定">[MySQL]範例資料庫設定</a></li>
</ul>
<h2 id="建立Demo專案"><a href="#建立Demo專案" class="headerlink" title="建立Demo專案"></a>建立Demo專案</h2><p>筆者直接使用<code>cli</code>指令完成建置新專案</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> Demo.ORM</span><br><span class="line"><span class="built_in">cd</span> Demo.ORM</span><br><span class="line">dotnet new webapi -o Demo.ORM.API --no-https -f net5.0</span><br></pre></td></tr></table></figure>
<p>執行看看有無問題</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> Demo.ORM.API</span><br><span class="line">dotnet run</span><br><span class="line"><span class="comment"># 瀏覽器中輸入http://localhost:5000/weatherforecast</span></span><br></pre></td></tr></table></figure>
<p>有看到<code>WeatherForecast</code>回傳的<code>json</code>物件列表，表示建置沒問題</p>
<h2 id="安裝SqlSugarCore套件"><a href="#安裝SqlSugarCore套件" class="headerlink" title="安裝SqlSugarCore套件"></a>安裝SqlSugarCore套件</h2><p>接著安裝<code>SqlSugarCore</code>套件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet add package SqlSugarCore</span><br></pre></td></tr></table></figure>
<h2 id="安裝MysqlConnector套件"><a href="#安裝MysqlConnector套件" class="headerlink" title="安裝MysqlConnector套件"></a>安裝MysqlConnector套件</h2><p>因筆者使用的是<code>MySql</code>資料庫，官方教學文件就有提到<code>MySql</code>必須安裝相對應的<code>MySqlConnector</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet add package MySqlConnector</span><br></pre></td></tr></table></figure>
<h2 id="註冊SqlSugarClient"><a href="#註冊SqlSugarClient" class="headerlink" title="註冊SqlSugarClient"></a>註冊SqlSugarClient</h2><p>接著準備好連線字串，直接宣告於<code>appsettings.development.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;ConnectionStrings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ClassicModels&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Server=localhost;Database=classicmodels;Uid=root;Pwd=!QAZ2wsx;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>於Startup中註冊其<code>SqlSugarClient</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以上省略</span></span><br><span class="line">    services.AddTransient(provider =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlSugarClient(<span class="keyword">new</span> ConnectionConfig()</span><br><span class="line">        &#123;</span><br><span class="line">            ConnectionString =Configuration.GetConnectionString(<span class="string">&quot;ClassicModels&quot;</span>),<span class="comment">//连接符字串</span></span><br><span class="line">            DbType = DbType.MySql, <span class="comment">//数据库类型</span></span><br><span class="line">            IsAutoCloseConnection = <span class="literal">true</span> <span class="comment">//不设成true要手动close</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>設置起來，超簡單的，筆者直接使用簡單易用的<code>AutoCloseConnection</code>模式，只要填入相對應的<code>ConnectionString</code>，因支援多種資料庫，告訴<code>SqlSugar</code>說使用哪套資料庫，完畢，跟著筆者測試看看吧。</p>
<h2 id="注入SqlSugarClient"><a href="#注入SqlSugarClient" class="headerlink" title="注入SqlSugarClient"></a>注入SqlSugarClient</h2><p>首先建立一個測試用API：<code>CustomerController</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Demo.ORM.API.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">ApiController</span>]</span><br><span class="line">    [<span class="meta">Route(<span class="string">&quot;api/[controller]&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomerController</span>:<span class="title">ControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就這樣先空著吧，再慢慢填入程式碼，以這樣的Route設置，等等Postman測試時使用<code>api/customer</code>即可，接著宣告並注入<code>SqlSugarClient</code>實體</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"><span class="keyword">using</span> SqlSugar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Demo.ORM.API.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">ApiController</span>]</span><br><span class="line">    [<span class="meta">Route(<span class="string">&quot;api/[controller]&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomerController</span> : <span class="title">ControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> SqlSugarClient _db;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CustomerController</span>(<span class="params">SqlSugarClient db</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _db = db;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="實作查詢"><a href="#實作查詢" class="headerlink" title="實作查詢"></a>實作查詢</h2><p>筆者為示範，就不用在分層什麼的了，直接將查詢語法實作於Controller中</p>
<h3 id="建立Customer資料表對應之Model"><a href="#建立Customer資料表對應之Model" class="headerlink" title="建立Customer資料表對應之Model"></a>建立Customer資料表對應之Model</h3><p>建立一個<code>Models</code>資料夾，並新增一個<code>Customers.cs</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Demo.ORM.API.Models</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Customers</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> CustomerNumber &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> CustomerName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> ContactLastName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> ContactFirstName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Phone &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> AddressLine1 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> AddressLine2 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> City &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> State &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> PostalCode &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Country &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span>? SalesRepEmployeeNumber &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">decimal</span> CreditLimit &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="實際撰寫查詢語法"><a href="#實際撰寫查詢語法" class="headerlink" title="實際撰寫查詢語法"></a>實際撰寫查詢語法</h3><p>實際於<code>Action</code>中撰寫查詢語法，筆者這邊使用上面步驟所注入之<code>SqlSugarClient</code>實體，使用<code>Queryable</code>方法取得客戶資料，可以使用<code>Select</code>取得特定欄位或物件，最後<code>ToList</code>才做真正查詢作業</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 查詢客戶國家清單</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">ProducesResponseType(typeof(List&lt;Customers&gt;), StatusCodes.Status200OK)</span>]</span><br><span class="line">[<span class="meta">HttpPost(<span class="string">&quot;&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetCustomers</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> Ok(_db.Queryable&lt;Customers&gt;().Select(x =&gt; x.Country).Distinct().ToList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="查詢結果"><a href="#查詢結果" class="headerlink" title="查詢結果"></a>查詢結果</h3><p>實際使用<code>Postman</code>做查詢，連結為<a href="http://localhost:5000/api/customer">http://localhost:5000/api/customer</a>，使用<code>HttpPost</code>，並按下<code>送出</code>，就會看到結果了</p>
<img src="/2021/11/01/orm-series-sqlsugar-entry/QueryCustomerResult.png" class="" title="[查詢客戶國家清單]">

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>這篇就以這樣簡單介紹使用方式了，筆者留個伏筆吧，<code>Chloe</code>雖好用，但對於筆者常接觸到的工作環境基本上都是<code>DBFirst</code>的方式設計資料結構為主，對於程式端中建立資料庫中的表對應之<code>Model</code>，手動建立則著實費力，<code>SqlSugar</code>提供自動產生的程式碼，若妥善利用並加以包裝，也一樣會享有<code>EFCore</code>的<code>scaffold</code>一樣的服務喔，下一篇就教學自動建立資料庫對應物件的方法吧，敬請期待。</p>
<p>參考</p>
<ul>
<li><a href="https://www.donet5.com/Home/Doc">SqlSugar官方教學文件</a></li>
<li><a href="https://mysqlconnector.net/tutorials/connect-to-mysql/">MySqlConnector For DotnetCore</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>sqlsugar</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>sqlsugar</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]排程神器-Hangfire:動台排程篇4</title>
    <url>/2021/09/11/hangfire-dynamic4/</url>
    <content><![CDATA[<img src="https://www.hangfire.io/img/ui/dashboard.png">

<span id="more"></span>

<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>前篇<a href="/2021/09/08/hangfire-dynamic1/" title="[DotnetCore]排程神器-Hangfire:動態排程篇1">[DotnetCore]排程神器-Hangfire:動態排程篇1</a>有提到共用類Job的設計，這篇主要講解各個<code>Job種類</code>的實作細節，再複習一下上篇內容，筆者這邊<code>動態排程</code>主要是著墨在排程的資訊設定於資料庫中，透過一支Job Initial的API，可以重新AddOrUpdate來達成動態排程的效果。若所有的Job是宣告於程式端中，要新增類似的Job時著實麻煩，失去其原有的設計理念。因此筆者這邊統計歸納出四種類型:</p>
<ul>
<li><code>SP執行類</code>: 可以進階設定是否要將SP執行結果打包成檔案上傳至指定路徑</li>
<li><code>Bat檔案執行類</code>: 主要是因為與其他系統串接，主要的前台部分，需要由執行期bat檔案做驅動</li>
<li><blockquote>
<p><code>下載類</code>: 主要與其他系統交換檔案，由檔案內容塞到固定的資料表中，透過一支<code>SP</code>做後置處理</p>
</blockquote>
</li>
<li><code>Normal類</code>: 有一些排程無法歸納為上述三種，即便前面執行其中一項，但後續有額外的處理，筆者這邊就不另外規劃做處理，保留其彈性</li>
</ul>
<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>講解一下下載類主要的職責，下載會分單方面取得資料應用，或取得資料後融合自己這邊的資料，再轉拋到另一個系統中等等，大概就跑不掉這兩種，因此主要做的事情</p>
<ul>
<li><code>下載檔案</code></li>
<li><code>執行SP(資料應用、融合資料)</code></li>
<li><code>上傳檔案</code></li>
</ul>
<p>筆者為這類的Job特性，設計並定義好哪些Column該放甚麼值，使共用Job可以統一做事，若有其他需求，也是屬這類的話，就照規定放資料，就是一個新的排程了。</p>
<h2 id="設計下載檔案中的資料存放結構"><a href="#設計下載檔案中的資料存放結構" class="headerlink" title="設計下載檔案中的資料存放結構"></a>設計下載檔案中的資料存放結構</h2><p>主要設計是這樣，筆者這邊寫的是一個共用類，各個排程中下載檔案格式各不相同，若由程式解析，恐怕擴充不完，筆者這邊環境比較傾向是把解析邏輯寫在SP中，以該情況來說，SP不用重新編譯，上版時比程式來得快，這樣一來，共用類的解析來說只剩下把每一列資料讀取後，原封不動的將資料列存放到共同資料結構中，由各自不同SP去解析對應的檔案內容，才得以讓共用類順利執行。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 依照該Model建一個對應的資料表</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">FileInput</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 流水序號</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">long</span> SeqNo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">// 檔案名稱</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Fname &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">// 資料日期</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> DataDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">// 每列資料</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> DataStr &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> AuditUser &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DateTime? AuditTime &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上設計僅供參考，這個完全可以照各位的環境遇到的情境，再做一個調整，筆者這邊環境需要這些欄位這樣而已。</p>
<h2 id="設計Service"><a href="#設計Service" class="headerlink" title="設計Service"></a>設計Service</h2><p><code>Service</code>這邊就以上述列的主要工作項目去做實作</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Interface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IDownloadJobService</span> : <span class="title">ISyncJobService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SyncProcess</span>(<span class="params">CommCode jobSetting</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DownloadJobService</span> : <span class="title">IDownloadJobService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> FtpServiceResolver _ftpServiceResolver;</span><br><span class="line">    <span class="keyword">private</span> IFtpService _ftpService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IFilePathService _filePathService;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _localPath;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IBusinessDateService _businessDateService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> SqlConnectionFactory _factory;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DownloadJobService</span>(<span class="params">FtpServiceResolver ftpServiceResolver</span></span></span><br><span class="line"><span class="params"><span class="function">        , IFilePathService filePathService</span></span></span><br><span class="line"><span class="params"><span class="function">        , IBusinessDateService businessDateService, SqlConnectionFactory factory</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _ftpServiceResolver = ftpServiceResolver;</span><br><span class="line">        _filePathService = filePathService;</span><br><span class="line">        _businessDateService = businessDateService;</span><br><span class="line">        _factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SyncProcess</span>(<span class="params">CommCode jobSetting</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 參考筆者動態排程1文章中的CommCode的設計，筆者這邊利用CodeVal3這個欄位做一個Config設定</span></span><br><span class="line">        <span class="comment">// 利用「;」這個符號將每個設定隔開			 </span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        0:S or F</span></span><br><span class="line"><span class="comment">        1:Server</span></span><br><span class="line"><span class="comment">        2:Account</span></span><br><span class="line"><span class="comment">        3:Password</span></span><br><span class="line"><span class="comment">        4:RemotePath</span></span><br><span class="line"><span class="comment">        5:LocalPath</span></span><br><span class="line"><span class="comment">        6:FileName</span></span><br><span class="line"><span class="comment">        7:DataDate</span></span><br><span class="line"><span class="comment">        8:FName</span></span><br><span class="line"><span class="comment">        9:StoreProcedure</span></span><br><span class="line"><span class="comment">        10:Encoding</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// Step1: Config Data Arrangement</span></span><br><span class="line">        <span class="keyword">var</span> ftpDownloadConfigSetting = jobSetting.CodeVal3.Split(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">        _ftpService = _ftpServiceResolver(ftpDownloadConfigSetting[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">var</span> ftpDownloadConfigBaseModel = <span class="keyword">new</span> FTPConfigBaseModel()</span><br><span class="line">        &#123;</span><br><span class="line">            Server = ftpDownloadConfigSetting[<span class="number">1</span>],</span><br><span class="line">            Account = ftpDownloadConfigSetting[<span class="number">2</span>],</span><br><span class="line">            Password = ftpDownloadConfigSetting[<span class="number">3</span>],</span><br><span class="line">            RemotePath = ftpDownloadConfigSetting[<span class="number">4</span>],</span><br><span class="line">            LocalPath = ftpDownloadConfigSetting[<span class="number">5</span>]</span><br><span class="line">        &#125;;</span><br><span class="line">        _localPath = _filePathService.GetDirectoryPath(ftpDownloadConfigBaseModel.LocalPath);</span><br><span class="line">        <span class="keyword">var</span> fileName = _businessDateService.GetBusinessDateWithParameter((ftpDownloadConfigSetting[<span class="number">6</span>], <span class="string">&quot;yyyyMMdd&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Step2: Fileinput Data Arrangement</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(ftpDownloadConfigSetting[<span class="number">8</span>]) == <span class="literal">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> dataDate = _businessDateService.GetBusinessDateWithParameter((ftpDownloadConfigSetting[<span class="number">7</span>], <span class="string">&quot;yyyy/MM/dd&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> fileInputs = <span class="keyword">new</span> List&lt;FileInput&gt;();</span><br><span class="line">            <span class="keyword">var</span> fName = ftpDownloadConfigSetting[<span class="number">8</span>];</span><br><span class="line">            <span class="keyword">var</span> encodingName = ftpDownloadConfigSetting[<span class="number">10</span>];</span><br><span class="line">            <span class="keyword">var</span> encoding = <span class="built_in">string</span>.IsNullOrEmpty(encodingName) ? Encoding.UTF8 </span><br><span class="line">                : Encoding.GetEncoding(encodingName);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(_filePathService.GetFile(_localPath, fileName), encoding))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span> (reader.Peek() &gt;= <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> content = reader.ReadLine().Trim();</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(content)) <span class="keyword">continue</span>;</span><br><span class="line">                    fileInputs.Add(<span class="keyword">new</span> FileInput()</span><br><span class="line">                    &#123;</span><br><span class="line">                        Fname = fName,</span><br><span class="line">                        DataDate = dataDate,</span><br><span class="line">                        DataStr = content,</span><br><span class="line">                        AuditUser = <span class="string">&quot;SYS&quot;</span>,</span><br><span class="line">                        AuditTime = DateTime.Now</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> _transaction = <span class="keyword">new</span> TransactionScope())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">using</span> (<span class="keyword">var</span> _conn = _factory.GetConnection())</span><br><span class="line">                &#123;</span><br><span class="line">                    _conn.Open();</span><br><span class="line">                    _conn.Execute(<span class="string">@&quot;DELETE FileInput WHERE DataDate = @DataDate AND FName = @FName&quot;</span></span><br><span class="line">                        , <span class="keyword">new</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            DataDate = dataDate,</span><br><span class="line">                            FName = fName</span><br><span class="line">                        &#125;);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">using</span> (SqlBulkCopy bulkCopy = <span class="keyword">new</span> SqlBulkCopy((SqlConnection)(_conn <span class="keyword">as</span> SKBSqlConnection)))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">using</span> (<span class="keyword">var</span> reader = ObjectReader.Create(fileInputs</span><br><span class="line">                            , <span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">&quot;SeqNo&quot;</span>, <span class="string">&quot;Fname&quot;</span>, <span class="string">&quot;DataDate&quot;</span>, <span class="string">&quot;DataStr&quot;</span>, <span class="string">&quot;AuditUser&quot;</span>, <span class="string">&quot;AuditTime&quot;</span> &#125;))</span><br><span class="line">                        &#123;</span><br><span class="line">                            bulkCopy.DestinationTableName = <span class="string">&quot;dbo.FileInput&quot;</span>;</span><br><span class="line">                            bulkCopy.WriteToServer(reader);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    _transaction.Complete();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Step3: Execute logic Store Procedure and Upload file</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(ftpDownloadConfigSetting[<span class="number">9</span>]) == <span class="literal">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> _conn = _factory.GetConnection())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Step3-1: Data Initial</span></span><br><span class="line">                <span class="keyword">var</span> spExecuteSql = _businessDateService.GetBusinessDateWithParameter(</span><br><span class="line">                    (ftpDownloadConfigSetting[<span class="number">9</span>], <span class="string">&quot;yyyy/MM/dd&quot;</span>));</span><br><span class="line">                <span class="comment">// Step3-2: Execute SP and Check Upload</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(jobSetting.CodeVal4))</span><br><span class="line">                &#123;</span><br><span class="line">                    _conn.Execute(spExecuteSql);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> result = _conn.Query&lt;FileUploadResponseModel&gt;(spExecuteSql).ToList();</span><br><span class="line">                    <span class="keyword">var</span> ftpUploadConfigSetting = jobSetting.CodeVal4.Split(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">                    <span class="keyword">var</span> ftpUploadConfigBaseModel = <span class="keyword">new</span> FTPConfigBaseModel()</span><br><span class="line">                    &#123;</span><br><span class="line">                        Server = ftpUploadConfigSetting[<span class="number">1</span>],</span><br><span class="line">                        Account = ftpUploadConfigSetting[<span class="number">2</span>],</span><br><span class="line">                        Password = ftpUploadConfigSetting[<span class="number">3</span>],</span><br><span class="line">                        RemotePath = ftpUploadConfigSetting[<span class="number">4</span>],</span><br><span class="line">                        LocalPath = ftpUploadConfigSetting[<span class="number">5</span>]</span><br><span class="line">                    &#125;;</span><br><span class="line">                    _ftpService.UploadData(ftpUploadConfigBaseModel, result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="設計Job"><a href="#設計Job" class="headerlink" title="設計Job"></a>設計Job</h2><p>Job就沒甚麼好解釋了，基本上就是執行Job Service而已</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DownloadJob</span> : <span class="title">TimerJob</span>&lt;<span class="title">DownloadJob</span>, <span class="title">CommCode</span>&gt;, <span class="title">ITimerJob</span>&lt;<span class="title">CommCode</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IDownloadJobService _downloadJobService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DownloadJob</span>(<span class="params">IConfiguration config</span></span></span><br><span class="line"><span class="params"><span class="function">        , IDownloadJobService downloadJobService</span></span></span><br><span class="line"><span class="params"><span class="function">        , List&lt;SchedulerLog&gt; schedulerLogs</span></span></span><br><span class="line"><span class="params"><span class="function">        , SchedulerLog schedulerLog</span></span></span><br><span class="line"><span class="params"><span class="function">        , ILoggerManager loggerManager</span>) </span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params">config, schedulerLogs, schedulerLog, loggerManager</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _downloadJobService = downloadJobService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> JobId =&gt; <span class="string">&quot;DownloadJob&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">PerformJobTasks</span>(<span class="params">List&lt;CommCode&gt; parameters</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _downloadJobService.SyncProcess(parameters.FirstOrDefault());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="註冊相關Service"><a href="#註冊相關Service" class="headerlink" title="註冊相關Service"></a>註冊相關Service</h2><p>這邊就列出該共用類<code>Job</code>相關的<code>Service</code>註冊作業</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 以上省略</span></span><br><span class="line">    services.AddTransient&lt;DownloadJob&gt;();</span><br><span class="line">    services.AddTransient&lt;IFilePathService, FilePathService&gt;();</span><br><span class="line">    services.AddTransient&lt;IDownloadJobService, DownloadJobService&gt;();</span><br><span class="line">    services.AddTransient&lt;IBusinessDateService, BusinessDateService&gt;();</span><br><span class="line">    services.AddTransient&lt;FtpServiceResolver&gt;(serviceProvider =&gt; key =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (key)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;F&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> serviceProvider.GetService&lt;FtpService&gt;();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;S&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> serviceProvider.GetService&lt;SFtpService&gt;();</span><br><span class="line">            <span class="literal">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 以下省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>下載類的<code>Job</code>介紹到這邊，雖然思路都有提到，筆者這邊要提醒就是上述講的那些設計是完全是照著筆者上班環境中的情境來設計，原則就是要將你自己的系統需求，要先歸納統整出幾類共用的<code>Job</code>類型，以至於新增同類型的Job時，輕而易舉，希望這幾篇有幫助到你的思考。</p>
<p>參考</p>
<ul>
<li><a href="https://www.hangfire.io/">https://www.hangfire.io/</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>hangfire</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>hangfire</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]排程神器-Hangfire:動態排程篇3</title>
    <url>/2021/09/11/hangfire-dynamic3/</url>
    <content><![CDATA[<img src="https://www.hangfire.io/img/ui/retries.png">

<span id="more"></span>

<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>前篇<a href="/2021/09/08/hangfire-dynamic1/" title="[DotnetCore]排程神器-Hangfire:動態排程篇1">[DotnetCore]排程神器-Hangfire:動態排程篇1</a>有提到共用類Job的設計，這篇主要講解各個<code>Job種類</code>的實作細節，再複習一下上篇內容，筆者這邊<code>動態排程</code>主要是著墨在排程的資訊設定於資料庫中，透過一支Job Initial的API，可以重新AddOrUpdate來達成動態排程的效果。若所有的Job是宣告於程式端中，要新增類似的Job時著實麻煩，失去其原有的設計理念。因此筆者這邊統計歸納出四種類型:</p>
<ul>
<li><code>SP執行類</code>: 可以進階設定是否要將SP執行結果打包成檔案上傳至指定路徑</li>
<li><blockquote>
<p><code>Bat檔案執行類</code>: 主要是因為與其他系統串接，主要的前台部分，需要由執行期bat檔案做驅動</p>
</blockquote>
</li>
<li><code>下載類</code>: 主要與其他系統交換檔案，由檔案內容塞到固定的資料表中，透過一支<code>SP</code>做後置處理</li>
<li><code>Normal類</code>: 有一些排程無法歸納為上述三種，即便前面執行其中一項，但後續有額外的處理，筆者這邊就不另外規劃做處理，保留其彈性</li>
</ul>
<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>筆者這篇主要會用到的，已經於另一篇<a href="/2021/08/21/dotnetcore-batch/" title="[DotnetCore]Batch檔案執行及追縱">[DotnetCore]Batch檔案執行及追縱</a>說明過，這篇主要是利用該篇的BatchLog的設計，主要邏輯處理的BatJobService中</p>
<ul>
<li>新增一筆BatchLog資料</li>
<li>接著使用Pooling的方式等待其Result被壓為Y或F，Timeout時間</li>
<li>若第二步驟為Y，進一步判斷是否有後續的SP要執行</li>
</ul>
<h2 id="設計JobService"><a href="#設計JobService" class="headerlink" title="設計JobService"></a>設計JobService</h2><p>照著上述的執行步驟，寫一個JobService</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Interface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IBatJobService</span> : <span class="title">ISyncJobService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SyncProcess</span>(<span class="params">CommCode jobSetting</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BatJobService</span> : <span class="title">IBatJobService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _connStr;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IBusinessDateService _businessDateService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NXBatJobService</span>(<span class="params">IConfiguration config</span></span></span><br><span class="line"><span class="params"><span class="function">        , IBusinessDateService businessDateService</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _connStr = Encoding.UTF8.GetString(Convert.FromBase64String(config.GetConnectionString(<span class="string">&quot;ConnStrKeyword&quot;</span>)));</span><br><span class="line">        _businessDateService = businessDateService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SyncProcess</span>(<span class="params">CommCode jobSetting</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> _conn = <span class="keyword">new</span> SqlConnection(_connStr))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Step0: 取得識別碼，筆者就不列出公司這邊的做法</span></span><br><span class="line">            <span class="keyword">var</span> batchId = getAutoId();</span><br><span class="line">            <span class="comment">// Step1: Config解析，這邊使用CodeVal2</span></span><br><span class="line">            <span class="keyword">var</span> batSettings = jobSetting.CodeVal2.Split(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">            <span class="comment">// Step2: 主要是取得外部系統的實際路徑，由資料庫設定</span></span><br><span class="line">            <span class="keyword">var</span> dirPath = _conn.Query&lt;CommCode&gt;(<span class="string">@&quot;SELECT *</span></span><br><span class="line"><span class="string">                                FROM CommCode</span></span><br><span class="line"><span class="string">                                WHERE CodeType = &#x27;DirName&#x27;&quot;</span>)</span><br><span class="line">                            .FirstOrDefault();</span><br><span class="line">            <span class="keyword">var</span> batFilePath = batSettings[<span class="number">0</span>].Replace(<span class="string">&quot;@DirName&quot;</span>, dirPath.CodeName);</span><br><span class="line">            <span class="keyword">var</span> batLog = <span class="keyword">new</span> BatchLog()</span><br><span class="line">            &#123;</span><br><span class="line">                BatchId = batchId,</span><br><span class="line">                BatFilePath = batFilePath,<span class="comment">//batSettings[0],</span></span><br><span class="line">                BatFileName = batSettings[<span class="number">1</span>],</span><br><span class="line">                ResultFilePath = batSettings[<span class="number">2</span>],</span><br><span class="line">                ResultFileName = batSettings[<span class="number">3</span>],</span><br><span class="line">                DataStartRow = <span class="built_in">string</span>.IsNullOrEmpty(batSettings[<span class="number">4</span>]) ? <span class="literal">default</span>(<span class="built_in">int</span>) : <span class="built_in">int</span>.Parse(batSettings[<span class="number">4</span>]),</span><br><span class="line">                CapPublishName = <span class="string">&quot;&quot;</span>,</span><br><span class="line">                CapPublishParaFname = batSettings[<span class="number">5</span>],</span><br><span class="line">                <span class="comment">// 主要是沿用上篇提到的日期置換Service</span></span><br><span class="line">                CapPublishParaDataDate = _businessDateService.GetBusinessDateWithParameter(</span><br><span class="line">                    (batSettings[<span class="number">6</span>], <span class="string">&quot;yyyy/MM/dd&quot;</span>)),</span><br><span class="line">                Result = <span class="string">&quot;N&quot;</span>,</span><br><span class="line">                ErrorMessage = <span class="string">&quot;&quot;</span>,</span><br><span class="line">                AuditUser = <span class="string">&quot;SYS&quot;</span>,</span><br><span class="line">                AuditTime = DateTime.Now</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">var</span> insertCount = _conn.Execute(<span class="string">@&quot;INSERT INTO BatchLog </span></span><br><span class="line"><span class="string">                            Values(@BatchId, @BatFilePath, @BatFileName, @ResultFilePath, @ResultFileName</span></span><br><span class="line"><span class="string">                            , @DataStartRow, @CapPublishName, @CapPublishParaFname, @CapPublishParaDataDate, @Result</span></span><br><span class="line"><span class="string">                            , @ErrorMessage, @AuditUser, @AuditTime)&quot;</span></span><br><span class="line">                                                , batLog);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Pooling</span></span><br><span class="line">            <span class="comment">// Timeout時間預設為10秒</span></span><br><span class="line">            <span class="keyword">var</span> timeoutSecs = <span class="number">10</span>;</span><br><span class="line">            <span class="comment">// 由設定讀出Timeout時間，畢竟每個batch檔案執行時間不一定，由外部去設定</span></span><br><span class="line">            <span class="built_in">int</span>.TryParse(batSettings[<span class="number">7</span>], <span class="keyword">out</span> timeoutSecs);</span><br><span class="line">            <span class="keyword">if</span> (PoolingService.RetryUntilSuccessOrTimeout(() =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> currBatLog = _conn.Query&lt;BatchLog&gt;(</span><br><span class="line">                    <span class="string">@&quot;SELECT * FROM BatchLog WHERE BatchId = @BatchId AND Result = @Result&quot;</span></span><br><span class="line">                , <span class="keyword">new</span></span><br><span class="line">                &#123;</span><br><span class="line">                    BatchId = batchId,</span><br><span class="line">                    Result = <span class="string">&quot;Y&quot;</span></span><br><span class="line">                &#125;).FirstOrDefault();</span><br><span class="line">                <span class="keyword">return</span> currBatLog != <span class="literal">null</span>;</span><br><span class="line">            &#125;, TimeSpan.FromSeconds(timeoutSecs)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> spOrNot = batSettings.Length &gt; <span class="number">8</span> &amp;&amp; <span class="built_in">string</span>.IsNullOrEmpty(batSettings[<span class="number">8</span>]) == <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (spOrNot)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> spSql = _businessDateService.GetBusinessDateWithParameter(</span><br><span class="line">                        (batSettings[<span class="number">8</span>], <span class="string">&quot;yyyy/MM/dd&quot;</span>));</span><br><span class="line">                    _conn.Execute(spSql);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;Bat執行未成功或等待時間已過!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="設計Job"><a href="#設計Job" class="headerlink" title="設計Job"></a>設計Job</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BatJob</span> : <span class="title">TimerJob</span>&lt;<span class="title">BatJob</span>, <span class="title">CommCode</span>&gt;</span><br><span class="line">        , <span class="title">ITimerJob</span>&lt;<span class="title">CommCode</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IBatJobService _batJobService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BatJob</span>(<span class="params">IConfiguration config</span></span></span><br><span class="line"><span class="params"><span class="function">        , IBatJobService batJobService</span></span></span><br><span class="line"><span class="params"><span class="function">        , List&lt;SchedulerLog&gt; schedulerLogs</span></span></span><br><span class="line"><span class="params"><span class="function">        , SchedulerLog schedulerLog</span></span></span><br><span class="line"><span class="params"><span class="function">        , ILoggerManager loggerManager</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params">config, schedulerLogs, schedulerLog, loggerManager</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _batJobService = batJobService;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> JobId =&gt; <span class="string">&quot;BatJob&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">PerformJobTasks</span>(<span class="params">List&lt;CommCode&gt; parameters</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _batJobService.SyncProcess(parameters.FirstOrDefault());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="註冊相關Service"><a href="#註冊相關Service" class="headerlink" title="註冊相關Service"></a>註冊相關Service</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 以上省略</span></span><br><span class="line">    services.AddTransient&lt;BatJob&gt;();</span><br><span class="line">    services.AddTransient&lt;IBatJobService, BatJobService&gt;();</span><br><span class="line">    services.AddTransient&lt;IBusinessDateService, BusinessDateService&gt;();		</span><br><span class="line">    <span class="comment">// 以下省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>筆者這邊環境大量與外部系統做介接，剛好有一個外部系統介接方式都是執行對方的batch檔案來達到，因為很多都需要於排程系統中設定使用，因此把它設計為一個共用類，就不用重複宣告了，盡量將執行過程整理過，把它設計進去，就一勞永逸了。</p>
<p>參考</p>
<ul>
<li><a href="https://www.hangfire.io/">https://www.hangfire.io/</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>hangfire</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>hangfire</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]排程神器-Hangfire:動態排程篇2</title>
    <url>/2021/09/10/hangfire-dynamic2/</url>
    <content><![CDATA[<img src="https://www.hangfire.io/img/ui/recurring-jobs.png">

<span id="more"></span>

<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>前篇<a href="/2021/09/08/hangfire-dynamic1/" title="[DotnetCore]排程神器-Hangfire:動態排程篇1">[DotnetCore]排程神器-Hangfire:動態排程篇1</a>有提到共用類Job的設計，這篇主要講解各個<code>Job種類</code>的實作細節，再複習一下上篇內容，筆者這邊<code>動態排程</code>主要是著墨在排程的資訊設定於資料庫中，透過一支<code>Job Initial</code>的API，可以重新<code>AddOrUpdate</code>來達成動態排程的效果。若所有的Job是宣告於程式端中，要新增類似的Job時著實麻煩，失去其原有的設計理念。因此筆者這邊統計歸納出四種類型:</p>
<ul>
<li><blockquote>
<p><code>SP執行類</code>: 可以進階設定是否要將SP執行結果打包成檔案上傳至指定路徑</p>
</blockquote>
</li>
<li><code>Bat檔案執行類</code>: 主要是因為與其他系統串接，主要的前台部分，需要由執行期bat檔案做驅動</li>
<li><code>下載類</code>: 主要與其他系統交換檔案，由檔案內容塞到固定的資料表中，透過一支<code>SP</code>做後置處理</li>
<li><code>Normal類</code>: 有一些排程無法歸納為上述三種，即便前面執行其中一項，但後續有額外的處理，筆者這邊就不另外規劃做處理，保留其彈性</li>
</ul>
<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>接下來就以四種類型中的SP執行類介紹其實作內容，大致上分為SPExecuteJobService以及SPExecuteJob，其中日期參數取得比較複雜，獨立設計其作法。</p>
<h2 id="日期參數置換Service"><a href="#日期參數置換Service" class="headerlink" title="日期參數置換Service"></a>日期參數置換Service</h2><p>以上篇介紹的<code>CommCode</code>結構來說，筆者就拿某一個<code>Column</code>當作設定SP的語法，會牽涉到參數置換的問題，共同參數大概就是營業日了，因為各個作業可能還是會有不同的需求，可能要減一天，或者要用實際日期，或者不同時區的日期等等，筆者這邊也因應這些需求有撰寫一隻置換日期的Service。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// interface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IBusinessDateService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">GetBusinessDateWithParameter</span>(<span class="params">(<span class="built_in">string</span> source, <span class="built_in">string</span> format</span>) conditions)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BusinessDateService</span> : <span class="title">IBusinessDateService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILoggerManager _logger;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IConfiguration _config;</span><br><span class="line">    <span class="comment">// 筆者這邊取得資料庫連線工廠，可以任何形式，只要達成取得資料庫連線即可</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> SqlConnectionFactory _factory;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessDateService</span>(<span class="params">IConfiguration config, SqlConnectionFactory factory, ILoggerManager logger</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _config = config;</span><br><span class="line">        _factory = factory;</span><br><span class="line">        _logger = logger;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetBusinessDateWithParameter</span>(<span class="params">(<span class="built_in">string</span> source, <span class="built_in">string</span> format</span>) conditions)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(conditions.source)) <span class="keyword">return</span> conditions.source;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> result = conditions.source;</span><br><span class="line">        <span class="comment">// 符合&#123;0&#125;、&#123;-1&#125;、&#123;2&#125;、&#123;DateTime&#125;、&#123;DateTime:US Eastern Standard Time&#125;皆適用</span></span><br><span class="line">        <span class="keyword">var</span> regex = <span class="keyword">new</span> Regex(<span class="string">@&quot;(\&#123;-?[0-9a-zA-Z]+\&#125;)|(\&#123;([0-9a-zA-Z]+):([0-9a-zA-Z\s]+)\&#125;)&#123;1&#125;&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (Match match <span class="keyword">in</span> regex.Matches(result))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> parameter = match.Value.Trim(<span class="string">&#x27;&#123;&#x27;</span>).Trim(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">            <span class="comment">// 分為DataTime及營業日；DataTime則以實際日期為準，若有多設定時區則以該時區時間為準</span></span><br><span class="line">            <span class="keyword">if</span> (match.Value.Contains(<span class="string">&quot;DateTime&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> datetimeResult = <span class="keyword">new</span> DateTime();</span><br><span class="line">                <span class="keyword">var</span> keywordList = parameter.Split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (keywordList.Length &gt; <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    TimeZoneInfo timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById(keywordList[<span class="number">1</span>]);</span><br><span class="line">                    datetimeResult = TimeZoneInfo.ConvertTime(DateTime.Now, timeZoneInfo);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    datetimeResult = DateTime.Now;</span><br><span class="line">                &#125;</span><br><span class="line">                result = result.Replace(match.Value, datetimeResult.ToString(conditions.format));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">double</span>.TryParse(parameter, <span class="keyword">out</span> <span class="keyword">var</span> period))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> datePara = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="comment">// 取得營業日邏輯(實作忽略，畢竟每一家的邏輯都不一樣，筆者不另外貼出來)</span></span><br><span class="line">                    result = result.Replace(match.Value, datePara);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SPExecuteJobService"><a href="#SPExecuteJobService" class="headerlink" title="SPExecuteJobService"></a>SPExecuteJobService</h2><p>筆者這邊都會使用Service的形式，不直接把執行邏輯寫在Job中，於Job中注入Job對應的Service做事</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SPExecuteJobService</span> : <span class="title">ISPExecuteJobService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILoggerManager _logger;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> FtpServiceResolver _ftpServiceResolver;</span><br><span class="line">    <span class="keyword">private</span> IFtpService _ftpService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> HttpClient _client;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IBusinessDateService _businessDateService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> SqlConnectionFactory _factory;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SPExecuteJobService</span>(<span class="params">FtpServiceResolver ftpServiceResolver</span></span></span><br><span class="line"><span class="params"><span class="function">        , HttpClient client</span></span></span><br><span class="line"><span class="params"><span class="function">        , IBusinessDateService businessDateService, ILoggerManager logger, SqlConnectionFactory factory</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _client = client;</span><br><span class="line">        _businessDateService = businessDateService;</span><br><span class="line">        _ftpServiceResolver = ftpServiceResolver;</span><br><span class="line">        _logger = logger;</span><br><span class="line">        _factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SyncProcess</span>(<span class="params">CommCode jobSetting</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Step0: Data Initial      </span></span><br><span class="line">        <span class="comment">// CodeVal2置放主要SP語法</span></span><br><span class="line">        <span class="keyword">var</span> spExecuteSql = _businessDateService.GetBusinessDateWithParameter(</span><br><span class="line">            (jobSetting.CodeVal2, <span class="string">&quot;yyyy/MM/dd&quot;</span>));</span><br><span class="line">        <span class="comment">// Step1: Execute SP and Check Upload</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(jobSetting.CodeVal4) &amp;&amp; <span class="built_in">string</span>.IsNullOrEmpty(jobSetting.CodeVal6))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> _conn = _factory.GetConnection())</span><br><span class="line">                _conn.Execute(spExecuteSql);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 若CodeVal4有值表示，執行完SP後須上傳</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(jobSetting.CodeVal4) == <span class="literal">false</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> ftpConfigSetting = jobSetting.CodeVal4.Split(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">                <span class="comment">// 這邊就用到筆者寫的FTPServiceResolver，筆者這邊使用英文字母F或S來區分使用FtpService/SFtpService</span></span><br><span class="line">                _ftpService = _ftpServiceResolver(ftpConfigSetting[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">var</span> result = <span class="keyword">new</span> List&lt;FileUploadResponseModel&gt;();</span><br><span class="line">                <span class="keyword">using</span> (<span class="keyword">var</span> _conn = _factory.GetConnection())</span><br><span class="line">                &#123;</span><br><span class="line">                    result = _conn.Query&lt;FileUploadResponseModel&gt;(spExecuteSql).ToList();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">var</span> ftpConfigBaseModel = <span class="keyword">new</span> FTPConfigBaseModel()</span><br><span class="line">                &#123;</span><br><span class="line">                    Server = ftpConfigSetting[<span class="number">1</span>],</span><br><span class="line">                    Account = ftpConfigSetting[<span class="number">2</span>],</span><br><span class="line">                    Password = ftpConfigSetting[<span class="number">3</span>],</span><br><span class="line">                    RemotePath = ftpConfigSetting[<span class="number">4</span>],</span><br><span class="line">                    LocalPath = ftpConfigSetting[<span class="number">5</span>]</span><br><span class="line">                &#125;;</span><br><span class="line">                _ftpService.UploadData(ftpConfigBaseModel, result);</span><br><span class="line">            &#125;                </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SyncProcess</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SPExecuteJob"><a href="#SPExecuteJob" class="headerlink" title="SPExecuteJob"></a>SPExecuteJob</h2><p>我們的重頭戲，<code>SP執行類Job</code>，不過筆者設計都是肥在<code>Service</code>，<code>Job</code>會單純許多，就像<code>MVC</code>中的<code>C</code>要輕一樣，盡量一行內就解決，主要邏輯都塞在Service</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SPExecuteJob</span> : <span class="title">TimerJob</span>&lt;<span class="title">SPExecuteJob</span>, <span class="title">CommCode</span>&gt;</span><br><span class="line">        , <span class="title">ITimerJob</span>&lt;<span class="title">CommCode</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ISPExecuteJobService _spExecuteJobService;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _jobId;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SPExecuteJob</span>(<span class="params">IConfiguration config</span></span></span><br><span class="line"><span class="params"><span class="function">        , ISPExecuteJobService spExecuteJobService</span></span></span><br><span class="line"><span class="params"><span class="function">        , List&lt;SchedulerLog&gt; schedulerLogs</span></span></span><br><span class="line"><span class="params"><span class="function">        , SchedulerLog schedulerLog</span></span></span><br><span class="line"><span class="params"><span class="function">        , ILoggerManager loggerManager</span>) </span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params">config, schedulerLogs, schedulerLog, loggerManager</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _spExecuteJobService = spExecuteJobService;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> JobId =&gt; <span class="string">&quot;SPExecuteJob&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">PerformJobTasks</span>(<span class="params">List&lt;CommCode&gt; parameters</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _spExecuteJobService.SyncProcess(parameters.FirstOrDefault());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="註冊Service"><a href="#註冊Service" class="headerlink" title="註冊Service"></a>註冊Service</h2><p>筆者這邊就列出SP執行類相關的Service註冊</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 以上省略</span></span><br><span class="line">    services.AddTransient&lt;SPExecuteJob&gt;();</span><br><span class="line">    services.AddTransient&lt;ISPExecuteJobService, SPExecuteJobService&gt;();</span><br><span class="line">    services.AddTransient&lt;IBusinessDateService, BusinessDateService&gt;();</span><br><span class="line">    services.AddTransient&lt;FtpServiceResolver&gt;(serviceProvider =&gt; key =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (key)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;F&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> serviceProvider.GetService&lt;FtpService&gt;();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;S&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> serviceProvider.GetService&lt;SFtpService&gt;();</span><br><span class="line">            <span class="literal">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 以下省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>此篇介紹<code>SPExecuteJob</code>，可以回頭看筆者的上篇文章，就會比較清楚了，筆者原本一篇就塞四種類型Job介紹，但篇幅會過長，只好切割成不同的三篇文章，加上第一篇動態排程就完整了筆者客製版的動態排程。</p>
<p>參考</p>
<ul>
<li><a href="https://www.hangfire.io/">https://www.hangfire.io/</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>hangfire</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>hangfire</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]GlobalErrorHandler</title>
    <url>/2021/09/09/dotnetcore-global-error-handler/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者這篇就講一點輕鬆的話題，筆者慣用的設計，就是不喜歡在到處放<code>try catch</code>，希望在一個地方統一<code>try catch</code>就好，這樣若要改變<code>Exception</code>處理行為，就改一個地方即可，當然有時你為了要配合某種情境，碰到<code>Exception</code>，要將某一些處理狀態要壓成<code>F</code>等等，無論如何，筆者都會先設計一個<code>GlobalErrorHandler</code>做統一抓取<code>Exception</code>並處理。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>以<code>dotnet core</code>的設計架構，有很多種形式撰寫並達到<code>Global Error Handler</code>的效果，筆者選擇最直覺的方式：<code>Global Error Handling Middleware</code>。</p>
<h2 id="撰寫GlobalErrorHandlingMiddleware"><a href="#撰寫GlobalErrorHandlingMiddleware" class="headerlink" title="撰寫GlobalErrorHandlingMiddleware"></a>撰寫GlobalErrorHandlingMiddleware</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GlobalErrorHandlingMiddleware</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> RequestDelegate _next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GlobalErrorHandlingMiddleware</span>(<span class="params">RequestDelegate next</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Invoke</span>(<span class="params">HttpContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">await</span> _next.Invoke(context);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Step1: 處理Exception(記Log或其他)</span></span><br><span class="line">            <span class="comment">// Step2: 回傳統一結構Result</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>就這麼簡單，把<code>_next.Invoke(context)</code>用<code>try catch</code>包起來即可。</p>
<h2 id="註冊GlobalErrorHandlingMiddleware"><a href="#註冊GlobalErrorHandlingMiddleware" class="headerlink" title="註冊GlobalErrorHandlingMiddleware"></a>註冊GlobalErrorHandlingMiddleware</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        app.UseMiddleware&lt;GlobalErrorHandlingMiddlware&gt;();</span><br><span class="line">        <span class="comment">// Other Middleware...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p><code>Global Error Handler</code>是滿重要的，透過簡單的<code>Middlware</code>機制，可以抓取各式各樣的<code>Exception</code>，也可以在該地方辨別不同的<code>Exception</code>類型，並針對每一種類型處理不一樣的效果。</p>
<p>參考</p>
<p><a href="https://blog.johnwu.cc/article/ironman-day17-asp-net-core-exception-handler.html">https://blog.johnwu.cc/article/ironman-day17-asp-net-core-exception-handler.html</a></p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>global-error-handler</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]排程神器-Hangfire:動態排程篇1</title>
    <url>/2021/09/08/hangfire-dynamic1/</url>
    <content><![CDATA[<img src="https://www.hangfire.io/img/ui/queues.png">

<span id="more"></span>
<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>排程神器-<code>Hangfire</code>兩篇文章後，這篇來到重頭戲了，筆者主要參考<a href="https://gist.github.com/ragnarstolsmark/c720bc3f47579fe0036dc2eb735fe159">TimerJob</a>這幾篇gist文件，加以整理改造成符合筆者工作環境中的情境。原始需求是這樣，筆者所在環境，主管們因維運考量，一切以資料庫設定為準，爾後有臨時變更需要時，調動一下資料庫設定即可，一切設計以這個原則為最大考量達成目的，當然排程這件事也不例外了，主要考量有以下幾點</p>
<ul>
<li>臨時調動執行時間</li>
<li>若排定時間執行時有出錯，是否可以手動立即執行</li>
<li>可能以某一個排程為基底，長出一個新的排程</li>
</ul>
<p>等等，是個一大挑戰阿。</p>
<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>筆者以前提情要提到的幾點去做一個設計過程的解說，以第一點「臨時調動執行時間」來說，應該要有一支API，執行後達到<code>Job Initial</code>效果，因為需要臨時調動，須將排程設定放置於資料表中，經由<code>Job Initial</code>這個作業，透過<code>Hangfire</code>的<code>AddOrUpdate</code>，因為<code>JobId</code>是一樣會Update掉，筆者這邊暫時不考慮刪除，刪除只能從<code>Hangfire Dashboard</code>做刪除動作。</p>
<p>第二點來說，<code>Hangfire</code>已經具備了，可以透過<code>Hangfire Dashboard</code>做到立即執行的效果。</p>
<p>第三點跟第一點也是有相關的，筆者情境是這樣，若全部的Job都是寫成一個個<code>Job Class</code>則，要長出新的<code>Job</code>則必須得改動程式，必須得編譯並上版，試想能不能夠把系統中的排程行為做一個整理，歸納出三到四種的Job類型，對應的就是固定的<code>Job Class</code>，一來大大降低重複開發，二來因為有歸納整理過，因此現在要長出一個類似的排程，透過設定加以調整，可以不用動到程式就能長出新的排程。</p>
<h2 id="資料結構規劃"><a href="#資料結構規劃" class="headerlink" title="資料結構規劃"></a>資料結構規劃</h2><p>筆者這邊是沿用既有的Code Table，這純粹是已經有一個可以達到目的的資料表，就不另外設計了，這個資料結構完全沒有限制，只要能符合各位各自的排程需求即可。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">CommCode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CodeType &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CodeTypeName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Code &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CodeName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CodeVal1 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CodeVal2 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CodeVal3 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CodeVal4 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CodeVal5 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CodeVal6 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span>? SeqNo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> AuditUser &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DateTime? AuditTime &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>筆者會在Job種類規劃時會再說明，如何使用該資料結構，目前就先參考吧，這張資料表在筆者環境中是屬於開放式的欄位，可以將設定值使用不同的CodeType存放，也有一些是下拉式選單的選項等等，已經是開放式的設計了，不妨就拿來當作動態排程的Config設定吧。</p>
<h2 id="Base-Job規劃"><a href="#Base-Job規劃" class="headerlink" title="Base Job規劃"></a>Base Job規劃</h2><p>這邊主要是仿照參考文章中的ITimerJob，調整為筆者環境適用的樣子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ITimerJob</span>&lt;<span class="title">T</span>&gt; <span class="keyword">where</span> <span class="title">T</span> : <span class="title">CommCode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 定義JobId</span></span><br><span class="line">    <span class="built_in">string</span> JobId &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="comment">// 排程執行</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Execute</span>(<span class="params">IJobCancellationToken cancellationToken, PerformContext context, List&lt;T&gt; parameters</span>)</span>;</span><br><span class="line">    <span class="comment">// 進行排程</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Schedule</span>(<span class="params"><span class="built_in">string</span> cronExpression, List&lt;T&gt; parameters</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>來宣告一個<code>Base Timer Job</code>吧</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">TimerJob</span>&lt;<span class="title">T</span>, <span class="title">T2</span>&gt; : <span class="title">ITimerJob</span>&lt;<span class="title">T2</span>&gt;</span><br><span class="line">        <span class="keyword">where</span> <span class="title">T</span> : <span class="title">ITimerJob</span>&lt;<span class="title">T2</span>&gt;</span><br><span class="line">        <span class="keyword">where</span> <span class="title">T2</span> : <span class="title">CommCode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">object</span> schedulerLogListLock = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILoggerManager _logger;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">string</span> JobId &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">protected</span> IJobCancellationToken _cancellationToken;</span><br><span class="line">    <span class="keyword">protected</span> PerformContext _context;</span><br><span class="line">    <span class="keyword">private</span> List&lt;SchedulerLog&gt; _logModels;</span><br><span class="line">    <span class="keyword">private</span> SchedulerLog _logModel;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">PerformJobTasks</span>(<span class="params">List&lt;T2&gt; parameters</span>)</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _connStr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimerJob</span>(<span class="params">IConfiguration config</span></span></span><br><span class="line"><span class="params"><span class="function">        , List&lt;SchedulerLog&gt; logModels</span></span></span><br><span class="line"><span class="params"><span class="function">        , SchedulerLog schedulerLog, ILoggerManager logger</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _connStr = Encoding.UTF8.GetString(Convert.FromBase64String(config.GetConnectionString(<span class="string">&quot;FMTR&quot;</span>)));</span><br><span class="line">        _logModels = logModels;</span><br><span class="line">        _logModel = schedulerLog;</span><br><span class="line">        <span class="keyword">this</span>._logModel.AuditUser = <span class="string">&quot;SYS&quot;</span>;</span><br><span class="line">        _logger = logger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//[DisableConcurrentExecution(0)]</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params">IJobCancellationToken cancellationToken</span></span></span><br><span class="line"><span class="params"><span class="function">        , PerformContext context</span></span></span><br><span class="line"><span class="params"><span class="function">        , List&lt;T2&gt; parameters</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _cancellationToken = cancellationToken;</span><br><span class="line">        _context = context;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> jobSetting = parameters.FirstOrDefault();</span><br><span class="line">            <span class="keyword">this</span>._logModel.JobId = jobSetting.CodeName.Split(<span class="string">&#x27;;&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">            _logger.LogInfo(<span class="string">$&quot;<span class="subst">&#123;<span class="keyword">this</span>._logModel.JobId&#125;</span> Start!&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(jobSetting.CodeVal5) == <span class="literal">false</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">using</span> (<span class="keyword">var</span> _conn = <span class="keyword">new</span> SqlConnection(_connStr))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> preCheckResult = _conn.Query&lt;PreCheckResponseModel&gt;(jobSetting.CodeVal5).FirstOrDefault();</span><br><span class="line">                    _logger.LogInfo(<span class="string">$&quot;[<span class="subst">&#123;<span class="keyword">this</span>._logModel.JobId&#125;</span> PreCheck] <span class="subst">&#123;preCheckResult.CanRun&#125;</span>&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (preCheckResult.CanRun == <span class="string">&quot;Y&quot;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">lock</span>(schedulerLogListLock)</span><br><span class="line">                        &#123;</span><br><span class="line">                            PerformJobTasks(parameters);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">lock</span>(schedulerLogListLock)</span><br><span class="line">                &#123;</span><br><span class="line">                    PerformJobTasks(parameters);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            _logger.LogInfo(<span class="string">$&quot;<span class="subst">&#123;<span class="keyword">this</span>._logModel.JobId&#125;</span> End!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            _logger.LogError(<span class="string">$&quot;[<span class="subst">&#123;<span class="keyword">this</span>._logModel.JobId&#125;</span> Error] <span class="subst">&#123;ex&#125;</span>&quot;</span>);</span><br><span class="line">            <span class="keyword">this</span>._logModel.ErrMessage = <span class="string">$&quot;<span class="subst">&#123;ex&#125;</span>&quot;</span>;</span><br><span class="line">            <span class="keyword">this</span>._logModels.AddSchedulerLog(<span class="keyword">this</span>._logModel);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> Add SchedulerLogs to table</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>._logModels.Count &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">lock</span> (schedulerLogListLock)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">using</span> (<span class="keyword">var</span> _conn = <span class="keyword">new</span> SqlConnection(_connStr))</span><br><span class="line">                    &#123;</span><br><span class="line">                        _conn.Execute(<span class="string">@&quot;INSERT INTO [dbo].[SchedulerLog]</span></span><br><span class="line"><span class="string">                            ([JobID], [StepDesc], [Result], [ErrMessage], [AuditUser], [AuditTime])</span></span><br><span class="line"><span class="string">                            VALUES(@JobID, @StepDesc, @Result, @ErrMessage, @AuditUser, @AuditTime)&quot;</span></span><br><span class="line">                            , <span class="keyword">this</span>._logModels);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Schedule</span>(<span class="params"><span class="built_in">string</span> cronExpression, List&lt;T2&gt; parameters</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> jobSetting = parameters.FirstOrDefault();</span><br><span class="line">        <span class="keyword">var</span> jobInfos = jobSetting.CodeName.Split(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">        (<span class="built_in">string</span> jobId, <span class="built_in">string</span> jobClassName) jobInfo = ValueTuple.Create(jobInfos[<span class="number">0</span>], jobInfos[<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">//jobSetting.CodeTypeName == &quot;Normal&quot; ? JobId : jobSetting.CodeName;</span></span><br><span class="line">        <span class="keyword">var</span> jobName = jobInfo.jobId;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrWhiteSpace(cronExpression))</span><br><span class="line">        &#123;</span><br><span class="line">            RecurringJob.RemoveIfExists(jobName);</span><br><span class="line">        &#125;</span><br><span class="line">        RecurringJob.AddOrUpdate&lt;T&gt;(jobName, x =&gt; x.Execute(JobCancellationToken.Null, <span class="literal">null</span>, parameters)</span><br><span class="line">        , cronExpression, TimeZoneInfo.Local);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PreCheckResponseModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CanRun &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>筆者參考的文章中的設計，加上筆者情境所需融合過，會比較複雜一點，讓筆者娓娓道來。其中 </p>
<ul>
<li><code>PerformJobTasks</code>: 宣告成abstract，用意就是真正的上層Job會實作的Method</li>
<li><code>List&lt;SchedulerLog&gt;</code>:主要開放上層Job在執行上若想記錄執行過程則新增到該變數中，由<code>Base Timer Job</code>於Finally時統一Insert到資料庫去</li>
<li><code>schedulerLogListLock</code> :因為會有一些非同步作業，使得<code>Insert</code>時有可能被變動，因此使用<code>lock參數</code>做<code>lock</code>作業</li>
<li><code>Schedule Method</code>:拆解設定欄位，最後使用AddOrUpdate做新增、更新排程作業</li>
<li><code>PreCheckResponseModel</code>:筆者這邊環境的情境，很多都是依照<code>BusinessDate</code>做事情，無法使用排程於星期一到五才執行這種設定方式，因為台灣環境比較特殊，有補班、臨休、颱風假等，由一個欄位去定義其PreCheck的需求，筆者這邊就制定回傳結構為<code>PreCheckResponseModel</code>，利用屬性<code>CanRun</code>來判斷是否要執行其排程主要邏輯。因此排程設定上面會單純一點，排程設定為每一天都會跑，經由<code>PreCheck</code>的<code>SP</code>做一個要不要跑排程的控制點。</li>
</ul>
<h2 id="Job種類規劃"><a href="#Job種類規劃" class="headerlink" title="Job種類規劃"></a>Job種類規劃</h2><p>筆者這邊事前統計過各式各樣的排程執行邏輯，可以整理為以下類別</p>
<ul>
<li><code>SP執行類</code>: 可以進階設定是否要將SP執行結果打包成檔案上傳至指定路徑</li>
<li><code>Bat檔案執行類</code>: 主要是因為與其他系統串接，主要的前台部分，需要由執行期bat檔案做驅動</li>
<li><code>下載類</code>: 主要與其他系統交換檔案，由檔案內容塞到固定的資料表中，透過一支SP做後置處理</li>
<li><code>Normal類</code>: 有一些排程無法歸納為上述三種，即便前面執行其中一項，但後續有額外的處理，筆者這邊就不另外規劃做處理，保留其彈性</li>
</ul>
<p>當然要看各位的排程執行情境去做一個歸納，上述只是依照筆者這邊遇到的情境做一個統整規劃設計，筆者這邊就點到這邊為止，寫下一篇來做一個進一步介紹其運作內容，不然這篇要爆了。</p>
<h2 id="Job-Initial流程設計"><a href="#Job-Initial流程設計" class="headerlink" title="Job Initial流程設計"></a>Job Initial流程設計</h2><p>這篇的主要關鍵在這個部份，分為兩個部份，筆者習慣拆為API端及Service端</p>
<h3 id="API端設計"><a href="#API端設計" class="headerlink" title="API端設計"></a>API端設計</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JobInitialController</span> : <span class="title">SchedulerBaseController</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IJobInitialService _jobInitialService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JobInitialController</span>(<span class="params">IJobInitialService jobInitialService</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _jobInitialService = jobInitialService;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 批次初始化</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    [<span class="meta">ProducesResponseType(typeof(Result), StatusCodes.Status200OK)</span>]</span><br><span class="line">    [<span class="meta">HttpGet(<span class="string">&quot;&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Get</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _jobInitialService.InitialProcess();</span><br><span class="line">        <span class="keyword">return</span> SKBResponse(<span class="keyword">new</span> Result().Success());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Service端設計"><a href="#Service端設計" class="headerlink" title="Service端設計"></a>Service端設計</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JobInitialService</span> : <span class="title">IJobInitialService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILoggerManager _logger;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _assemblyName = <span class="string">&quot;&#123;Assembly Namespace&#125;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _connStr;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IServiceProvider _serviceProvider;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JobInitialService</span>(<span class="params">IConfiguration config</span></span></span><br><span class="line"><span class="params"><span class="function">        , IServiceProvider serviceProvider, ILoggerManager logger</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _connStr = Encoding.UTF8.GetString(Convert.FromBase64String(config.GetConnectionString(<span class="string">&quot;FMTR&quot;</span>)));</span><br><span class="line">        _serviceProvider = serviceProvider;</span><br><span class="line">        _logger = logger;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InitialProcess</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> batchJobs = <span class="keyword">new</span> List&lt;CommCode&gt;();</span><br><span class="line">        <span class="comment">// 先撈出設定檔案，筆者這邊CodeType定義為Schdeuler</span></span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> _conn = <span class="keyword">new</span> SqlConnection(_connStr))</span><br><span class="line">        &#123;</span><br><span class="line">            batchJobs = _conn.Query&lt;CommCode&gt;(<span class="string">@&quot;SELECT * FROM CommCode WHERE CodeType = @CodeType AND ISNULL(CodeVal1, &#x27;&#x27;) &lt;&gt; &#x27;&#x27;&quot;</span> </span><br><span class="line">                , <span class="keyword">new</span> &#123; CodeType = <span class="string">&quot;Scheduler&quot;</span> &#125;).ToList();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> job <span class="keyword">in</span> batchJobs)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> className = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">var</span> jobType = <span class="literal">default</span>(Type);</span><br><span class="line">            <span class="keyword">var</span> jobInfos = job.CodeName.Split(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">            (<span class="built_in">string</span> jobId, <span class="built_in">string</span> jobClassName) jobInfo = ValueTuple.Create(jobInfos[<span class="number">0</span>], jobInfos[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">switch</span> (job.CodeTypeName)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;Normal&quot;</span>:                    </span><br><span class="line">                    className = <span class="string">$&quot;<span class="subst">&#123;_assemblyName&#125;</span>.<span class="subst">&#123;jobInfo.jobClassName&#125;</span>&quot;</span>;</span><br><span class="line">                    jobType = Type.GetType(className);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;NXBat&quot;</span>:</span><br><span class="line">                    className = <span class="string">$&quot;<span class="subst">&#123;_assemblyName&#125;</span>.NXBatJob&quot;</span>;</span><br><span class="line">                    jobType = Type.GetType(className);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;SP&quot;</span>:</span><br><span class="line">                    className = <span class="string">$&quot;<span class="subst">&#123;_assemblyName&#125;</span>.SPExecuteJob&quot;</span>;</span><br><span class="line">                    jobType = Type.GetType(className);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;Download&quot;</span>:</span><br><span class="line">                    className = <span class="string">$&quot;<span class="subst">&#123;_assemblyName&#125;</span>.DownloadJob&quot;</span>;</span><br><span class="line">                    jobType = Type.GetType(className);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="literal">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            _logger.LogInfo(<span class="string">$&quot;[Current Job] <span class="subst">&#123;JsonConvert.SerializeObject(job)&#125;</span>&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> jobInstance = _serviceProvider.GetService(jobType) <span class="function"><span class="keyword">as</span> <span class="title">ITimerJob</span>&lt;<span class="title">CommCode</span>&gt;</span>;</span><br><span class="line">            jobInstance.Schedule(job.CodeVal1, <span class="keyword">new</span> List&lt;CommCode&gt;() &#123; job &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最主要為最後兩行，透過ServiceProvider取得的實體做一個轉型為ITimerJob，藉此可以點出Schdeule Method，就會執行Hangfire RecurringJob的AddOrUpdate，就會排進Hangfire的排程宣告中。</p>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>這篇就以動態排程設計概念為主做一個闡述，下篇會著重在筆者設計的Job種類得實作及註冊宣告使用方式，敬請期待。</p>
<p>參考</p>
<ul>
<li><a href="https://gist.github.com/ragnarstolsmark/c720bc3f47579fe0036dc2eb735fe159">https://gist.github.com/ragnarstolsmark/c720bc3f47579fe0036dc2eb735fe159</a></li>
<li><a href="https://www.hangfire.io/">https://www.hangfire.io/</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>hangfire</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>hangfire</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]ORM系列-Chloe:Interceptor篇</title>
    <url>/2021/09/07/orm-series-chloe-interceptor/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者前篇介紹Select相關的method<a href="/2021/09/07/orm-series-chloe-select/" title="[DotnetCore]ORM系列-Chloe:Select篇">[DotnetCore]ORM系列-Chloe:Select篇</a>，這次要來寫interceptor，觀察看看那些select method對應的sql語法，才會知道Chloe都幫我們轉成什麼語法，才不會誤用造成錯誤，筆者覺得是值得投資的。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><h2 id="Interceptor介紹"><a href="#Interceptor介紹" class="headerlink" title="Interceptor介紹"></a>Interceptor介紹</h2><p>筆者這邊稍微解釋一下<code>Interceptor</code>，它要實作對應的六個Method，主要分法是照著<code>DBCommand</code>下的方法</p>
<ul>
<li>ExecuteReader</li>
<li>ExecuteNonQuery</li>
<li>ExecuteScalar</li>
</ul>
<p>針對這三個<code>DbCommand</code>下的這三個Method，Chloe規劃有執行前跟執行後的事件對應的Method，因此有六個Method可以實作。筆者寫的上篇都是<code>Query</code>，屬於<code>ExecuteReader</code>部份，只要撰寫</p>
<ul>
<li>ReaderExecuting</li>
<li>ReaderExecuted</li>
</ul>
<p>這兩個Method，其他的就先維持預設的「throw new NotImplementedException();」，另外wiki中也示範另一個重點是「<code>DataBag</code>」的概念，他是用<code>key、value</code>的方式設定，可以於不同事件method中交換資料，感覺很像mvc網站中的<code>ViewBag、ViewData</code>。範例中是示範<code>ReaderExecuting</code>中設定好<code>startTime</code>參數、<code>ReaderExecuted</code>中讀出<code>startTime</code>參數，與現在時間做比較，算出sql執行時間並印出來。</p>
<h2 id="實作Interceptor"><a href="#實作Interceptor" class="headerlink" title="實作Interceptor"></a>實作Interceptor</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DbCommandInterceptor</span> : <span class="title">IDbCommandInterceptor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">NonQueryExecuted</span>(<span class="params">IDbCommand command, DbCommandInterceptionContext&lt;<span class="built_in">int</span>&gt; interceptionContext</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">NonQueryExecuting</span>(<span class="params">IDbCommand command, DbCommandInterceptionContext&lt;<span class="built_in">int</span>&gt; interceptionContext</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 执行 DbCommand.ExecuteReader() 时调用 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReaderExecuting</span>(<span class="params">IDbCommand command, DbCommandInterceptionContext&lt;IDataReader&gt; interceptionContext</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        interceptionContext.DataBag.Add(<span class="string">&quot;startTime&quot;</span>, DateTime.Now);</span><br><span class="line">        Console.WriteLine(command.CommandText);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 执行 DbCommand.ExecuteReader() 后调用 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReaderExecuted</span>(<span class="params">IDbCommand command, DbCommandInterceptionContext&lt;IDataReader&gt; interceptionContext</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        DateTime startTime = (DateTime)(interceptionContext.DataBag[<span class="string">&quot;startTime&quot;</span>]);</span><br><span class="line">        Console.WriteLine(DateTime.Now.Subtract(startTime).TotalMilliseconds);</span><br><span class="line">        <span class="keyword">if</span> (interceptionContext.Exception == <span class="literal">null</span>)</span><br><span class="line">            Console.WriteLine(interceptionContext.Result.FieldCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ScalarExecuted</span>(<span class="params">IDbCommand command, DbCommandInterceptionContext&lt;<span class="built_in">object</span>&gt; interceptionContext</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ScalarExecuting</span>(<span class="params">IDbCommand command, DbCommandInterceptionContext&lt;<span class="built_in">object</span>&gt; interceptionContext</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="註冊Interceptor"><a href="#註冊Interceptor" class="headerlink" title="註冊Interceptor"></a>註冊Interceptor</h2><p>要調整一下之前註冊IDbContext的地方</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">services.AddScoped&lt;ChloeORM.IDbContext&gt;((serviceProvider) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> dbContext = <span class="keyword">new</span> ChloeORM.MySql.MySqlContext(</span><br><span class="line">        <span class="keyword">new</span> MySqlConnectionFactory(Configuration.GetConnectionString(<span class="string">&quot;ClassicModels&quot;</span>)));</span><br><span class="line">        dbContext.Session.AddInterceptor(<span class="keyword">new</span> DbCommandInterceptor());</span><br><span class="line">    <span class="keyword">return</span> dbContext;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="調用結果"><a href="#調用結果" class="headerlink" title="調用結果"></a>調用結果</h2><p>筆者以上篇為例，貼出<code>CustomerService</code>，以註解的方式填寫對應的sql指令</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomerService</span> : <span class="title">ICustomerService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IDbContext _db;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomerService</span>(<span class="params">IDbContext db</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _db = db;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customers <span class="title">GetCustomerById</span>(<span class="params"><span class="built_in">int</span> customerNumber</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// LIMIT部份不同資料庫會有不同的宣告</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        SELECT</span></span><br><span class="line"><span class="comment">            `Customers`.`CustomerNumber` AS `CustomerNumber`,</span></span><br><span class="line"><span class="comment">            `Customers`.`CustomerName` AS `CustomerName`,</span></span><br><span class="line"><span class="comment">            `Customers`.`ContactLastName` AS `ContactLastName`,</span></span><br><span class="line"><span class="comment">            `Customers`.`ContactFirstName` AS `ContactFirstName`,</span></span><br><span class="line"><span class="comment">            `Customers`.`Phone` AS `Phone`,</span></span><br><span class="line"><span class="comment">            `Customers`.`AddressLine1` AS `AddressLine1`,</span></span><br><span class="line"><span class="comment">            `Customers`.`AddressLine2` AS `AddressLine2`,</span></span><br><span class="line"><span class="comment">            `Customers`.`City` AS `City`,</span></span><br><span class="line"><span class="comment">            `Customers`.`State` AS `State`,</span></span><br><span class="line"><span class="comment">            `Customers`.`PostalCode` AS `PostalCode`,</span></span><br><span class="line"><span class="comment">            `Customers`.`Country` AS `Country`,</span></span><br><span class="line"><span class="comment">            `Customers`.`SalesRepEmployeeNumber` AS `SalesRepEmployeeNumber`,</span></span><br><span class="line"><span class="comment">            `Customers`.`CreditLimit` AS `CreditLimit`</span></span><br><span class="line"><span class="comment">        FROM</span></span><br><span class="line"><span class="comment">            `Customers` AS `Customers`</span></span><br><span class="line"><span class="comment">        WHERE</span></span><br><span class="line"><span class="comment">            `Customers`.`CustomerNumber` = ?P_0</span></span><br><span class="line"><span class="comment">        LIMIT</span></span><br><span class="line"><span class="comment">            0, 1</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">return</span> _db.Query&lt;Customers&gt;()</span><br><span class="line">        .FirstOrDefault(x =&gt; x.CustomerNumber == customerNumber);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IEnumerable</span>&lt;<span class="title">Customers</span>&gt; <span class="title">GetCustomerListByLikeConditions</span>(<span class="params">CustomerLikeConditions conditions</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        SELECT</span></span><br><span class="line"><span class="comment">            `Customers`.`CustomerNumber` AS `CustomerNumber`,</span></span><br><span class="line"><span class="comment">            `Customers`.`CustomerName` AS `CustomerName`,</span></span><br><span class="line"><span class="comment">            `Customers`.`ContactLastName` AS `ContactLastName`,</span></span><br><span class="line"><span class="comment">            `Customers`.`ContactFirstName` AS `ContactFirstName`,</span></span><br><span class="line"><span class="comment">            `Customers`.`Phone` AS `Phone`,</span></span><br><span class="line"><span class="comment">            `Customers`.`AddressLine1` AS `AddressLine1`,</span></span><br><span class="line"><span class="comment">            `Customers`.`AddressLine2` AS `AddressLine2`,</span></span><br><span class="line"><span class="comment">            `Customers`.`City` AS `City`,</span></span><br><span class="line"><span class="comment">            `Customers`.`State` AS `State`,</span></span><br><span class="line"><span class="comment">            `Customers`.`PostalCode` AS `PostalCode`,</span></span><br><span class="line"><span class="comment">            `Customers`.`Country` AS `Country`,</span></span><br><span class="line"><span class="comment">            `Customers`.`SalesRepEmployeeNumber` AS `SalesRepEmployeeNumber`,</span></span><br><span class="line"><span class="comment">            `Customers`.`CreditLimit` AS `CreditLimit`</span></span><br><span class="line"><span class="comment">        FROM</span></span><br><span class="line"><span class="comment">            `Customers` AS `Customers`</span></span><br><span class="line"><span class="comment">        WHERE</span></span><br><span class="line"><span class="comment">            `Customers`.`CustomerName` LIKE CONCAT(?P_0, &#x27;%&#x27;)</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">return</span> _db.Query&lt;Customers&gt;()</span><br><span class="line">        .Where(x =&gt; x.CustomerName.StartsWith(conditions.CustomerName))</span><br><span class="line">        .ToList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IEnumerable</span>&lt;<span class="title">Customers</span>&gt; <span class="title">GetCustomersListByInConditions</span>(<span class="params">CustomerInConditions conditions</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        SELECT</span></span><br><span class="line"><span class="comment">            `Customers`.`CustomerNumber` AS `CustomerNumber`,</span></span><br><span class="line"><span class="comment">            `Customers`.`CustomerName` AS `CustomerName`,</span></span><br><span class="line"><span class="comment">            `Customers`.`ContactLastName` AS `ContactLastName`,</span></span><br><span class="line"><span class="comment">            `Customers`.`ContactFirstName` AS `ContactFirstName`,</span></span><br><span class="line"><span class="comment">            `Customers`.`Phone` AS `Phone`,</span></span><br><span class="line"><span class="comment">            `Customers`.`AddressLine1` AS `AddressLine1`,</span></span><br><span class="line"><span class="comment">            `Customers`.`AddressLine2` AS `AddressLine2`,</span></span><br><span class="line"><span class="comment">            `Customers`.`City` AS `City`,</span></span><br><span class="line"><span class="comment">            `Customers`.`State` AS `State`,</span></span><br><span class="line"><span class="comment">            `Customers`.`PostalCode` AS `PostalCode`,</span></span><br><span class="line"><span class="comment">            `Customers`.`Country` AS `Country`,</span></span><br><span class="line"><span class="comment">            `Customers`.`SalesRepEmployeeNumber` AS `SalesRepEmployeeNumber`,</span></span><br><span class="line"><span class="comment">            `Customers`.`CreditLimit` AS `CreditLimit`</span></span><br><span class="line"><span class="comment">        FROM</span></span><br><span class="line"><span class="comment">            `Customers` AS `Customers`</span></span><br><span class="line"><span class="comment">        WHERE</span></span><br><span class="line"><span class="comment">            `Customers`.`CustomerName` IN (?P_0, ?P_1, ?P_2)</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">return</span> _db.Query&lt;Customers&gt;()</span><br><span class="line">        .Where(x =&gt; conditions.CustomerNameList.Contains(x.CustomerName))</span><br><span class="line">        .ToList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IEnumerable</span>&lt;<span class="title">Customers</span>&gt; <span class="title">GetCustomersListByPaginationConditions</span>(<span class="params">CustomerPageConditions conditions</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        SELECT</span></span><br><span class="line"><span class="comment">            `Customers`.`CustomerNumber` AS `CustomerNumber`,</span></span><br><span class="line"><span class="comment">            `Customers`.`CustomerName` AS `CustomerName`,</span></span><br><span class="line"><span class="comment">            `Customers`.`ContactLastName` AS `ContactLastName`,</span></span><br><span class="line"><span class="comment">            `Customers`.`ContactFirstName` AS `ContactFirstName`,</span></span><br><span class="line"><span class="comment">            `Customers`.`Phone` AS `Phone`,</span></span><br><span class="line"><span class="comment">            `Customers`.`AddressLine1` AS `AddressLine1`,</span></span><br><span class="line"><span class="comment">            `Customers`.`AddressLine2` AS `AddressLine2`,</span></span><br><span class="line"><span class="comment">            `Customers`.`City` AS `City`,</span></span><br><span class="line"><span class="comment">            `Customers`.`State` AS `State`,</span></span><br><span class="line"><span class="comment">            `Customers`.`PostalCode` AS `PostalCode`,</span></span><br><span class="line"><span class="comment">            `Customers`.`Country` AS `Country`,</span></span><br><span class="line"><span class="comment">            `Customers`.`SalesRepEmployeeNumber` AS `SalesRepEmployeeNumber`,</span></span><br><span class="line"><span class="comment">            `Customers`.`CreditLimit` AS `CreditLimit`</span></span><br><span class="line"><span class="comment">        FROM</span></span><br><span class="line"><span class="comment">            `Customers` AS `Customers`</span></span><br><span class="line"><span class="comment">        ORDER BY</span></span><br><span class="line"><span class="comment">            `Customers`.`CustomerName` ASC,</span></span><br><span class="line"><span class="comment">            `Customers`.`CustomerNumber` ASC</span></span><br><span class="line"><span class="comment">        LIMIT</span></span><br><span class="line"><span class="comment">            0, 10</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">return</span> _db.Query&lt;Customers&gt;()</span><br><span class="line">        .OrderBy(x =&gt; x.CustomerName)</span><br><span class="line">        .ThenBy(x =&gt; x.CustomerNumber)</span><br><span class="line">        .TakePage(conditions.PageNumber, conditions.PageSize)</span><br><span class="line">        .ToList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">List</span>&lt;<span class="title">string</span>&gt; <span class="title">GetCustomersCountryListByDistinct</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// SELECT DISTINCT `Customers`.`Country` AS `C` FROM `Customers` AS `Customers`</span></span><br><span class="line">        <span class="keyword">return</span> _db.Query&lt;Customers&gt;()</span><br><span class="line">        .Select(x =&gt; x.Country)</span><br><span class="line">        .Distinct()</span><br><span class="line">        .ToList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerable&lt;Customers&gt; <span class="title">GetCustomersListByExists</span>(<span class="params">CustomerExistConditions conditions</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        SELECT</span></span><br><span class="line"><span class="comment">            `Customers`.`CustomerNumber` AS `CustomerNumber`,</span></span><br><span class="line"><span class="comment">            `Customers`.`CustomerName` AS `CustomerName`,</span></span><br><span class="line"><span class="comment">            `Customers`.`ContactLastName` AS `ContactLastName`,</span></span><br><span class="line"><span class="comment">            `Customers`.`ContactFirstName` AS `ContactFirstName`,</span></span><br><span class="line"><span class="comment">            `Customers`.`Phone` AS `Phone`,</span></span><br><span class="line"><span class="comment">            `Customers`.`AddressLine1` AS `AddressLine1`,</span></span><br><span class="line"><span class="comment">            `Customers`.`AddressLine2` AS `AddressLine2`,</span></span><br><span class="line"><span class="comment">            `Customers`.`City` AS `City`,</span></span><br><span class="line"><span class="comment">            `Customers`.`State` AS `State`,</span></span><br><span class="line"><span class="comment">            `Customers`.`PostalCode` AS `PostalCode`,</span></span><br><span class="line"><span class="comment">            `Customers`.`Country` AS `Country`,</span></span><br><span class="line"><span class="comment">            `Customers`.`SalesRepEmployeeNumber` AS `SalesRepEmployeeNumber`,</span></span><br><span class="line"><span class="comment">            `Customers`.`CreditLimit` AS `CreditLimit`</span></span><br><span class="line"><span class="comment">        FROM</span></span><br><span class="line"><span class="comment">            `Customers` AS `Customers`</span></span><br><span class="line"><span class="comment">        WHERE</span></span><br><span class="line"><span class="comment">            Exists (</span></span><br><span class="line"><span class="comment">                SELECT</span></span><br><span class="line"><span class="comment">                    ?P_0 AS `C`</span></span><br><span class="line"><span class="comment">                FROM</span></span><br><span class="line"><span class="comment">                    `Customers` AS `Customers0`</span></span><br><span class="line"><span class="comment">                WHERE</span></span><br><span class="line"><span class="comment">                    (</span></span><br><span class="line"><span class="comment">                        `Customers0`.`Country` = ?P_1</span></span><br><span class="line"><span class="comment">                        AND `Customers0`.`CustomerNumber` = `Customers`.`CustomerNumber`</span></span><br><span class="line"><span class="comment">                    )</span></span><br><span class="line"><span class="comment">            )</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">return</span> _db.Query&lt;Customers&gt;()</span><br><span class="line">        .Where(x =&gt; _db.Query&lt;Customers&gt;()</span><br><span class="line">                    .Where(c =&gt; c.Country == conditions.CountryName</span><br><span class="line">                    &amp;&amp; c.CustomerNumber == x.CustomerNumber)</span><br><span class="line">                    .Any())</span><br><span class="line">        .ToList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上，筆者需要解釋的就是<code>?P_0</code>、<code>?P_1</code>等，應該就是會使用sql parameter對應的參數，其他的應該都看得懂，相較於<code>EFcore</code>產出的sql，<code>Chloe</code>產出的還算看得懂。</p>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>畢竟<code>Chloe</code>套件本身也只是利用Extension及Expression解析，包裝成方便使用的<code>linq形式</code>存取對應的資料表，就像使用<code>EFCore</code>時因應效能上的考量，需要知道EFCore幫我們做了哪些事一樣，使用類似的ORM套件時，一開始使用，需要了解它底層幫我們做了什麼事是可以避免誤用的，筆者覺得是值得把時間投資在上面的。</p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>chloe</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>chloe</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]ORM系列-Chloe:Select篇</title>
    <url>/2021/09/07/orm-series-chloe-select/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>上篇<a href="/2021/09/04/orm-series-chloe-entry/" title="[DotnetCore]ORM系列-Chloe:入門篇">[DotnetCore]ORM系列-Chloe:入門篇</a>介紹<code>Chloe</code>的使用方式，這篇主要繼續探討，<code>Chloe</code>提供哪些Select相關的Method，跟著筆者一起看下去。跟著Chloe github的wiki針對筆者之前建立的範例資料庫做一個應用吧。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>筆者這邊就照著github wiki上的教學，針對筆者自己建的範例資料庫，做一個實際應用的Demo，每一段都會有他自己的<code>Conditions Model</code>，對應的<code>Service</code>及<code>Controller</code>的宣告。</p>
<h2 id="基礎查詢"><a href="#基礎查詢" class="headerlink" title="基礎查詢"></a>基礎查詢</h2><p>這次所有範例的Service相關的Interface宣告如下</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICustomerService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">Customers <span class="title">GetCustomerById</span>(<span class="params"><span class="built_in">int</span> customerNumber</span>)</span>;</span><br><span class="line">    <span class="function">IEnumerable&lt;Customers&gt; <span class="title">GetCustomerListByLikeConditions</span>(<span class="params">CustomerLikeConditions conditions</span>)</span>;</span><br><span class="line">    <span class="function">IEnumerable&lt;Customers&gt; <span class="title">GetCustomersListByInConditions</span>(<span class="params">CustomerInConditions conditions</span>)</span>;</span><br><span class="line">    <span class="function">IEnumerable&lt;Customers&gt; <span class="title">GetCustomersListByPaginationConditions</span>(<span class="params">CustomerPageConditions conditions</span>)</span>;</span><br><span class="line">    <span class="function">List&lt;<span class="built_in">string</span>&gt; <span class="title">GetCustomersCountryListByDistinct</span>()</span>;</span><br><span class="line">    <span class="function">IEnumerable&lt;Customers&gt; <span class="title">GetCustomersListByExists</span>(<span class="params">CustomerExistConditions conditions</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>對應的<code>API Url</code>如下</p>
<img src="/2021/09/07/orm-series-chloe-select/Untitled.png" class="" title="[CustomerAPI-Swagger]">

<h3 id="PrimaryKey過濾"><a href="#PrimaryKey過濾" class="headerlink" title="PrimaryKey過濾"></a>PrimaryKey過濾</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Service</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Customers <span class="title">GetCustomerById</span>(<span class="params"><span class="built_in">int</span> customerNumber</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> _db.Query&lt;Customers&gt;()</span><br><span class="line">    .FirstOrDefault(x =&gt; x.CustomerNumber == customerNumber);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Controller</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 依照客戶編號取得客戶</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;customerNumber&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">ProducesResponseType(typeof(Customers), StatusCodes.Status200OK)</span>]</span><br><span class="line">[<span class="meta">HttpPost(<span class="string">&quot;&#123;customerNumber&#125;&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetCustomerById</span>(<span class="params"><span class="built_in">int</span> customerNumber</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> Ok(_customerService.GetCustomerById(customerNumber));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2021/09/07/orm-series-chloe-select/Untitled1.png" class="" title="[CustomerService-GetCustomerById]">

<h3 id="Like查詢"><a href="#Like查詢" class="headerlink" title="Like查詢"></a>Like查詢</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ConditionsModel</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomerLikeConditions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CustomerName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Service(筆者這邊示範使用某個字母開頭的過濾)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">IEnumerable</span>&lt;<span class="title">Customers</span>&gt; <span class="title">GetCustomerListByLikeConditions</span>(<span class="params">CustomerLikeConditions conditions</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> _db.Query&lt;Customers&gt;()</span><br><span class="line">    .Where(x =&gt; x.CustomerName.StartsWith(conditions.CustomerName))</span><br><span class="line">    .ToList();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Controller</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 依照客戶名稱做開頭過濾並取得清單</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;conditions&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">ProducesResponseType(typeof(IEnumerable&lt;Customers&gt;), StatusCodes.Status200OK)</span>]</span><br><span class="line">[<span class="meta">HttpPost(<span class="string">&quot;like&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetCustomerListByLikeConditions</span>(<span class="params">CustomerLikeConditions conditions</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> Ok(_customerService.GetCustomerListByLikeConditions(conditions));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2021/09/07/orm-series-chloe-select/Untitled2.png" class="" title="[CustomerService-GetCustomerListByLike]">

<h3 id="In查詢"><a href="#In查詢" class="headerlink" title="In查詢"></a>In查詢</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ConditionsModel</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomerInConditions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">List</span>&lt;<span class="title">string</span>&gt; CustomerNameList</span> &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Service</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">IEnumerable</span>&lt;<span class="title">Customers</span>&gt; <span class="title">GetCustomersListByInConditions</span>(<span class="params">CustomerInConditions conditions</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> _db.Query&lt;Customers&gt;()</span><br><span class="line">    .Where(x =&gt; conditions.CustomerNameList.Contains(x.CustomerName))</span><br><span class="line">    .ToList();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Controller</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 依照客戶名稱清單取得客戶清單</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;conditions&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">ProducesResponseType(typeof(IEnumerable&lt;Customers&gt;), StatusCodes.Status200OK)</span>]</span><br><span class="line">[<span class="meta">HttpPost(<span class="string">&quot;in&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetCustomerListByInConditions</span>(<span class="params">CustomerInConditions conditions</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// var inConditionsNameList = new List&lt;string&gt;()</span></span><br><span class="line">    <span class="comment">// &#123; &quot;Atelier graphique&quot;</span></span><br><span class="line">    <span class="comment">// , &quot;Signal Gift Stores&quot;</span></span><br><span class="line">    <span class="comment">// , &quot;Australian Collectors, Co.&quot;&#125;;</span></span><br><span class="line">    <span class="keyword">return</span> Ok(_customerService.GetCustomersListByInConditions(conditions));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2021/09/07/orm-series-chloe-select/Untitled3.png" class="" title="[CustomerService-GetCustomerListByIn]">

<h3 id="排序分頁查詢"><a href="#排序分頁查詢" class="headerlink" title="排序分頁查詢"></a>排序分頁查詢</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ConditionsModel</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BasePaginationParameters</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">int</span> PageNumber &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">int</span> PageSize &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomerPageConditions</span> : <span class="title">BasePaginationParameters</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Service</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">IEnumerable</span>&lt;<span class="title">Customers</span>&gt; <span class="title">GetCustomersListByPaginationConditions</span>(<span class="params">CustomerPageConditions conditions</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> _db.Query&lt;Customers&gt;()</span><br><span class="line">    .OrderBy(x =&gt; x.CustomerName)</span><br><span class="line">    .ThenBy(x =&gt; x.CustomerNumber)</span><br><span class="line">    .TakePage(conditions.PageNumber, conditions.PageSize)</span><br><span class="line">    .ToList();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Controller</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 依照分頁資訊取得客戶清單</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;conditions&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">ProducesResponseType(typeof(IEnumerable&lt;Customers&gt;), StatusCodes.Status200OK)</span>]</span><br><span class="line">[<span class="meta">HttpPost(<span class="string">&quot;pagination&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetCustomerListByPagination</span>(<span class="params">CustomerPageConditions conditions</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> Ok(_customerService.GetCustomersListByPaginationConditions(conditions));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2021/09/07/orm-series-chloe-select/Untitled4.png" class="" title="[CustomerService-GetCustomerListByPagSize:10]">

<img src="/2021/09/07/orm-series-chloe-select/Untitled5.png" class="" title="[CustomerService-GetCustomerListByPageSize:20]">


<h3 id="Distinct查詢"><a href="#Distinct查詢" class="headerlink" title="Distinct查詢"></a>Distinct查詢</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Service</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">List</span>&lt;<span class="title">string</span>&gt; <span class="title">GetCustomersCountryListByDistinct</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> _db.Query&lt;Customers&gt;()</span><br><span class="line">    .Select(x =&gt; x.Country)</span><br><span class="line">    .Distinct()</span><br><span class="line">    .ToList();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Controller</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 取得客戶國家清單(distinct)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">ProducesResponseType(typeof(List&lt;string&gt;), StatusCodes.Status200OK)</span>]</span><br><span class="line">[<span class="meta">HttpPost(<span class="string">&quot;distinct&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetCustomerCountryDistinctList</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> Ok(_customerService.GetCustomersCountryListByDistinct());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2021/09/07/orm-series-chloe-select/Untitled6.png" class="" title="[CustomerService-GetCustomerListByDistinct]">

<h3 id="Exists查詢"><a href="#Exists查詢" class="headerlink" title="Exists查詢"></a>Exists查詢</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Conditions Model</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomerExistConditions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CountryName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Service</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">IEnumerable</span>&lt;<span class="title">Customers</span>&gt; <span class="title">GetCustomersListByExists</span>(<span class="params">CustomerExistConditions conditions</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> _db.Query&lt;Customers&gt;()</span><br><span class="line">    .Where(x =&gt; _db.Query&lt;Customers&gt;()</span><br><span class="line">                .Where(c =&gt; c.Country == conditions.CountryName</span><br><span class="line">                &amp;&amp; c.CustomerNumber == x.CustomerNumber)</span><br><span class="line">                .Any())</span><br><span class="line">    .ToList();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Controller</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 依照條件取得客戶清單(國家exists)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;conditions&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">ProducesResponseType(typeof(IEnumerable&lt;Customers&gt;), StatusCodes.Status200OK)</span>]</span><br><span class="line">[<span class="meta">HttpPost(<span class="string">&quot;exists&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetCustomerListByExists</span>(<span class="params">CustomerExistConditions conditions</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> Ok(_customerService.GetCustomersListByExists(conditions));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2021/09/07/orm-series-chloe-select/Untitled7.png" class="" title="[CustomerService-GetCustomerListByExists]">

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>經由這篇介紹基本查詢部份，筆者覺得還滿方便使用的，可以應付日常使用，使用linq形式來過濾資料就是舒服，強型別<code>Intellisense</code>才是王道啊，下一篇撰寫<code>Chloe</code>提供的<code>Interceptor</code>，來探究一下，經由這樣的宣告，<code>Chloe</code>幫我們產生了什麼對應的sql語法，經由這樣驗證，才會更了解應用，就下篇見了。</p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>chloe</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>chloe</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]ORM系列-EFCore:資料表共同欄位設定</title>
    <url>/2021/09/05/orm-series-efcore-override-savechanges/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者工作環境中開發<code>ASP.NET CORE Web API</code>，資料庫存取部份，會交叉使用<code>EF Core</code>以及<code>Dapper</code>，筆者單位共同認知的切分方式為若單個資料表的CRUD操作，就使用<code>EF Core</code>，若複雜的查詢，或者呼叫Store Procedure等會使用Dapper完成操作。單個資料表的<code>CRUD</code>，基本上透過<code>EF Core</code>可以說是輕而易舉，會遇到一個問題是資料表共同欄位，類似於<code>CreatedDate, CreatedBy, UpdatedDate, UpdatedBy</code>這種紀錄變更者及變更時間部份，若寫在每一個<code>Service</code>中會顯得有點多餘，且沒有效率，擴充性也不好，假設現在要改變<code>CreatedDate, UpdatedDate</code>的時間原本由<code>Local Time</code>改為<code>UTC  Time</code>，其不就是要在每個Service中做修正。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>鑒於此，應該要想個辦法找出共同方法中做統一處理，筆者知道<code>EF Core</code>的<code>SaveChanges()</code>方法是可以覆寫的，也就是說我們只要在<code>SaveChanges()</code>方法中判斷新增或更新，針對不同欄位做更新值的動作，等於完成幫所有資料表的共同欄位做更新。</p>
<p>筆者工作環境中遇到的情境通常都是資料庫端已設計好資料結構，再撰寫程式的居多，這樣一來<code>EF Core</code>部份會選擇使用<code>scaffold</code>的方式自動產生資料庫對應的物件類別。筆者會在另一篇獨立講解<code>scaffold</code>的使用方式，這篇就先跳過，再來因資料表對應物件類別為工具產生出來的，盡量不要手動改寫，這時候要托<code>Partial Class</code>之福，我們可以設計<code>Partial Class</code>做覆寫作業。</p>
<h2 id="設計共同欄位的介面"><a href="#設計共同欄位的介面" class="headerlink" title="設計共同欄位的介面"></a>設計共同欄位的介面</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IChangesEntity</span></span><br><span class="line">&#123;</span><br><span class="line">    DateTimeOffset CreatedDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="built_in">long</span> CreatedBy &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    DateTimeOffset? UpdatedDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="built_in">long</span>? UpdatedBy &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="製作共同欄位介面"><a href="#製作共同欄位介面" class="headerlink" title="製作共同欄位介面"></a>製作共同欄位介面</h2><p>主要是將把共同欄位做介面的宣告，這個是一個通用的技巧，若宣告介面，你寫<code>泛型T</code>相關<code>Method</code>或者<code>類別</code>都有幫助，因為那個<code>泛型T</code>限制為要實作某一個介面，好處就是在程式碼中可以點出相關<code>Property</code>。我們就沿用這個概念於此，就把共同欄位抽出來變成一個獨立的介面:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 共同欄位-主要識別碼</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IEntity</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">long</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 實作軟刪除</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IDeleteEntity</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">bool</span> IsDelete &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 共同欄位-新增編輯會用到</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IChangesEntity</span></span><br><span class="line">&#123;</span><br><span class="line">    DateTimeOffset CreatedDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="built_in">long</span> CreatedBy &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    DateTimeOffset? UpdatedDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="built_in">long</span>? UpdatedBy &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="宣告各類別的Partial-Class"><a href="#宣告各類別的Partial-Class" class="headerlink" title="宣告各類別的Partial Class"></a>宣告各類別的Partial Class</h2><p>基本上Entities類別是由scaffold自動產出，我們為了各類別有實作上步驟所制定的介面，我們必須自己宣告一個Partial Class，實質意義只是為了宣告實作介面而已。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 這邊namespace要特別注意，須與相對應的實際Entity類別同一個namespace，才有Partial效果</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">XXX.Entities</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Account</span> : <span class="title">IEntity</span>, <span class="title">IChangesEntity</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="DBContext覆寫SaveChanges"><a href="#DBContext覆寫SaveChanges" class="headerlink" title="DBContext覆寫SaveChanges()"></a>DBContext覆寫SaveChanges()</h2><p>基本上API部份有做Authorize，托<code>.net core DI</code>設計之福，很容易取得登入者，只要注入<code>IHttpContextAccessor</code>，可以輕鬆取得該操作者(登入者)資訊。再來就是依照Entry的狀態，可以針對相對應的欄位做編輯。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">XXContext</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">long</span> _userId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">XXContext</span>(<span class="params">DbContextOptions&lt;XXContext&gt; options</span></span></span><br><span class="line"><span class="params"><span class="function">        , IHttpContextAccessor context</span>) : <span class="title">base</span>(<span class="params">options</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> userId = context?.HttpContext?.User?.FindFirst(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        _userId = userId != <span class="literal">null</span> ? Convert.ToInt64(userId.Value) : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span> <span class="title">SaveChanges</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        ChangeTracker.DetectChanges();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> entry <span class="keyword">in</span> ChangeTracker.Entries())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (entry.Entity <span class="keyword">is</span> IChangesEntity ec)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">switch</span> (entry.State)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">case</span> EntityState.Added:</span><br><span class="line">                        ec.CreatedDate = DateTimeOffset.UtcNow;</span><br><span class="line">                        ec.CreatedBy = _userId;</span><br><span class="line">                        ec.UpdatedDate = DateTimeOffset.UtcNow;</span><br><span class="line">                        ec.UpdatedBy = _userId;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> EntityState.Modified:</span><br><span class="line">                        ec.UpdatedDate = DateTimeOffset.UtcNow;</span><br><span class="line">                        ec.UpdatedBy = _userId;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> EntityState.Detached:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> EntityState.Unchanged:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> EntityState.Deleted:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="literal">default</span>:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentOutOfRangeException();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (entry.Entity <span class="keyword">is</span> IDeleteEntity e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">switch</span> (entry.State)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">case</span> EntityState.Added:</span><br><span class="line">                        e.IsDelete = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> EntityState.Deleted:</span><br><span class="line">                        e.IsDelete = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="literal">default</span>:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentOutOfRangeException();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">base</span>.SaveChanges();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>宣告完這些步驟後，使用端完全沒有感覺到任何的改變，只要操作<code>DbContext</code>下相對應的Entity物件，只要做<code>SaveChanges()</code>，就會執行base的<code>SaveChanges()</code>之前把那些共同欄位值做更新作業，達成擴充性高的一種實作方式。</p>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>這篇主要利用<code>Partial Class</code>及<code>Override</code>的技巧，達到其統一由一套Method將共同欄位值更新作業，擴充性高，筆者也在上面文中舉過例子，編輯時間的取值調動，我們可以再想一個情境，編輯者目前是透過<code>IHttpContextAccessor</code>注入的方式取得，若要改成其他方式取得編輯者，若設定編輯者的程式碼散落在各個地方是，不可能確保沒有漏網之魚，且花費成本顯然比改<code>DbContext.Partial.cs</code>來得高很多，因此筆者認為此文中的解法已經算上上之選了。</p>
<p>參考</p>
<ul>
<li><a href="https://stackoverflow.com/questions/26908301/best-way-to-override-savechanges">https://stackoverflow.com/questions/26908301/best-way-to-override-savechanges</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>efcore</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>efcore</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]ORM系列-Chloe:入門篇</title>
    <url>/2021/09/04/orm-series-chloe-entry/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者被朋友推薦使用<a href="https://github.com/shuxinqin/Chloe/wiki">Chloe</a>，查了一下也看到<a href="https://blog.csdn.net/qq_40600379/article/details/101680870">ORM框架效能</a>比較文章，效能是真的很棒，使用上也是透過linq實現所有事情，這篇主要介紹<code>Chloe ORM</code>套件的使用，搭配筆者之前建立的MySQL範例資料庫，做一些簡單的Select查詢示範，之後會再慢慢介紹整個應用。前置作業參考</p>
<ul>
<li><a href="/2021/08/23/mysql-install/" title="[MySQL]安裝與設定">[MySQL]安裝與設定</a></li>
<li><a href="/2021/08/23/mysql-sample-db/" title="[MySQL]範例資料庫設定">[MySQL]範例資料庫設定</a></li>
</ul>
<span id="more"></span>
<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><h2 id="建立Demo-API專案"><a href="#建立Demo-API專案" class="headerlink" title="建立Demo API專案"></a>建立Demo API專案</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建立資料夾</span></span><br><span class="line"><span class="built_in">mkdir</span> Demo.ORM.Chloe</span><br><span class="line"><span class="built_in">cd</span> Demo.ORM.Chloe</span><br><span class="line"><span class="comment"># 建立API專案</span></span><br><span class="line">dotnet new webapi -n Demo.ORM.Chloe.API</span><br><span class="line"><span class="built_in">cd</span> Demo.ORM.Chloe.API</span><br><span class="line"><span class="comment"># 安裝Chloe套件，筆者這邊使用MySql，因此安裝Chloe.MySql</span></span><br><span class="line">dotnet add package Chloe.MySql</span><br><span class="line"><span class="comment"># 因要存取MySql，需要MySql Driver套件</span></span><br><span class="line">dotnet add package MySqlConnector</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="撰寫程式"><a href="#撰寫程式" class="headerlink" title="撰寫程式"></a>撰寫程式</h2><h3 id="宣告連線字串"><a href="#宣告連線字串" class="headerlink" title="宣告連線字串"></a>宣告連線字串</h3><p>於<code>appsettings.Development.json</code>中多加入一組設定</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;ConnectionStrings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ClassicModels&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Server=localhost;Database=classicmodels;Uid=YOURACCOUNT;Pwd=YOURPASSWORD&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="撰寫ConnectionFactory並註冊"><a href="#撰寫ConnectionFactory並註冊" class="headerlink" title="撰寫ConnectionFactory並註冊"></a>撰寫ConnectionFactory並註冊</h3><p>Chloe套件的github wiki中就有教學，筆者這邊就直接照抄了，首先設定<code>MySqlConnectionFactory</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MySqlConnectionFactory</span> : <span class="title">IDbConnectionFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> _connString = <span class="literal">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySqlConnectionFactory</span>(<span class="params"><span class="built_in">string</span> connString</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>._connString = connString;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IDbConnection <span class="title">CreateConnection</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        IDbConnection conn = <span class="keyword">new</span> MySqlConnection(<span class="keyword">this</span>._connString);</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>註冊於<code>Startup</code>中</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 以上省略</span></span><br><span class="line">    services.AddScoped&lt;ChloeORM.IDbContext&gt;((serviceProvider) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ChloeORM.MySql.MySqlContext(</span><br><span class="line">            <span class="keyword">new</span> MySqlConnectionFactory(Configuration.GetConnectionString(<span class="string">&quot;ClassicModels&quot;</span>)));</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 以下省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="宣告資料庫對應的Model"><a href="#宣告資料庫對應的Model" class="headerlink" title="宣告資料庫對應的Model"></a>宣告資料庫對應的Model</h3><p>這一步就是ORM中的M來著，基本上因為沒有配套的POCO Generator，需要手動宣告，若db中的命名與程式端的名稱要不一樣則，套件有開放<code>Table</code>、<code>Column</code>對應的Attribute可以設定</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Customers</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> CustomerNumber &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CustomerName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ContactLastName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ContactFirstName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Phone &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> AddressLine1 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> AddressLine2 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> City &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> State &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> PostalCode &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Country &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span>? SalesRepEmployeeNumber &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">decimal</span> CreditLimit &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="撰寫Service並註冊"><a href="#撰寫Service並註冊" class="headerlink" title="撰寫Service並註冊"></a>撰寫Service並註冊</h3><p>先宣告一個<code>ICustomerService</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICustomerService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">IEnumerable&lt;Customers&gt; <span class="title">GetCustomerList</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接著實作上述宣告的Service</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomerService</span> : <span class="title">ICustomerService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 因上步驟Startup中有註冊，這邊就由Constructor注入得到Chloe的IDbContext</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IDbContext _db;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomerService</span>(<span class="params">IDbContext db</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _db = db;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IEnumerable</span>&lt;<span class="title">Customers</span>&gt; <span class="title">GetCustomerList</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 筆者這邊為方便，只取前十筆</span></span><br><span class="line">        <span class="keyword">return</span> _db.Query&lt;Customers&gt;()</span><br><span class="line">        .OrderBy(x =&gt; x.CustomerNumber)</span><br><span class="line">        .TakePage(<span class="number">1</span>, <span class="number">20</span>).ToList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>註冊於<code>Startup</code>中</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 以上省略</span></span><br><span class="line">    services.AddTransient&lt;ICustomerService, CustomerService&gt;();</span><br><span class="line">    <span class="comment">// 以下省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="撰寫API-Controller"><a href="#撰寫API-Controller" class="headerlink" title="撰寫API Controller"></a>撰寫API Controller</h3><p>最後宣告<code>API Controller</code>，我們透過<code>Postman</code>或<code>Swagger API</code>文件頁面操作</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Route(<span class="string">&quot;api/[controller]&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomerController</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ICustomerService _customerService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomerController</span>(<span class="params">ICustomerService customerService</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _customerService = customerService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 取得客戶清單</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    [<span class="meta">ProducesResponseType(typeof(IEnumerable&lt;Customers&gt;), StatusCodes.Status200OK)</span>]</span><br><span class="line">    [<span class="meta">HttpPost(<span class="string">&quot;&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Index</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Ok(_customerService.GetCustomerList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>整個專案目錄結構如下</p>
<img src="/2021/09/04/orm-series-chloe-entry/Untitled.png" class="" title="[Chloe-Demo專案目錄結構]">

<h2 id="顯示結果"><a href="#顯示結果" class="headerlink" title="顯示結果"></a>顯示結果</h2><img src="/2021/09/04/orm-series-chloe-entry/Untitled1.png" class="" title="[Chloe-Demo專案執行結果]">


<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>其實看Chloe的github wiki頁面，基本上就滿清楚使用方式的，若要說缺點，大概就是沒有相對應的<code>POCO Generator</code>，因此必須得手動宣告，除了這個，筆者覺得開發，效能角度都算是名列前茅的、以筆者以這篇撰寫的demo專案來說，筆者只用了半小時的時間完成，算是開發角度上非常快速的搭建起開發環境的，筆者會再花些篇幅介紹<code>Chloe</code>其他的應用。</p>
<p>參考</p>
<ul>
<li><a href="https://github.com/shuxinqin/Chloe/wiki/MySql-DbContext">https://github.com/shuxinqin/Chloe/wiki/MySql-DbContext</a></li>
<li><a href="https://github.com/shuxinqin/Chloe/wiki/Query">https://github.com/shuxinqin/Chloe/wiki/Query</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>chloe</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>chloe</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]Reader系列-Pdf檔案</title>
    <url>/2021/09/03/reader-series-pdf/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>Reader系列來到pdf格式檔案了，筆者這邊使用<a href="https://pdfbox.apache.org/">Pdfbox</a>移植的C# Library:<a href="https://github.com/UglyToad/PdfPig">PdfPig</a>，讀取部份，看github的readme的教學基本上就滿簡單的，只有讀取一個pdf檔案會很無趣，想了一下應用點，筆者公司銀行有規定新人要考過一些金融業基礎的證照考試取得證照，例: <a href="https://examweb.sfi.org.tw/regexam/exam.aspx?EXAMCERT=%E9%87%91%E8%9E%8D&EXAMMID=2">金融市場常識與職業道德</a>，想到一個有趣的應用，基本上都有考古題下載下來做練習，可以利用<a href="https://github.com/UglyToad/PdfPig">PdfPig</a>套件讀取pdf檔案後解析題目與選項及答案，一旦取得這些資料，利用擅長的前端架構做一個頁面，後端則利用這些資料做一個隨機出題的API，就可以完成考古題測驗Application了，筆者這篇主要做到讀取及解析的作業及取得有結構化的資料。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><h2 id="定義題目對應的Model"><a href="#定義題目對應的Model" class="headerlink" title="定義題目對應的Model"></a>定義題目對應的Model</h2><h3 id="定義Option"><a href="#定義Option" class="headerlink" title="定義Option"></a>定義Option</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">QuestionOption</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">string</span> Option &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">	<span class="comment">// 從考古題的答案對應的選項壓為True</span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">bool</span> IsAnswer &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="定義題目含Option"><a href="#定義題目含Option" class="headerlink" title="定義題目含Option"></a>定義題目含Option</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">QuestionnaireWithOption</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">string</span> Question &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">	<span class="keyword">public</span> List&lt;QuestionOption&gt; Options &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="keyword">new</span> List&lt;QuestionOption&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="下載最新考古題"><a href="#下載最新考古題" class="headerlink" title="下載最新考古題"></a>下載最新考古題</h2><p>連結於此</p>
<ul>
<li><a href="https://webline.sfi.org.tw/download/test_ftp/%E9%87%91%E8%9E%8D%E5%B8%82%E5%A0%B4%E5%B8%B8%E8%AD%98-109.pdf">金融市場常識-109.pdf</a></li>
<li><a href="https://webline.sfi.org.tw/download/test_ftp/%E8%81%B7%E6%A5%AD%E9%81%93%E5%BE%B7-109.pdf">職業道德-109.pdf</a></li>
</ul>
<h2 id="撰寫程式及套用"><a href="#撰寫程式及套用" class="headerlink" title="撰寫程式及套用"></a>撰寫程式及套用</h2><h3 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet add package PdfPig</span><br></pre></td></tr></table></figure>

<h3 id="撰寫主要解析邏輯"><a href="#撰寫主要解析邏輯" class="headerlink" title="撰寫主要解析邏輯"></a>撰寫主要解析邏輯</h3><p>筆者觀察了一下考古題的pdf檔案，規則是滿統一的，</p>
<ul>
<li>答案會寫在最前面</li>
<li>答案的格式為<code>( 4 )</code>這種形式:<code>左括弧、空白、數字、空白、右括弧</code></li>
</ul>
<p>格式統一就好辦事了，使出<a href="https://docs.microsoft.com/zh-tw/dotnet/api/system.text.regularexpressions.regex?view=net-5.0">Regular Expression</a>去做解析，主要解析程式邏輯為</p>
<ul>
<li>使用答案對應的Regex找到所有題目的答案所在位置Index</li>
<li>利用第一步驟找到的Index List把完整題目(含選項、答案)擷取出來，此時可以順便擷取出答案</li>
<li>第二步驟得到的每一個完整題目(含選項)在進行一次對選項的切割，也是利用選項的Regex Pattern:<code>左括弧、數字、右括弧</code>，可以得到選項所在位置Index List</li>
<li>利用第三步得到的Index List，將各選項擷取出來，使用<code>QuestionOption</code>的結構，選項數字跟第二步驟取得的答案相符則在<code>IsAnswer</code>中設為true</li>
<li>最後將完整題目(含選項、答案)的內容透過上面步驟得到的資訊，將題目部份擷取下來</li>
</ul>
<p>經過以上那些步驟，大功告成，來看完成程式碼吧</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">PdfHelper</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Pdf2Json</span>(<span class="params">FileInfo pdffile, FileInfo txtfile</span>)</span></span><br><span class="line">	&#123;</span><br><span class="line">		StreamWriter swPdfChange = <span class="keyword">new</span> StreamWriter(txtfile.FullName, <span class="literal">false</span>, Encoding.GetEncoding(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">		<span class="keyword">var</span> pdfContentStringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">		<span class="comment">// Step1: pdf讀取</span></span><br><span class="line">		<span class="keyword">using</span> (PdfDocument doc = PdfDocument.Open(pdffile.FullName))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">foreach</span> (Page page <span class="keyword">in</span> doc.GetPages())</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">string</span> text = page.Text;</span><br><span class="line">				pdfContentStringBuilder.Append(text);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">var</span> pdfContent = pdfContentStringBuilder.ToString();</span><br><span class="line">        <span class="comment">// Step2: 取得題目清單</span></span><br><span class="line">		<span class="keyword">var</span> questionList = GetQuestionList(pdfContent);</span><br><span class="line">	    <span class="comment">// Step3: 取得有結構化過的題目選項物件清單</span></span><br><span class="line">		<span class="keyword">var</span> questionWithOptionsList = GetQuestionWithOptionList(questionList);</span><br><span class="line">        <span class="comment">// Step4: 寫入Json File中</span></span><br><span class="line">		<span class="keyword">var</span> jsonText = JsonConvert.SerializeObject(questionWithOptionsList);</span><br><span class="line">		swPdfChange.Write(jsonText);</span><br><span class="line">		swPdfChange.Close();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;<span class="built_in">string</span>&gt; <span class="title">GetQuestionList</span>(<span class="params"><span class="built_in">string</span> pdfContent</span>)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">var</span> answerIndexList = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">		<span class="keyword">var</span> questionList = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">		<span class="keyword">var</span> regex = <span class="keyword">new</span> Regex(<span class="string">@&quot;\( \d \) &quot;</span>);</span><br><span class="line">		<span class="comment">// Step1: 蒐集符合答案pattern的Index List</span></span><br><span class="line">		<span class="keyword">foreach</span> (Match match <span class="keyword">in</span> regex.Matches(pdfContent))</span><br><span class="line">		&#123;</span><br><span class="line">			answerIndexList.Add(match.Index);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// Step2: 利用Step1產生的Index List將完整題目切割</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; answerIndexList.Count; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (i == answerIndexList.Count() - <span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				questionList.Add(pdfContent.Substring(answerIndexList[i]));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				questionList.Add(pdfContent.Substring(answerIndexList[i], answerIndexList[i + <span class="number">1</span>] - answerIndexList[i]));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> questionList;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;QuestionnaireWithOption&gt; <span class="title">GetQuestionWithOptionList</span>(<span class="params">List&lt;<span class="built_in">string</span>&gt; questionList</span>)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">var</span> questionWithOptionsList = <span class="keyword">new</span> List&lt;QuestionnaireWithOption&gt;();</span><br><span class="line">		<span class="keyword">foreach</span> (<span class="keyword">var</span> question <span class="keyword">in</span> questionList)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">var</span> questionWithOptions = <span class="keyword">new</span> QuestionnaireWithOption();</span><br><span class="line">			<span class="keyword">var</span> answer = <span class="number">0</span>;</span><br><span class="line">			Match match = Regex.Match(question, <span class="string">@&quot;\( \d \)&quot;</span>);</span><br><span class="line">			<span class="keyword">if</span> (match.Success)</span><br><span class="line">			&#123;</span><br><span class="line">				answer = <span class="built_in">int</span>.Parse(match.Value.Trim(<span class="string">&#x27;(&#x27;</span>).Trim(<span class="string">&#x27;)&#x27;</span>).Trim());</span><br><span class="line">				<span class="keyword">var</span> questionWithoutAnswer = question.Replace(match.Value, <span class="string">&quot;&quot;</span>);</span><br><span class="line">				questionWithOptions.Question = questionWithoutAnswer;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">var</span> optionIndexList = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">				<span class="keyword">var</span> optionRegex = <span class="keyword">new</span> Regex(<span class="string">@&quot;\(\d\)&quot;</span>);</span><br><span class="line">				<span class="keyword">foreach</span> (Match optionMatch <span class="keyword">in</span> optionRegex.Matches(questionWithoutAnswer))</span><br><span class="line">				&#123;</span><br><span class="line">					optionIndexList.Add(optionMatch.Index);</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; optionIndexList.Count; i++)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">var</span> optionStr = questionWithoutAnswer.Substring(optionIndexList[i]);</span><br><span class="line">					<span class="keyword">if</span> (i != optionIndexList.Count() - <span class="number">1</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						optionStr = questionWithoutAnswer.Substring(optionIndexList[i], optionIndexList[i + <span class="number">1</span>] - optionIndexList[i]);</span><br><span class="line">					&#125;</span><br><span class="line"></span><br><span class="line">					Match optionStrMatch = optionRegex.Match(optionStr);</span><br><span class="line">					<span class="keyword">if</span> (optionStrMatch.Success)</span><br><span class="line">					&#123;</span><br><span class="line">						questionWithOptions.Options.Add(<span class="keyword">new</span> QuestionOption()</span><br><span class="line">						&#123;</span><br><span class="line">							Option = optionStr.Replace(optionStrMatch.Value, <span class="string">&quot;&quot;</span>),</span><br><span class="line">							IsAnswer = answer == <span class="built_in">int</span>.Parse(optionStrMatch.Value.Trim(<span class="string">&#x27;(&#x27;</span>).Trim(<span class="string">&#x27;)&#x27;</span>))</span><br><span class="line">						&#125;);</span><br><span class="line">					&#125;</span><br><span class="line"></span><br><span class="line">					<span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						questionWithOptions.Question = questionWithOptions.Question.Substring(<span class="number">0</span>, optionIndexList[i]).Trim();</span><br><span class="line">						questionWithOptions.Question = questionWithOptions.Question.Split(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>];</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			questionWithOptionsList.Add(questionWithOptions);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> questionWithOptionsList;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中主要要理解的就是<code>答案</code>對應的<code>Regular Expresion</code>為<code>@&quot;\( \d \)&quot;</code>，<code>選項</code>對應的<code>Regular Expresion</code>為<code>@&quot;\(\d\)&quot;</code>。筆者這邊最後輸出為有結構化過的資料轉為Json字串，輸出為Json結構的檔案，以利後續開發。</p>
<h3 id="Client端使用"><a href="#Client端使用" class="headerlink" title="Client端使用"></a>Client端使用</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sourceFilePath = <span class="string">@&quot;&#123;User&#125;\Downloads\金融市場常識-109.pdf&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> targetFilePath = <span class="string">@&quot;&#123;User&#125;\Downloads\金融市場常識-109.json&quot;</span>;</span><br><span class="line">PdfHelper.Pdf2Json(<span class="keyword">new</span> FileInfo(sourceFilePath)</span><br><span class="line">, <span class="keyword">new</span> FileInfo(targetFilePath));</span><br></pre></td></tr></table></figure>

<h3 id="結果顯示"><a href="#結果顯示" class="headerlink" title="結果顯示"></a>結果顯示</h3><p>筆者這邊擷取Linqpad的輸出畫面</p>
<img src="/2021/09/03/reader-series-pdf/Untitled.png" class="" title="[PdfReaderWithAnalyzeQuestionnaire]">

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>筆者透過有趣的應用介紹pdf讀取器，花了筆者一個上午阿，希望有幫助到你，爾後有時間再來開發考古題測驗Application，屆時再發一篇了，敬請期待。</p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>reader</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore](S)FTP-ServiceResolver</title>
    <url>/2021/09/02/ftp-sftp-resolver/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>由前兩篇的議題延續下去，參考<a href="/2021/08/31/ftp-download/" title="[DotnetCore]FTP-下載上傳">[DotnetCore]FTP-下載上傳</a>、<a href="/2021/09/01/sftp-download/" title="[DotnetCore]SFTP-下載上傳">[DotnetCore]SFTP-下載上傳</a>，因為同樣都是實作<code>IFtpService</code>，同一個專案皆有使用到Ftp及SFtp則會面臨到此篇要解決的問題，該如何分辨要採用哪種實作的下載、上傳，有哪些方法可以解決，由筆者我來細說吧，主要參考 <a href="https://devkimchi.com/2020/07/01/5-ways-injecting-multiple-instances-of-same-interface-on-aspnet-core/">國外文章</a> :佛心的整理了五種不同的解決方式。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><h2 id="Collection方式"><a href="#Collection方式" class="headerlink" title="Collection方式"></a>Collection方式</h2><p>效能有憂慮，基本上是注入時直接產出多個實作實體，依照條件選取其中一個，因此會有不需要用到的實體產出，屬比較不建議的做法。這個方式需要有一個可以識別的屬性欄位，因此改造一下<code>IFtpService</code>、<code>FtpService</code>、<code>SFtpService</code>，多加一個Name屬性。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IFtpService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="comment">// 以下省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FtpService</span> : <span class="title">IFtpService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FtpService</span>(<span class="params">IFilePathService filePathService, IConfiguration config</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Name = <span class="string">&quot;F&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 以下省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="註冊Service"><a href="#註冊Service" class="headerlink" title="註冊Service"></a>註冊Service</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 以上省略</span></span><br><span class="line">    services.AddTransient&lt;IFtpService, FtpService&gt;();</span><br><span class="line">    services.AddTransient&lt;IFtpService, SFtpService&gt;();</span><br><span class="line">    <span class="comment">// 以下省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注入Service"><a href="#注入Service" class="headerlink" title="注入Service"></a>注入Service</h3><p>製作一個假的Service，主要參考注入方式即可。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IExchangeService</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">DoWork</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExchangeService</span> : <span class="title">IExchangeService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IFtpService _ftpService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExchangeService</span>(<span class="params">IEnumerable&lt;IFtpService&gt; ftpServiceCollection</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">				<span class="comment">// 使用不同的Name的值取得不一樣的實作FtpService</span></span><br><span class="line">        _ftpService = ftpServiceCollection.SingleOrDefault(x =&gt; x.Name == <span class="string">&quot;F&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoWork</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> System.NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Resolver方式"><a href="#Resolver方式" class="headerlink" title="Resolver方式"></a>Resolver方式</h2><h3 id="撰寫IFtpServiceResolver"><a href="#撰寫IFtpServiceResolver" class="headerlink" title="撰寫IFtpServiceResolver"></a>撰寫IFtpServiceResolver</h3><p>宣告<code>IFtpServiceResolver</code>並實作</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IFtpServiceResolver</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">IFtpService <span class="title">Resolve</span>(<span class="params"><span class="built_in">string</span> serviceName</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FtpServiceResolver</span> : <span class="title">IFtpServiceResolver</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IServiceProvider _provider;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FtpServiceResolver</span>(<span class="params">IServiceProvider provider</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _provider = provider;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IFtpService <span class="title">Resolve</span>(<span class="params"><span class="built_in">string</span> serviceName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> type = Assembly.GetAssembly(<span class="keyword">typeof</span>(FtpServiceResolver)).GetType(serviceName);</span><br><span class="line">        <span class="keyword">var</span> instance = <span class="keyword">this</span>._provider.GetService(type);</span><br><span class="line">        <span class="keyword">return</span> instance <span class="keyword">as</span> IFtpService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要是注入<code>IServiceProvider</code>，透過<code>Resolve</code>方法傳入的<code>ServiceName</code>，透過注入得到的<code>IServiceProvider</code>取得對應的實體並做事。</p>
<h3 id="註冊Service-1"><a href="#註冊Service-1" class="headerlink" title="註冊Service"></a>註冊Service</h3><p>註冊方式跟第一種<code>Collection</code>不太一樣，此種方式是透過<code>Resolver</code>建立實體，因此直接註冊實作Service即可。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 以上省略</span></span><br><span class="line">    services.AddTransient&lt;FtpService&gt;();</span><br><span class="line">    services.AddTransient&lt;SFtpService&gt;();</span><br><span class="line">    services.AddTransient&lt;IFtpServiceResolver, FtpServiceResolver&gt;();</span><br><span class="line">    <span class="comment">// 以下省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注入Service-1"><a href="#注入Service-1" class="headerlink" title="注入Service"></a>注入Service</h3><p>改寫<code>ExchangeService</code>，這次改注<code>IFtpServiceResolver</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExchangeService</span> : <span class="title">IExchangeService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IFtpService _ftpService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExchangeService</span>(<span class="params">IFtpServiceResolver ftpServiceResolver</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _ftpService = ftpServiceResolver.Resolve(<span class="string">&quot;FtpService&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoWork</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> System.NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Resolver-Factory-Pattern"><a href="#Resolver-Factory-Pattern" class="headerlink" title="Resolver + Factory Pattern"></a>Resolver + Factory Pattern</h2><p>筆者看了一下，基本上是跟上述Resolver是一樣的，只是將透過<code>IServiceProvider</code>取得<code>實作Service</code>改成使用<code>Activator.CreateInstance</code>的方式取得<code>實作Service</code>，基本上筆者不推薦這種，因為這樣就沒有使用到DI機制自動注入的好處，然而因為這邊負責建立實體，因此屬<code>工廠模式</code>。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FtpServiceResolver</span> : <span class="title">IFtpServiceResolver</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IFtpService <span class="title">Resolve</span>(<span class="params"><span class="built_in">string</span> serviceName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> type = Assembly.GetAssembly(<span class="keyword">typeof</span>(FtpServiceResolver)).GetType(serviceName);</span><br><span class="line">				<span class="comment">// 這裡改用Activator.CreateInstance</span></span><br><span class="line">        <span class="keyword">var</span> instance = Activator.CreateInstance(type);</span><br><span class="line">        <span class="keyword">return</span> instance <span class="keyword">as</span> IFtpService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Resolver-Delegate"><a href="#Resolver-Delegate" class="headerlink" title="Resolver + Delegate"></a>Resolver + Delegate</h2><p>筆者最喜歡這個方式，由外部決定取得<code>實作Service</code>方式，而不是寫死於<code>Resolver</code>中，由外部決定做法，因為<code>dotnet core</code>的注入宣告於<code>Startup</code>中，因此將實際做法宣告於<code>Startup</code>中。</p>
<h3 id="註冊Service-2"><a href="#註冊Service-2" class="headerlink" title="註冊Service"></a>註冊Service</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> IFtpService <span class="title">FtpServiceDelegate</span>(<span class="params"><span class="built_in">string</span> serviceName</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 以上省略</span></span><br><span class="line">    services.AddTransient&lt;FtpService&gt;();</span><br><span class="line">    services.AddTransient&lt;SFtpService&gt;();</span><br><span class="line">    <span class="comment">// 注入時才決定取得實作Service方式</span></span><br><span class="line">    services.AddTransient&lt;FtpServiceDelegate&gt;(provider =&gt; serviceName =&gt; </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> type = Assembly.GetAssembly(<span class="keyword">typeof</span>(FtpServiceResolver)).GetType(serviceName);</span><br><span class="line">        <span class="keyword">var</span> instance = provider.GetService(type);</span><br><span class="line">        <span class="keyword">return</span> instance <span class="keyword">as</span> IFtpService;</span><br><span class="line">    &#125;);</span><br><span class="line">		<span class="comment">// 以下省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注入Service-2"><a href="#注入Service-2" class="headerlink" title="注入Service"></a>注入Service</h3><p>改造一下<code>ExchangeService</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> &#123;<span class="keyword">namespace</span>&#125;.<span class="title">Startup</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExchangeService</span> : <span class="title">IExchangeService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IFtpService _ftpService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExchangeService</span>(<span class="params">FtpServiceDelegate ftpServiceDelegate</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _ftpService = ftpServiceDelegate(<span class="string">&quot;FtpService&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoWork</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> System.NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Implicit-Delegate-Lambda-Function"><a href="#Implicit-Delegate-Lambda-Function" class="headerlink" title="Implicit Delegate + Lambda Function"></a>Implicit Delegate + Lambda Function</h2><p>第五種其實就是第四種的變種，直接注入Func，於註冊時宣告取得實作Service方式，直接注入相對應的Func取得實作Service。</p>
<h3 id="註冊Service-3"><a href="#註冊Service-3" class="headerlink" title="註冊Service"></a>註冊Service</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 以上省略</span></span><br><span class="line">    services.AddTransient&lt;FtpService&gt;();</span><br><span class="line">    services.AddTransient&lt;SFtpService&gt;();</span><br><span class="line">    <span class="comment">// 注入時才決定取得實作Service方式</span></span><br><span class="line">    services.AddTransient&lt;Func&lt;<span class="built_in">string</span>, IFtpService&gt;&gt;(provider =&gt; serviceName =&gt; &#123;</span><br><span class="line">        <span class="keyword">var</span> type = Assembly.GetAssembly(<span class="keyword">typeof</span>(FtpServiceResolver)).GetType(serviceName);</span><br><span class="line">        <span class="keyword">var</span> instance = provider.GetService(type);</span><br><span class="line">        <span class="keyword">return</span> instance <span class="keyword">as</span> IFtpService;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 以下省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注入Service-3"><a href="#注入Service-3" class="headerlink" title="注入Service"></a>注入Service</h3><p>改造一下<code>ExchangeService</code>，不過筆者覺得這種直接注Func醜醜的，筆者本身不會選擇這種方式</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExchangeService</span> : <span class="title">IExchangeService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IFtpService _ftpService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExchangeService</span>(<span class="params">Func&lt;<span class="built_in">string</span>, IFtpService&gt; func</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _ftpService = func(<span class="string">&quot;FtpService&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoWork</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> System.NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>看完文章才知道有這麼多取得<code>實作Service</code>的方式，對筆者來說，開了眼界，筆者自己本身會選擇第四種作為主要使用方式，也實際應用於專案中，除了第一種<code>Collection</code>與第三種<code>FactoryPattern</code>之外，其他筆者都覺得還不錯，不過就是看各位讀者的使用情境去選擇最適合的一種即可。</p>
<p>參考</p>
<p><a href="https://devkimchi.com/2020/07/01/5-ways-injecting-multiple-instances-of-same-interface-on-aspnet-core/">https://devkimchi.com/2020/07/01/5-ways-injecting-multiple-instances-of-same-interface-on-aspnet-core/</a></p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>ftp</tag>
        <tag>sftp</tag>
        <tag>resolver</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]SFTP-下載上傳</title>
    <url>/2021/09/01/sftp-download/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者上篇介紹完<code>FTP</code>下載上傳後，另一個挑戰來了，有些系統指定使用<code>SFTP</code>協定來做交換(上傳、下載)，剛好<code>FluentFTP</code>尚未支援SFTP協定，因此要轉戰其他套件了，筆者找到一套名為<a href="http://ssh.net/">SSH.NET</a>，這篇以主要介紹透過該套件實作<code>SFTP</code>協定的下載及上傳作業。<code>IFtpService</code>則延續使用上篇的定義，這邊多了一組<code>SFtpService</code>的實作來完成任務。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><h2 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet add package SSH.NET</span><br></pre></td></tr></table></figure>

<h2 id="撰寫Service"><a href="#撰寫Service" class="headerlink" title="撰寫Service"></a>撰寫Service</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Renci.SshNet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SFtpService</span> : <span class="title">IFtpService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IFilePathService _filePathService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SFtpService</span>(<span class="params">IFilePathService filePathService</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _filePathService = filePathService;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DownloadData</span>(<span class="params">FTPConfigBaseModel downloadFtpInfo, List&lt;<span class="built_in">string</span>&gt; fileList</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> localDir = _filePathService.GetDirectoryPath(downloadFtpInfo.LocalPath);</span><br><span class="line">        <span class="keyword">var</span> remoteDir = downloadFtpInfo.RemotePath;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> password = Encoding.UTF8.GetString(Convert.FromBase64String(downloadFtpInfo.Password));</span><br><span class="line">        <span class="keyword">var</span> securePwd = PasswordExtension.SecureStringToString(</span><br><span class="line">            PasswordExtension.GetPasswordSecurity(password));</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> client = <span class="keyword">new</span> SftpClient(downloadFtpInfo.Server, downloadFtpInfo.Account, securePwd))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                client.Connect();</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> fileList)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> localPath = Path.Combine(localDir, item);</span><br><span class="line">                    <span class="keyword">var</span> remotePath = Path.Combine(remoteDir, item);</span><br><span class="line">                    <span class="keyword">using</span>(<span class="keyword">var</span> s = File.Create(localPath))</span><br><span class="line">                        client.DownloadFile(remotePath, s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception exception)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> exception;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line">                client.Disconnect();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UploadData</span>(<span class="params">FTPConfigBaseModel uploadFtpInfo, List&lt;FileUploadResponseModel&gt; fileUploadResponseModels</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Step0: Data Initial</span></span><br><span class="line">        <span class="keyword">var</span> localDir = _filePathService.GetDirectoryPath(uploadFtpInfo.LocalPath);</span><br><span class="line">        <span class="keyword">var</span> remoteDir = uploadFtpInfo.RemotePath;</span><br><span class="line">        <span class="comment">// Step1: Data Arrangement</span></span><br><span class="line">        <span class="keyword">var</span> fileGroupList = fileUploadResponseModels.GroupBy(x =&gt; x.FileName).ToList();</span><br><span class="line">        <span class="keyword">var</span> fileList = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> fileGroupList)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> fileContent = item.Select(x =&gt; x.DataStr)</span><br><span class="line">                .Aggregate((x, y) =&gt; <span class="string">$&quot;<span class="subst">&#123;x&#125;</span>\r\n<span class="subst">&#123;y&#125;</span>&quot;</span>);</span><br><span class="line">            File.WriteAllText(Path.Combine(localDir, item.Key)</span><br><span class="line">                , fileContent, Encoding.GetEncoding(item.FirstOrDefault()?.Encoding));</span><br><span class="line">            fileList.Add(item.Key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Step2: Upload Data</span></span><br><span class="line">        <span class="keyword">var</span> password = Encoding.UTF8.GetString(Convert.FromBase64String(uploadFtpInfo.Password));</span><br><span class="line">        <span class="keyword">var</span> securePwd = PasswordExtension.SecureStringToString(</span><br><span class="line">            PasswordExtension.GetPasswordSecurity(password));</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> client = <span class="keyword">new</span> SftpClient(uploadFtpInfo.Server, uploadFtpInfo.Account, securePwd))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                client.Connect();</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> fileList)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> localPath = Path.Combine(localDir, item);</span><br><span class="line">                    <span class="keyword">var</span> remotePath = Path.Combine(remoteDir, item);</span><br><span class="line">                    <span class="keyword">using</span>(<span class="keyword">var</span> stream = <span class="keyword">new</span> FileStream(localPath, FileMode.Open))</span><br><span class="line">                        client.UploadFile(stream, remotePath, <span class="literal">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception exception)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> exception;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line">                client.Disconnect();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsExist</span>(<span class="params">FTPConfigBaseModel uploadFtpInfo, <span class="built_in">string</span> filename</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> password = Encoding.UTF8.GetString(Convert.FromBase64String(uploadFtpInfo.Password));</span><br><span class="line">        <span class="keyword">var</span> securePwd = PasswordExtension.SecureStringToString(</span><br><span class="line">            PasswordExtension.GetPasswordSecurity(password));</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> client = <span class="keyword">new</span> SftpClient(uploadFtpInfo.Server, uploadFtpInfo.Account, securePwd))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                client.Connect();</span><br><span class="line">                <span class="keyword">var</span> remotePath = Path.Combine(uploadFtpInfo.RemotePath, filename);</span><br><span class="line">                <span class="keyword">return</span> client.Exists(remotePath);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception exception)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> exception;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line">                client.Disconnect();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Client端使用與Ftp那篇差不多，參考<a href="/2021/08/31/ftp-download/" title="[DotnetCore]FTP-下載上傳">[DotnetCore]FTP-下載上傳</a>即可。</p>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>透過此篇介紹，簡單實現SFTP協定的存取，留個伏筆，因為FtpService與SFtpService皆實作<code>IFtpService</code>，若同一個專案皆有兩種需求則不能只是單注入<code>IFtpService</code>，這樣無法知道存取到的是哪個實作，因此需要做一些特別處理以辨別要使用哪個實作服務，下篇就來揭曉吧。</p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>sftp</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]FTP-下載上傳</title>
    <url>/2021/08/31/ftp-download/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者所處環境為金融業，所在的科別屬寫週邊的應用系統，開發的每個系統多多少少都需要與別的系統串接，常見的有<code>核心</code>、<code>外匯</code>、<code>通路科</code>等等。如<a href="/2021/08/21/dotnetcore-socket/" title="[DotnetCore]Socket程式實作">[DotnetCore]Socket程式實作</a>那篇所提，因為通常<code>核心系統</code>環境比較特殊，相對應的串接方式，偏Socket或者交換檔案這類的傳統型居多。這篇主要以<code>FTP</code>交換檔案為主介紹其作法，筆者會再寫兩篇相關的文章，請拭目以待。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><h2 id="安裝FluentFTP套件"><a href="#安裝FluentFTP套件" class="headerlink" title="安裝FluentFTP套件"></a>安裝FluentFTP套件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet add package FluentFTP</span><br></pre></td></tr></table></figure>

<h2 id="定義相關Model"><a href="#定義相關Model" class="headerlink" title="定義相關Model"></a>定義相關Model</h2><h3 id="FTP相關Config"><a href="#FTP相關Config" class="headerlink" title="FTP相關Config"></a>FTP相關Config</h3><p>筆者這邊把ftp相關的設定定義成一個<code>ConfigModel</code>，以強型別的方式存取設定值</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FTPConfigBaseModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Server &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Account &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Password &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">// Server端的路徑</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> RemotePath &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">// 本機端的路徑</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> LocalPath &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="FTP上傳統一結構"><a href="#FTP上傳統一結構" class="headerlink" title="FTP上傳統一結構"></a>FTP上傳統一結構</h3><p>筆者這邊因為大部分上傳檔案，用意在於跟別的系統交換檔案，檔案內容由資料庫內容運算而得，筆者所在環境又屬於那種崇尚寫<code>Store Procedure</code>，因此不要讓需求太發散，索性定一個統一的結構，是回傳ftp上傳使用的資料則統一使用該資料結構</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FileUploadResponseModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 寫入檔案名稱</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FileName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">// 因為每個系統需要的編碼定義都不一樣，因此訂出這個屬性由SP決定</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Encoding &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">// 實際寫入內容，筆者這邊設定是一筆資料列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> DataStr &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="撰寫Service"><a href="#撰寫Service" class="headerlink" title="撰寫Service"></a>撰寫Service</h2><h3 id="宣告IFtpService"><a href="#宣告IFtpService" class="headerlink" title="宣告IFtpService"></a>宣告IFtpService</h3><p>筆者這邊使用<code>dotnet core</code>預設的<code>Dependency Injection</code>，就注到底了</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IFtpService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 依照檔名清單下載檔案</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;downloadFtpInfo&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;fileList&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DownloadData</span>(<span class="params">FTPConfigBaseModel downloadFtpInfo, List&lt;<span class="built_in">string</span>&gt; fileList</span>)</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 依照SP回傳的結果上傳檔案</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;uploadFtpInfo&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;fileUploadResponseModels&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">UploadData</span>(<span class="params">FTPConfigBaseModel uploadFtpInfo, List&lt;FileUploadResponseModel&gt; fileUploadResponseModels</span>)</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 檢查ftp上是否有檔案存在</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;uploadFtpInfo&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;filename&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="built_in">bool</span> <span class="title">IsExist</span>(<span class="params">FTPConfigBaseModel uploadFtpInfo, <span class="built_in">string</span> filename</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="實作FTPService"><a href="#實作FTPService" class="headerlink" title="實作FTPService"></a>實作FTPService</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FtpService</span> : <span class="title">IFtpService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILoggerManager _logger;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IFilePathService _filePathService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IConfiguration _config;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FtpService</span>(<span class="params">IFilePathService filePathService</span></span></span><br><span class="line"><span class="params"><span class="function">        , IConfiguration config, ILoggerManager logger</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _filePathService = filePathService;</span><br><span class="line">        _config = config;</span><br><span class="line">        _logger = logger;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DownloadData</span>(<span class="params">FTPConfigBaseModel downloadFtpInfo, List&lt;<span class="built_in">string</span>&gt; fileList</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> localDir = _filePathService.GetDirectoryPath(downloadFtpInfo.LocalPath);</span><br><span class="line">        <span class="keyword">var</span> remoteDir = downloadFtpInfo.RemotePath;</span><br><span class="line">        FtpClient client = <span class="keyword">new</span> FtpClient(downloadFtpInfo.Server);</span><br><span class="line">        <span class="keyword">var</span> password = Encoding.UTF8.GetString(Convert.FromBase64String(downloadFtpInfo.Password));</span><br><span class="line">        <span class="keyword">var</span> securePwd = PasswordExtension.SecureStringToString(</span><br><span class="line">            PasswordExtension.GetPasswordSecurity(password));</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            client.Credentials = <span class="keyword">new</span> NetworkCredential(downloadFtpInfo.Account, securePwd);</span><br><span class="line">            client.Connect();</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> fileList)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> localPath = Path.Combine(localDir, item);</span><br><span class="line">                <span class="keyword">var</span> remotePath = Path.Combine(remoteDir, item);</span><br><span class="line">                <span class="keyword">if</span> (client.FileExists(remotePath))</span><br><span class="line">                &#123;</span><br><span class="line">                    client.DownloadFile(localPath, remotePath);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception exception)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> exception;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span></span><br><span class="line">        &#123;</span><br><span class="line">            client.Disconnect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UploadData</span>(<span class="params">FTPConfigBaseModel uploadFtpInfo, List&lt;FileUploadResponseModel&gt; fileUploadResponseModels</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Step0: Data Initial</span></span><br><span class="line">        <span class="keyword">var</span> localDir = _filePathService.GetDirectoryPath(uploadFtpInfo.LocalPath);</span><br><span class="line">        <span class="keyword">var</span> remoteDir = uploadFtpInfo.RemotePath;</span><br><span class="line">        <span class="comment">// Step1: Data Arrangement</span></span><br><span class="line">        <span class="keyword">var</span> fileGroupList = fileUploadResponseModels.GroupBy(x =&gt; x.FileName).ToList();</span><br><span class="line">        <span class="keyword">var</span> fileList = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> fileGroupList)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> fileContent = item.Select(x =&gt; x.DataStr)</span><br><span class="line">                .Aggregate((x, y) =&gt; <span class="string">$&quot;<span class="subst">&#123;x&#125;</span>\r\n<span class="subst">&#123;y&#125;</span>&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> encoding = item.FirstOrDefault()?.Encoding;</span><br><span class="line">            File.WriteAllText(Path.Combine(localDir, item.Key)</span><br><span class="line">                , fileContent, Encoding.GetEncoding(encoding));</span><br><span class="line">            fileList.Add(item.Key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Step2: Upload Data</span></span><br><span class="line">        FtpClient client = <span class="keyword">new</span> FtpClient(uploadFtpInfo.Server);</span><br><span class="line">        <span class="keyword">var</span> password = Encoding.UTF8.GetString(Convert.FromBase64String(uploadFtpInfo.Password));</span><br><span class="line">        <span class="keyword">var</span> securePwd = PasswordExtension.SecureStringToString(</span><br><span class="line">            PasswordExtension.GetPasswordSecurity(password));</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            client.Credentials = <span class="keyword">new</span> NetworkCredential(uploadFtpInfo.Account, securePwd);</span><br><span class="line">            client.Connect();</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> fileList)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> localPath = Path.Combine(localDir, item);</span><br><span class="line">                <span class="keyword">var</span> remotePath = Path.Combine(remoteDir, item);</span><br><span class="line">                client.UploadFile(localPath, remotePath, FtpRemoteExists.Overwrite);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception exception)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> exception;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span></span><br><span class="line">        &#123;</span><br><span class="line">            client.Disconnect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsExist</span>(<span class="params">FTPConfigBaseModel uploadFtpInfo, <span class="built_in">string</span> filename</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        FtpClient client = <span class="keyword">new</span> FtpClient(uploadFtpInfo.Server);</span><br><span class="line">        <span class="keyword">var</span> password = Encoding.UTF8.GetString(Convert.FromBase64String(uploadFtpInfo.Password));</span><br><span class="line">        <span class="keyword">var</span> securePwd = PasswordExtension.SecureStringToString(</span><br><span class="line">            PasswordExtension.GetPasswordSecurity(password));</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            client.Credentials = <span class="keyword">new</span> NetworkCredential(uploadFtpInfo.Account, securePwd);</span><br><span class="line">            client.Connect();</span><br><span class="line">            <span class="keyword">var</span> remotePath = Path.Combine(uploadFtpInfo.RemotePath, filename);</span><br><span class="line">            <span class="keyword">return</span> client.FileExists(remotePath);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception exception)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> exception;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span></span><br><span class="line">        &#123;</span><br><span class="line">            client.Disconnect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中<code>IFilePathService</code>及<code>PasswordExtension</code>，筆者會再寫一篇，說來話長，筆者這邊環境需要產出源掃報告才可允許上線，源掃軟體使用<a href="https://en.wikipedia.org/wiki/Fortify_Software">Fortify</a>，只要跟System.IO.Path時需要再額外加入判斷才算安全，只要是密碼類型的需要透過<code>SecureString</code>處理過才算安全，因此筆者這邊就索性抽出<code>IFilePathService</code>及<code>PasswordExtension</code>，大家都靠這幾個共用的Service做存取伺服器內部檔案及處理密碼字串。</p>
<h2 id="Client端使用"><a href="#Client端使用" class="headerlink" title="Client端使用"></a>Client端使用</h2><h3 id="Startup-cs中宣告"><a href="#Startup-cs中宣告" class="headerlink" title="Startup.cs中宣告"></a>Startup.cs中宣告</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">services.AddTransient&lt;IFtpService, FtpService&gt;();</span><br></pre></td></tr></table></figure>

<h3 id="終端Service中引用"><a href="#終端Service中引用" class="headerlink" title="終端Service中引用"></a>終端Service中引用</h3><p>筆者這邊就不另外示範了，主要是將<code>IFtpService</code>從建構值注入就可以使用了，再則可以透過<code>IConfiguration</code>(若將ftp相關資訊設定於<code>appsettings</code>中)的方式讀取出FTP相關設定，製作成<code>FtpConfigBaseModel</code>的格式，傳進<code>IFtpService</code>中即可呼叫下載、上傳與判斷是否存在。</p>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>筆者之前工作都很少透過程式碼存取Ftp，既然這裡有存取需求，實作並記錄一下，成就感十足阿，<code>FluentFTP</code>簡單易用，果然名字上有Fluent都特別好用。</p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>fluentftp</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]Reader系列-Excel檔案</title>
    <url>/2021/08/30/excel-reader/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者這篇就延續Reader系列，這次介紹Excel檔案讀取的實作，Excel讀寫套件百百種，有名的就那幾個，<a href="https://github.com/hughbe/excel-mapper">ExcelDataReader</a>、<a href="https://github.com/nissl-lab/npoi">NPOI</a>、<a href="https://github.com/ClosedXML/ClosedXML">CloseXML</a>等等。筆者這篇主要使用ExcelDataReader上面再包一層的<a href="https://github.com/hughbe/excel-mapper">ExcelMapper</a>，主要是簡單易用，有強型別的Binding，一般讀取來說已足夠。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>筆者繼續沿用Reader系列的專案檔案，想要看建立專案的請參考<a href="/2021/08/28/reader-series-csv/" title="[DotnetCore]Reader系列-CSV檔案">[DotnetCore]Reader系列-CSV檔案</a></p>
<h2 id="安裝ExcelMapper套件"><a href="#安裝ExcelMapper套件" class="headerlink" title="安裝ExcelMapper套件"></a>安裝ExcelMapper套件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet add package ExcelDataReader.Mapping</span><br></pre></td></tr></table></figure>

<h2 id="撰寫ExcelExtension"><a href="#撰寫ExcelExtension" class="headerlink" title="撰寫ExcelExtension"></a>撰寫ExcelExtension</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ExcelExtension</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt; <span class="title">ReadData</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> filePath</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> dataList = <span class="keyword">new</span> List&lt;T&gt;();</span><br><span class="line">        <span class="keyword">using</span> <span class="keyword">var</span> stream = File.OpenRead(filePath);</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> importer = <span class="keyword">new</span> ExcelImporter(stream))</span><br><span class="line">        &#123;</span><br><span class="line">            ExcelSheet sheet = importer.ReadSheet();</span><br><span class="line">            dataList = sheet.ReadRows&lt;T&gt;().ToList();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dataList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="製作Model"><a href="#製作Model" class="headerlink" title="製作Model"></a>製作Model</h2><p>讓筆者偷懶一下，直接用ExcelMapper的github上提供的範例Model</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> EventCause</span><br><span class="line">&#123;</span><br><span class="line">    Profit,</span><br><span class="line">    Charity</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Event</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Location &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Attendance &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DateTime Date &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Uri Link &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> EventCause Cause &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="製作範例檔案"><a href="#製作範例檔案" class="headerlink" title="製作範例檔案"></a>製作範例檔案</h2><p>範例資料如下</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Location</th>
<th>Attendance</th>
<th>Date</th>
<th>Link</th>
<th>Revenue</th>
<th>Successful</th>
<th>Cause</th>
</tr>
</thead>
<tbody><tr>
<td>Pub Quiz</td>
<td>The Blue Anchor</td>
<td>20</td>
<td>18/07/2017</td>
<td><a href="http://eventbrite.com/">http://eventbrite.com</a></td>
<td>100.2</td>
<td>TRUE</td>
<td>Charity</td>
</tr>
<tr>
<td>Live Music</td>
<td>The Raven</td>
<td>15</td>
<td>17/07/2017</td>
<td><a href="http://ticketmaster.com/">http://ticketmaster.com</a></td>
<td>105.6</td>
<td>FALSE</td>
<td>Profit</td>
</tr>
<tr>
<td>Live Football</td>
<td>The Rutland Arms</td>
<td>45</td>
<td>16/07/2017</td>
<td><a href="http://facebook.com/">http://facebook.com</a></td>
<td>263.9</td>
<td>TRUE</td>
<td>Profit</td>
</tr>
</tbody></table>
<h2 id="Client端使用"><a href="#Client端使用" class="headerlink" title="Client端使用"></a>Client端使用</h2><p>筆者就在Program.cs中的main撰寫</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> _folder = AppDomain.CurrentDomain.BaseDirectory;        </span><br><span class="line">        <span class="keyword">var</span> _filePath = Path.Combine(_folder, <span class="string">&quot;Upload&quot;</span>, <span class="string">&quot;Event.xlsx&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> events = ExcelExtension.ReadData&lt;Event&gt;(_filePath);</span><br><span class="line">        System.Console.WriteLine(<span class="string">$&quot;[Events] <span class="subst">&#123;JsonConvert.SerializeObject(events)&#125;</span>&quot;</span>);</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Encoding-1252問題處裡"><a href="#Encoding-1252問題處裡" class="headerlink" title="Encoding 1252問題處裡"></a>Encoding 1252問題處裡</h3><p>筆者就以簡單的<code>dotnet run</code>來跑出結果，結果會發生以下錯誤</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet run</span><br><span class="line"><span class="comment"># Error</span></span><br><span class="line">Unhandled exception. System.NotSupportedException: No data is available <span class="keyword">for</span> encoding 1252. For information on defining a custom encoding, see the documentation <span class="keyword">for</span> the Encoding.RegisterProvider method.</span><br><span class="line">   at System.Text.Encoding.GetEncoding(Int32 codepage)</span><br><span class="line">   at ExcelDataReader.ExcelReaderConfiguration..ctor()</span><br><span class="line">   at ExcelDataReader.ExcelReaderFactory.CreateReader(Stream fileStream, ExcelReaderConfiguration configuration)</span><br><span class="line">   at ExcelMapper.ExcelImporter..ctor(Stream stream)</span><br><span class="line">   at reader.demo.console.Extensions.ExcelExtension.ReadData[T](String filePath) <span class="keyword">in</span> ExcelExtension.cs:line 14</span><br></pre></td></tr></table></figure>

<p>解決方式是，多註冊宣告一個<code>Encoding.CodePages</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);</span><br></pre></td></tr></table></figure>

<h3 id="Mapping問題"><a href="#Mapping問題" class="headerlink" title="Mapping問題"></a>Mapping問題</h3><p>接著執行<code>dotnet run</code>來跑出結果，結果會發生以下錯誤</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet run</span><br><span class="line"><span class="comment"># Error</span></span><br><span class="line">Invalid assigning <span class="string">&quot;18/07/2017&quot;</span> to member <span class="string">&quot;Date&quot;</span> of <span class="built_in">type</span> <span class="string">&quot;System.DateTime&quot;</span> <span class="keyword">in</span> column <span class="string">&quot;Date&quot;</span> on row 0 <span class="keyword">in</span> sheet <span class="string">&quot;工作表1&quot;</span>.</span><br></pre></td></tr></table></figure>

<h3 id="ClassMap宣告客製化Mapping邏輯"><a href="#ClassMap宣告客製化Mapping邏輯" class="headerlink" title="ClassMap宣告客製化Mapping邏輯"></a>ClassMap宣告客製化Mapping邏輯</h3><p>實際上是套件本身不知道將<code>18/07/2017</code>如何轉換成DateTime的值，因此這邊筆者要直接宣告<code>ClassMap</code>來避免這種問題發生</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventMap</span> : <span class="title">ExcelClassMap</span>&lt;<span class="title">Event</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">EventMap</span>()</span></span><br><span class="line">	&#123;</span><br><span class="line">		Map(e =&gt; e.Name);</span><br><span class="line">		Map(e =&gt; e.Location);</span><br><span class="line">		Map(e =&gt; e.Attendance);</span><br><span class="line">		Map(e =&gt; e.Date)</span><br><span class="line">		.WithDateFormats(<span class="string">&quot;dd/MM/yyyy&quot;</span>, <span class="string">&quot;g&quot;</span>);</span><br><span class="line">		Map(e =&gt; e.Link);</span><br><span class="line">		Map(e =&gt; e.Cause);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="擴充程式-註冊ExcelClassMap"><a href="#擴充程式-註冊ExcelClassMap" class="headerlink" title="擴充程式:註冊ExcelClassMap"></a>擴充程式:註冊ExcelClassMap</h3><p>最後要來改造一下ExcelExtension，筆者就不動原有的，再增加一個可以註冊ExcelClassMap的靜態方法</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ExcelExtension</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt; <span class="title">ReadData</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> filePath</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> dataList = <span class="keyword">new</span> List&lt;T&gt;();</span><br><span class="line">        <span class="keyword">using</span> <span class="keyword">var</span> stream = File.OpenRead(filePath);</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> importer = <span class="keyword">new</span> ExcelImporter(stream))</span><br><span class="line">        &#123;</span><br><span class="line">            ExcelSheet sheet = importer.ReadSheet();</span><br><span class="line">            dataList = sheet.ReadRows&lt;T&gt;().ToList();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dataList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">		 <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt; <span class="title">ReadData</span>&lt;<span class="title">T</span>, <span class="title">TMap</span>&gt;(<span class="params"><span class="built_in">string</span> filePath</span>)</span></span><br><span class="line"><span class="function">			<span class="comment">// 這一個限制很重要，這樣宣告RegisterClassMap才可以編譯過</span></span></span><br><span class="line"><span class="function">			<span class="keyword">where</span> TMap: ExcelClassMap&lt;T&gt;, <span class="keyword">new</span>()</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> dataList = <span class="keyword">new</span> List&lt;T&gt;();</span><br><span class="line">        <span class="keyword">using</span> <span class="keyword">var</span> stream = File.OpenRead(filePath);</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> importer = <span class="keyword">new</span> ExcelImporter(stream))</span><br><span class="line">        &#123;</span><br><span class="line">            importer.Configuration.RegisterClassMap&lt;TMap&gt;();</span><br><span class="line">            ExcelSheet sheet = importer.ReadSheet();</span><br><span class="line">            dataList = sheet.ReadRows&lt;T&gt;().ToList();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dataList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行地方換成使用<code>ExcelClassMap</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> _folder = AppDomain.CurrentDomain.BaseDirectory;        </span><br><span class="line">        <span class="keyword">var</span> _filePath = Path.Combine(_folder, <span class="string">&quot;Upload&quot;</span>, <span class="string">&quot;Event.xlsx&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> events = ExcelExtension.ReadData&lt;Event, EventMap&gt;(_filePath);</span><br><span class="line">        System.Console.WriteLine(<span class="string">$&quot;[Events] <span class="subst">&#123;JsonConvert.SerializeObject(events)&#125;</span>&quot;</span>);</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最後成功執行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet run</span><br><span class="line"><span class="comment"># 執行結果</span></span><br><span class="line">[Events] [&#123;<span class="string">&quot;Name&quot;</span>:<span class="string">&quot;Pub Quiz&quot;</span>,<span class="string">&quot;Location&quot;</span>:<span class="string">&quot;The Blue Anchor&quot;</span>,<span class="string">&quot;Attendance&quot;</span>:20,<span class="string">&quot;Date&quot;</span>:<span class="string">&quot;2017-07-18T00:00:00&quot;</span>,<span class="string">&quot;Link&quot;</span>:<span class="string">&quot;http://eventbrite.com&quot;</span>,<span class="string">&quot;Cause&quot;</span>:1&#125;,&#123;<span class="string">&quot;Name&quot;</span>:<span class="string">&quot;Live Music&quot;</span>,<span class="string">&quot;Location&quot;</span>:<span class="string">&quot;The Raven&quot;</span>,<span class="string">&quot;Attendance&quot;</span>:15,<span class="string">&quot;Date&quot;</span>:<span class="string">&quot;2017-07-17T00:00:00&quot;</span>,<span class="string">&quot;Link&quot;</span>:<span class="string">&quot;http://ticketmaster.com&quot;</span>,<span class="string">&quot;Cause&quot;</span>:0&#125;,&#123;<span class="string">&quot;Name&quot;</span>:<span class="string">&quot;Live Football&quot;</span>,<span class="string">&quot;Location&quot;</span>:<span class="string">&quot;The Rutland Arms&quot;</span>,<span class="string">&quot;Attendance&quot;</span>:45,<span class="string">&quot;Date&quot;</span>:<span class="string">&quot;2017-07-16T00:00:00&quot;</span>,<span class="string">&quot;Link&quot;</span>:<span class="string">&quot;http://facebook.com&quot;</span>,<span class="string">&quot;Cause&quot;</span>:0&#125;]</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>這篇就以<code>ExcelMapper</code>為主，再找篇來寫<code>ExcelDataReader</code>的讀取方式吧，不過有強型別就大大降低存取方式的困難度，有Intellisense就是寫的快速又安全。</p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>reader</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>excel</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]Exception攔截神器-Elmah</title>
    <url>/2021/08/29/exception-elmah/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>我們撰寫程式後，追縱執行狀況或Error會使用logging完成，基本上筆者平常使用<code>Nlog</code>來追縱執行狀況。基本上依照Log Level來區分是否使用文字檔案或資料庫形式來存放。最近遇到的情況是因為筆者目前在金融業就職，因有主管機關單位在管理，進而系統上線有一套標準，基本上開發單位不得接觸正式資料庫，文字檔案則需要申請後才能進入正式環境觀看，使得追縱實際問題，變得困難。這時候，曙光出現了：</p>
<p><a href="https://elmah.github.io/">ELMAH-Home</a></p>
<p>官方並沒有升級到<code>dotnet core</code>版本，還好強者貢獻<code>dotnet core</code>版本，參考</p>
<p><a href="https://github.com/ElmahCore/ElmahCore">ElmahCore/ElmahCore</a></p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><h2 id="建立demo-API專案"><a href="#建立demo-API專案" class="headerlink" title="建立demo API專案"></a>建立demo API專案</h2><p>筆者就用<code>dotnet</code>指令來建立API專案</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ElmahDemo</span><br><span class="line"><span class="built_in">cd</span> ElmahDemo</span><br><span class="line">dotnet new webapi -n ElmahDemo.API</span><br><span class="line">dotnet new sln -n ElmahDemo</span><br><span class="line">dotnet sln ElmahDemo.sln add ElmahDemo.API\ElmahDemo.API.csproj</span><br></pre></td></tr></table></figure>

<h2 id="安裝Nuget套件"><a href="#安裝Nuget套件" class="headerlink" title="安裝Nuget套件"></a>安裝Nuget套件</h2><p>使用<code>Visual Studio 2019</code>開啟<code>sln</code>檔案，接著安裝<code>nuget</code>套件，筆者這邊會採用<code>SqlServer</code>來當作Persistent選擇，必須安裝兩個套件，如下：</p>
<ul>
<li>ElmahCore</li>
<li>ElmahCore.Sql</li>
</ul>
<h2 id="Startup中設定使用Elmah"><a href="#Startup中設定使用Elmah" class="headerlink" title="Startup中設定使用Elmah"></a>Startup中設定使用Elmah</h2><p><code>appsettings.Development.json</code> 中設定資料庫連線字串</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;ConnectionStrings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Elmah&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Data Source=.;Initial Catalog=ElmahDemo;Persist Security Info=True;Integrated Security=True;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>建立資料表語法參考</p>
<p><a href="https://bitbucket.org/project-elmah/main/downloads/ELMAH-1.2-db-SQLServer.sql"></a></p>
<p>接著開始在<code>Startup.cs</code>中宣告設定及使用<code>Elmah</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ConfigureServices</span></span><br><span class="line">services.AddElmah&lt;SqlErrorLog&gt;(opt =&gt;</span><br><span class="line">&#123;</span><br><span class="line">	opt.ConnectionString = Configuration.GetConnectionString(<span class="string">&quot;Elmah&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 需要設定以下步驟，Elmah的版面才正常</span></span><br><span class="line"><span class="comment">// 參考 https://github.com/ElmahCore/ElmahCore/issues/47</span></span><br><span class="line">services.Configure&lt;IISServerOptions&gt;(options =&gt; </span><br><span class="line">&#123; </span><br><span class="line">	options.AllowSynchronousIO = <span class="literal">true</span>; </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Configure</span></span><br><span class="line">app.UseElmah();</span><br></pre></td></tr></table></figure>

<h2 id="觀看結果"><a href="#觀看結果" class="headerlink" title="觀看結果"></a>觀看結果</h2><p>首先筆者這邊模擬丟出<code>Exception</code>，撰寫一個<code>DemoController</code>並主動丟一個<code>Exception</code>出來</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">using Microsoft.AspNetCore.Mvc;</span><br><span class="line">using System;</span><br><span class="line"></span><br><span class="line">namespace ElmahDemo.API.Controllers</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="punctuation">[</span>Route(<span class="string">&quot;api/[controller]&quot;</span>)<span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">[</span>ApiController<span class="punctuation">]</span></span><br><span class="line">    public class DemoController <span class="punctuation">:</span> ControllerBase</span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="punctuation">[</span>HttpGet(<span class="string">&quot;elmah&quot;</span>)<span class="punctuation">]</span></span><br><span class="line">        public IActionResult Elmah()</span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            throw new Exception();</span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>因為設計成<code>get</code>，只要在瀏覽器上面 <a href="https://localhost:44330/api/demo/elmah">https://localhost:44330/api/demo/elmah</a> ，即可產生<code>Exception</code>。接著看結果，連上elmah頁面 <a href="https://localhost:44330/elmah">https://localhost:44330/elmah</a></p>
<img src="/2021/08/29/exception-elmah/Untitled.png" class="" title="[ElmahDashboard]">

<img src="/2021/08/29/exception-elmah/Untitled1.png" class="" title="[ElmahDashboardDetail]">

<p>看到清楚的Exception敘述，解bug所向無敵了。</p>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>基本上Log套件有百百種，以圖形化介面瀏覽log，就屬<code>elmah</code>了。當然筆者也要在這裡埋一下伏筆，若有諸多個伺服器上運行著各式各樣的應用程式，Log蒐集是一門學問，若以者種圖形化介面的<code>elmah</code>，需要看各種應用程式的log則必須得切換到不同的域名中觀看，文字Log就更不用說了，需要登入到所屬伺服器及應用程式資料夾中觀看，會發現查Log會是一個多麼麻煩的事，若能有一個集中地方觀看各式各樣應用程式的Log會是一個很好的體驗，筆者會再來寫一篇關於集中log的文章，敬請期待。</p>
<p>參考</p>
<p><a href="https://github.com/ElmahCore/ElmahCore">https://github.com/ElmahCore/ElmahCore</a></p>
<p><a href="https://github.com/ElmahCore/ElmahCore/issues/47">https://github.com/ElmahCore/ElmahCore/issues/47</a></p>
<p><a href="https://blog.developer.money/it-%E9%90%B5%E4%BA%BA%E8%B3%BD-asp-net-core-%E8%88%87-log-%E7%B4%80%E9%8C%84%E5%92%8C%E8%BF%BD%E8%B9%A4%E7%9A%84%E6%84%9B%E6%81%A8%E4%BA%A4%E7%B9%94-day-05-elmah-02-42e9b8810419">https://blog.developer.money/it-鐵人賽-asp-net-core-與-log-紀錄和追蹤的愛恨交織-day-05-elmah-02-42e9b8810419</a></p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>exception</tag>
        <tag>elmah</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]Reader系列-CSV檔案</title>
    <url>/2021/08/28/reader-series-csv/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者在公司擔任R&amp;D角色一陣子，主要是幫忙製作底層框架，制定分層結構，規範coding style，或者幫忙撰寫底層套件，底層套件部份，大部分都是不同格式的檔案讀取以及寫入；包含<code>CSV</code>檔案，<code>Excel</code>檔案，<code>pdf</code>檔案等主流的，讓筆者有靈感要來寫一下Reader系列，示範一下各式各樣的格式的讀取及寫入吧，這篇就以介紹CSV檔案格式為主。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>安裝所需套件，筆者這邊使用<a href="https://joshclose.github.io/CsvHelper/">CsvHelper</a>這個套件，跟著筆者一步步實作吧。</p>
<h2 id="Demo專案建置"><a href="#Demo專案建置" class="headerlink" title="Demo專案建置"></a>Demo專案建置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建立資料夾</span></span><br><span class="line"><span class="built_in">mkdir</span> reader.demo</span><br><span class="line"><span class="comment"># 進入資料夾</span></span><br><span class="line"><span class="built_in">cd</span> reader.demo</span><br><span class="line"><span class="comment"># 建立console專案</span></span><br><span class="line">dotnet new console -n reader.demo.console</span><br><span class="line"><span class="comment"># 進入console專案</span></span><br><span class="line"><span class="built_in">cd</span> reader.demo.console</span><br></pre></td></tr></table></figure>

<h2 id="安裝CsvHelper"><a href="#安裝CsvHelper" class="headerlink" title="安裝CsvHelper"></a>安裝CsvHelper</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安裝CsvHelper套件</span></span><br><span class="line">dotnet add package CsvHelper</span><br><span class="line"><span class="comment"># 專案使用vscode打開</span></span><br><span class="line">code .</span><br></pre></td></tr></table></figure>

<h2 id="撰寫CsvExtension"><a href="#撰寫CsvExtension" class="headerlink" title="撰寫CsvExtension"></a>撰寫CsvExtension</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">CsvExtension</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt; <span class="title">ReadData</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> filePath</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(filePath))</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader, CultureInfo.InvariantCulture))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> records = csv.GetRecords&lt;T&gt;();</span><br><span class="line">            <span class="keyword">return</span> records.ToList();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="準備CSV格式檔案"><a href="#準備CSV格式檔案" class="headerlink" title="準備CSV格式檔案"></a>準備CSV格式檔案</h2><p>使用命令列方式建立csv檔案</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> Upload</span><br><span class="line"><span class="built_in">cd</span> Upload</span><br><span class="line"><span class="built_in">touch</span> Customer.csv</span><br></pre></td></tr></table></figure>

<p>輸入內容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">顧客ID,顧客信箱</span><br><span class="line">1,abc@gmail.com</span><br><span class="line">2,bcd@gmail.com</span><br><span class="line">3,cde@gmail.com</span><br></pre></td></tr></table></figure>

<p>筆者這邊將該Customer.csv檔案當作範本讀入，因此需要將該檔案輸出至編譯檔案中，<code>Visual Studio</code>中則使用<code>Properties</code>視窗中的<code>Copy選項</code>「<code>Always</code>」即可搞定，若使用Visual Studio Code的朋友，可能就沒有地方可以用工具選擇的方式選擇，必須編輯<code>csproj</code>檔案才有辦法。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">&lt;ItemGroup&gt;</span><br><span class="line">  &lt;Content Include=<span class="string">&quot;Upload/*&quot;</span>&gt;</span><br><span class="line">    &lt;CopyToOutputDirectory&gt;Always&lt;/CopyToOutputDirectory&gt;</span><br><span class="line">  &lt;/Content&gt;</span><br><span class="line">&lt;/ItemGroup&gt;</span><br></pre></td></tr></table></figure>

<p>這邊是定義<code>Upload</code>資料夾下的所有檔案<code>Copy</code>選項定義為<code>Always</code>，即可搞定。</p>
<h2 id="定義Model"><a href="#定義Model" class="headerlink" title="定義Model"></a>定義Model</h2><p>接著定義csv檔案對應的class</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Customer</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Name(<span class="string">&quot;顧客ID&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">long</span> CustomerId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    [<span class="meta">Name(<span class="string">&quot;顧客信箱&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CustomerEmail &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到筆者這邊有定義<code>Name Attribute</code>，CSV官網就有提到他使用<code>property</code>屬性的順序，但通常<code>property</code>屬性的順序是不可靠的，建議使用Index或者Name Attribute做定義，才不會亂了秩序。</p>
<h2 id="Client端使用"><a href="#Client端使用" class="headerlink" title="Client端使用"></a>Client端使用</h2><p>筆者以簡易的方式示範讀取CSV檔案，因為先前建立的是Console專案，直接於<code>Program.cs</code>的<code>main</code>中撰寫</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 定義執行檔案路徑</span></span><br><span class="line">        <span class="keyword">var</span> _folder = AppDomain.CurrentDomain.BaseDirectory;</span><br><span class="line">				<span class="comment">// 使用Path.Combine將csv檔案路徑串起來</span></span><br><span class="line">        <span class="keyword">var</span> _filePath = Path.Combine(_folder, <span class="string">&quot;Upload&quot;</span>, <span class="string">&quot;Customer.csv&quot;</span>);</span><br><span class="line">				<span class="comment">// 使用CsvExtension中的ReadData讀取csv檔案，路徑則串入上面製作的file path</span></span><br><span class="line">        <span class="keyword">var</span> customers = CsvExtension.ReadData&lt;Customer&gt;(_filePath);</span><br><span class="line">        <span class="comment">// 使用Newtonsoft.Json套件序列化變成字串印出</span></span><br><span class="line">        System.Console.WriteLine(<span class="string">$&quot;[Customers] <span class="subst">&#123;JsonConvert.SerializeObject(customers)&#125;</span>&quot;</span>);</span><br><span class="line">        <span class="comment">// 讓終端機停住，看一下上面印出的結果</span></span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>來吧，簡單的使用<code>dotnet run</code>指令來執行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet run</span><br><span class="line"><span class="comment"># output</span></span><br><span class="line">[Customers] [&#123;<span class="string">&quot;CustomerId&quot;</span>:1,<span class="string">&quot;CustomerEmail&quot;</span>:<span class="string">&quot;abc@gmail.com&quot;</span>&#125;,&#123;<span class="string">&quot;CustomerId&quot;</span>:2,<span class="string">&quot;CustomerEmail&quot;</span>:<span class="string">&quot;bcd@gmail.com&quot;</span>&#125;,&#123;<span class="string">&quot;CustomerId&quot;</span>:3,<span class="string">&quot;CustomerEmail&quot;</span>:<span class="string">&quot;cde@gmail.com&quot;</span>&#125;]</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>讀完這篇是不是也覺得讀取csv檔案是不是非常簡單，不過老實說要自己寫出這個讀取器也並不難，但是可能需要一段時間校正，若需求本身沒有太多客製化的需求，筆者會選擇不重新造輪子，直接用現成的套件來達成，看專案開發狀況及使用情境了，沒有絕對的好與壞，用得開心，結得了案，基本上都是好事。</p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>reader</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>csv</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]排程神器-Hangfire:進階篇1</title>
    <url>/2021/08/27/hangfire-advanced1/</url>
    <content><![CDATA[<img src="/2021/08/27/hangfire-advanced1/Untitled.png" class="" title="[HangfireDashboard]">

<span id="more"></span>

<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>上一篇講完<a href="https://www.hangfire.io/">Hangfire</a>的簡單應用，這篇要來講解改造<code>Dashboard</code>的經驗，筆者公司專案，因為大系統，筆者把各個功能區塊分隔為各自專案，<code>API站台</code>及<code>Scheduler</code>等專案，對於<code>Hangfire</code>所屬的<code>Scheduler</code>站台的<code>Dashboard</code>的<code>Authentication</code>會變得困難，筆者的想法是乾脆就不要打開<code>Dashboard</code>或者是<code>Dashboard</code>本機瀏覽即可，然後於<code>API</code>站台對應的<code>前台(Angular站台)</code>中建立一個客製化的<code>Hangfire Dashboard</code>。<code>API站台</code>收到需求後轉發<code>Request</code>至Scheduler站台並實作<code>Hangfire Dashboard</code>相關API。</p>
<p>設計在前台有幾個好處:</p>
<ul>
<li>權限由原有權限去控</li>
<li>開放手動觸發，可以記錄是哪位使用者執行</li>
<li>更直觀的介面</li>
<li>CronExpression使用第三方套件轉成一般文字化的方式呈現</li>
</ul>
<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>先來實作<code>Hangfire Dashboard</code>的<code>Scheduler API</code>吧</p>
<h2 id="Scheduler專案改造"><a href="#Scheduler專案改造" class="headerlink" title="Scheduler專案改造"></a>Scheduler專案改造</h2><h3 id="安裝CronExpression翻譯套件"><a href="#安裝CronExpression翻譯套件" class="headerlink" title="安裝CronExpression翻譯套件"></a>安裝CronExpression翻譯套件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet add package CronExpressionDescriptor</span><br></pre></td></tr></table></figure>

<h3 id="定義RecurringJob的ResponseModel"><a href="#定義RecurringJob的ResponseModel" class="headerlink" title="定義RecurringJob的ResponseModel"></a>定義RecurringJob的ResponseModel</h3><p>基本上<code>RecurringJob</code>對應的Model滿複雜的，筆者這邊另外訂了一個，只宣告前端頁面需顯示的屬性</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JobInfoResponseModel</span></span><br><span class="line">&#123;</span><br><span class="line">		<span class="comment">// JobId</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">		<span class="comment">// Job最後執行狀態(Succeeded、Failed、Processing及空白)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> LastJobState &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">		<span class="comment">// Job最後執行時間(UTC時間)</span></span><br><span class="line">    <span class="keyword">public</span> DateTime? LastExecution &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">		<span class="comment">// Job最後執行時間(轉成Local-Taiwan時間)</span></span><br><span class="line">    <span class="keyword">public</span> DateTime? LastExecutionLocalTime</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> LastExecution?.ToLocalTime();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">		<span class="comment">// Job下次執行時間(UTC時間)</span></span><br><span class="line">    <span class="keyword">public</span> DateTime? NextExecution &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">		<span class="comment">// Job下次執行時間(轉成Local-Taiwan時間)</span></span><br><span class="line">    <span class="keyword">public</span> DateTime? NextExecutionLocalTime</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> NextExecution?.ToLocalTime();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">		<span class="comment">// Job對應的Cron時間</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Cron &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">		<span class="comment">// Job對應的Cron時間翻譯內容</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CronDescription</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> cronParser = <span class="keyword">new</span> CronExpressionDescriptor.ExpressionParser(Cron, <span class="keyword">new</span> Options()</span><br><span class="line">            &#123;</span><br><span class="line">                Locale = <span class="string">&quot; zh-Hant&quot;</span></span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">								<span class="comment">// 以防萬一翻譯錯誤，則不翻譯</span></span><br><span class="line">                cronParser.Parse();</span><br><span class="line">                <span class="keyword">return</span> CronExpressionDescriptor.ExpressionDescriptor.GetDescription(Cron);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (FormatException ex)</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> Cron;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="撰寫取得Hangfire的RecurringJobsAction"><a href="#撰寫取得Hangfire的RecurringJobsAction" class="headerlink" title="撰寫取得Hangfire的RecurringJobsAction"></a>撰寫取得Hangfire的RecurringJobsAction</h3><p>接下來於<code>Scheduler</code>站台中寫一個<code>Action</code>，讓<code>API</code>站台呼叫，取得<code>Hangfire Recurring Jobs</code>資訊</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SchedulerInfoController</span> : <span class="title">SchedulerBaseController</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IConfiguration _config;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _connStr;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> SqlConnectionFactory _factory;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SchedulerInfoController</span>(<span class="params">IConfiguration config, SqlConnectionFactory factory</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _config = config;</span><br><span class="line">        _connStr = Encoding.UTF8.GetString(Convert.FromBase64String(config.GetConnectionString(<span class="string">&quot;Hangfire&quot;</span>)));</span><br><span class="line">        _factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 列出RecurringJobs</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    [<span class="meta">HttpPost(<span class="string">&quot;jobs&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetSchedulerJobs</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="keyword">new</span> List&lt;JobInfoResponseModel&gt;();</span><br><span class="line">        <span class="keyword">var</span> jobStorage = <span class="keyword">new</span> SqlServerStorage(_connStr);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> StorageConnectionExtensions.GetRecurringJobs(jobStorage.GetConnection()))</span><br><span class="line">        &#123;</span><br><span class="line">            result.Add(<span class="keyword">new</span> JobInfoResponseModel()</span><br><span class="line">            &#123;</span><br><span class="line">                Id = item.Id,</span><br><span class="line">                LastJobState = item.LastJobState,</span><br><span class="line">                LastExecution = item.LastExecution,</span><br><span class="line">                NextExecution = item.NextExecution,</span><br><span class="line">                Cron = item.Cron</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;      </span><br><span class="line">        <span class="keyword">return</span> Ok(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 立刻執行Job</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;jobId&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    [<span class="meta">HttpPost(<span class="string">&quot;execute&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">ExecuteJob</span>(<span class="params">JobInfoRequestModel jobInfo</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">				<span class="comment">// <span class="doctag">TODO:</span> 設計資料表紀錄某登入者於某個時間點執行某個Job</span></span><br><span class="line">        <span class="keyword">var</span> jobStorage = <span class="keyword">new</span> SqlServerStorage(_connStr);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> StorageConnectionExtensions.GetRecurringJobs(jobStorage.GetConnection()))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(item.Id == jobInfo.Id)</span><br><span class="line">            &#123;</span><br><span class="line">                RecurringJob.Trigger(item.Id);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Ok(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="API站台專案"><a href="#API站台專案" class="headerlink" title="API站台專案"></a>API站台專案</h2><p>筆者因主要排程使用Hangfire完成，且獨立為一個專案，API站台以這個需求，筆者需要一個定時Job去取得Hangfire的RecurringJobs資訊，並透過SingalR更新至前端，因此API站台中定時排程需求就使用短小精幹的Coravel來完成</p>
<h3 id="撰寫SchedulerPageJob"><a href="#撰寫SchedulerPageJob" class="headerlink" title="撰寫SchedulerPageJob"></a>撰寫SchedulerPageJob</h3><p>因透過Coravel執行，實作IInvocable</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SchedulerPageJob</span> : <span class="title">IInvocable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> HttpClient _client;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IHubContext&lt;NoticeHub&gt; _hubContext;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SchedulerPageJob</span>(<span class="params">HttpClient client, IHubContext&lt;NoticeHub&gt; hubContext</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _client = client;</span><br><span class="line">        _hubContext = hubContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Task <span class="title">Invoke</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Step1: Call Scheduler API</span></span><br><span class="line">        <span class="keyword">var</span> result = _client.GetResponse&lt;<span class="built_in">string</span>, MyTokenResult, List&lt;JobInfoResponseModel&gt;&gt;(</span><br><span class="line">                <span class="string">&quot;&quot;</span>, HttpAction.Post, <span class="string">&quot;api/schedulerinfo/jobs&quot;</span>, HttpStatusCode.OK</span><br><span class="line">                , <span class="keyword">out</span> <span class="keyword">var</span> rtnErrorCode, <span class="keyword">out</span> <span class="keyword">var</span> response, tokenNeeded: <span class="literal">false</span></span><br><span class="line">                , mediaType: <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (rtnErrorCode == HttpStatusCode.OK)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Step2: Broadcast Result</span></span><br><span class="line">            _hubContext.Clients.All.SendAsync(<span class="string">&quot;SchedulerInfosResult&quot;</span></span><br><span class="line">                , JsonConvert.SerializeObject(result));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中可以看到<code>_client</code>為筆者自己寫的<code>HttpClientExtension</code>，可以忽略它，筆者再為它寫一篇吧，該段就是透過<code>HttpClient</code>與<code>Scheduler站台中的API</code>取得資訊，<code>_hubContext</code>則筆者在API站台中建立的<code>SingalR Hub</code>，透過<code>Clients.All.SendAsync</code>的方式Broadcast出去。</p>
<h3 id="Startup-cs中設定定時器"><a href="#Startup-cs中設定定時器" class="headerlink" title="Startup.cs中設定定時器"></a>Startup.cs中設定定時器</h3><p>最後於Startup中透過Coravel的設定，讓取得RecurringJobs資訊定時執行</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 以上省略</span></span><br><span class="line">    services.AddScheduler();</span><br><span class="line">    <span class="comment">// 以下省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 以上省略</span></span><br><span class="line">     app.ApplicationServices.UseScheduler(scheduler =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 筆者這邊設定每15秒執行一次</span></span><br><span class="line">            scheduler.Schedule&lt;SchedulerPageJob&gt;().EveryFifteenSeconds();</span><br><span class="line">        &#125;).OnError((ex) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            _logger.Error(<span class="string">$&quot;[Coravel:Job] <span class="subst">&#123;ex&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="comment">// 以下省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="前端專案"><a href="#前端專案" class="headerlink" title="前端專案"></a>前端專案</h2><p>筆者這邊是使用<code>angular</code>開發其前端頁面，因為主要這個呈現方式看個人，筆者就不在另外貼<code>angular</code>相關程式碼，筆者公司有買版型，因此算美觀了，主要概念是依照<code>LastJobState</code>，<code>CardHeader</code>的顏色有所不一樣</p>
<ul>
<li>Succeded:藍色底</li>
<li>Failed:紅色底</li>
<li>Processing:黃色底</li>
<li>空白則白色底</li>
</ul>
<p>再加上若有<code>Failed</code>時使用相關<code>Toast</code>套件於右上角浮出，藉由達到提醒效果。</p>
<img src="/2021/08/27/hangfire-advanced1/SchedulerPage.png" class="" title="[CustomizeHangfireDashboard]">

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>透過改造Dashboard，筆者有機會看<code>Hangfire</code>的原始碼，因為<code>Document</code>實在是太難看，也沒辦法用<code>F12</code>追看程式碼相關性，索性就直接下載原始碼來觀看一下，才知道說那些物件有甚麼屬性，關聯是甚麼，才最終以完美呈現算美觀的客製化<code>Dashboard</code>，加上<code>CronExpression</code>的翻譯套件，整個完美。</p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>hangfire</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>hangfire</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]排程神器-Hangfire:入門篇</title>
    <url>/2021/08/27/hangfire-entry/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者在上篇已介紹<code>Coravel</code>短小精幹的排程利器，固定週期排程部份皆使用<code>Coravel</code>套件完成，然而使用者需求越來越清楚的狀況下，意識到無法滿足所以使用者需求，事情是這樣的，使用者的某些作業需要從畫面操作，並將該項作業排進排程中，且是一次性作業，例如：使用者透過介面去設定日結作業的需求，我們會由介面呼叫API，於API中設定好某個時間點去執行該「日結作業」服務。</p>
<p>以上述的需求，在Coravel套件是無法做到的，Coravel是有Queue的機制，不過無法設定特定時間，筆者最近是時不時看<a href="https://github.com/MoienTajik/AspNetCore-Developer-Roadmap">Asp.Net Core RoadMap</a>上所列之相關技術及推薦套件，對於上面推薦的套件，都會想要來試看看，畢竟大神們整理過的，肯定有其厲害之處，剛好於Task Scheduling作業中有推薦三套相關套件，筆者已經使用過Coravel，試試看其他，廢話不多說，趕緊來介紹今天的主角<code>HangFire</code>吧。</p>
<span id="more"></span>

<p>筆者開發環境及語言版本使用如下：</p>
<ul>
<li>Visual Studio 2019</li>
<li>.net core 3.1</li>
<li>Web API專案</li>
</ul>
<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><h2 id="建立WebAPI專案"><a href="#建立WebAPI專案" class="headerlink" title="建立WebAPI專案"></a>建立WebAPI專案</h2><p>筆者這邊省略這個步驟，提供以下語法，也可以使用Visual Studio來建立專案</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> HangFireDemo</span><br><span class="line">dotnet new webapi -n HangFireDemo.API</span><br><span class="line">dotnet new sln -n HangFireDemo</span><br><span class="line">dotnet sln HangFireDemo.lsn add .\HangFireDemo.Api\HangFireDemo.API.csproj</span><br></pre></td></tr></table></figure>

<h2 id="初始化及引用"><a href="#初始化及引用" class="headerlink" title="初始化及引用"></a>初始化及引用</h2><p>使用HangFire服務，要加三個nuget套件，分別為</p>
<ul>
<li>Hangfire.Core</li>
<li>Hangfire.AspNetCore</li>
<li>Hangfire.SqlServer</li>
</ul>
<p>以上套件中，<code>Hangfire.Core</code>、<code>Hangfire.AspNetCore</code>為必要套件，接著依照自己的<code>Persistent</code>需求，可以選擇安裝SqlServer、Redis、PostgreSQL、MongoDb及其他，筆者這邊選擇<code>SqlServer</code>這個選項，因此會需要多安裝一個<code>Hangfire.SqlServer</code></p>
<p>安裝完成後於<code>Startup</code>做初始化的動作，筆者這邊直接使用官網的<code>AspNetCore Applications</code>範例程式，有包含<code>DashBoard</code>功能。因要使用<code>Sql Server</code>當作persistent媒介，因此需先建立一個空的DB，必且於<code>appsettings</code>中設定連線字串。</p>
<blockquote>
<p>基本上不需要事先建立相關資料表，<code>HangFire</code>在第一次啟動時會自動建立，但必須要知道公司的資料庫政策，筆者在公司環境時，必須要事先建好資料庫，因為application無法有<code>create table</code>的權限，只有<code>read/write</code>權限，因此提醒讀者要考量一下實際執行環境</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 本機DB，資料庫名稱為HangfireTest(依照自己命名改成自己建立的DB名稱)</span></span><br><span class="line"><span class="attr">&quot;ConnectionStrings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;HangfireConnection&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Server=.;Initial Catalog=HangfireTest;Database=HangfireTest;Trusted_Connection=True;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="ConfigureServices"><a href="#ConfigureServices" class="headerlink" title="ConfigureServices"></a>ConfigureServices</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Add Hangfire services.</span></span><br><span class="line">services.AddHangfire(configuration =&gt; configuration</span><br><span class="line">  .SetDataCompatibilityLevel(CompatibilityLevel.Version_170)</span><br><span class="line">  .UseSimpleAssemblyNameTypeSerializer()</span><br><span class="line">  .UseRecommendedSerializerSettings()</span><br><span class="line">  .UseSqlServerStorage(Configuration.GetConnectionString(<span class="string">&quot;HangfireConnection&quot;</span>), <span class="keyword">new</span> SqlServerStorageOptions &#123;</span><br><span class="line">      CommandBatchMaxTimeout = TimeSpan.FromMinutes(<span class="number">5</span>),</span><br><span class="line">      SlidingInvisibilityTimeout = TimeSpan.FromMinutes(<span class="number">5</span>),</span><br><span class="line">      QueuePollInterval = TimeSpan.Zero,</span><br><span class="line">      UseRecommendedIsolationLevel = <span class="literal">true</span>,</span><br><span class="line">      UsePageLocksOnDequeue = <span class="literal">true</span>,</span><br><span class="line">      DisableGlobalLocks = <span class="literal">true</span></span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add the processing server as IHostedService</span></span><br><span class="line">services.AddHangfireServer();</span><br></pre></td></tr></table></figure>

<h3 id="Configure"><a href="#Configure" class="headerlink" title="Configure"></a>Configure</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用Dashboard功能</span></span><br><span class="line">app.UseHangfireDashboard();</span><br></pre></td></tr></table></figure>

<h2 id="Hangfire任務介紹及實作"><a href="#Hangfire任務介紹及實作" class="headerlink" title="Hangfire任務介紹及實作"></a>Hangfire任務介紹及實作</h2><p>Hangfire的任務，可以分成以下三種類型：</p>
<ul>
<li>一次性的任務</li>
<li>延遲性任務，設定特定時間執行</li>
<li>週期性任務</li>
</ul>
<p>筆者針對這三種類型使用一個<code>Controller</code>來示範，為了示範可以使用注入的服務，宣告一個<code>IJobService</code>及其方法<code>Execute</code>，再者宣告一個<code>JobService</code>(實作<code>IJobService</code>)，實作<code>Execute</code>方法部份，筆者這邊以簡單的引入<code>NLog</code>套件並將執行過程紀錄於檔案中。</p>
<h3 id="Hangfire任務實作"><a href="#Hangfire任務實作" class="headerlink" title="Hangfire任務實作"></a>Hangfire任務實作</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IJobService</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OneTimeExecute</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DelayExecute</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SchedulerExecute</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JobService</span> : <span class="title">IJobService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Logger _logger = LogManager.GetCurrentClassLogger();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OneTimeExecute</span>()</span> &#123;</span><br><span class="line">        _logger.Info(<span class="string">&quot;One Time Job Execute!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DelayExecute</span>()</span> &#123;</span><br><span class="line">        _logger.Info(<span class="string">&quot;Delay Job Execute!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SchedulerExecute</span>()</span> &#123;</span><br><span class="line">        _logger.Info(<span class="string">&quot;Scheduler Job Execute!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Hangfire;</span><br><span class="line"></span><br><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line">[<span class="meta">Route(<span class="string">&quot;[controller]&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HomeController</span> : <span class="title">ControllerBase</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IJobService _jobService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HomeController</span>(<span class="params">IJobService jobService</span>)</span> &#123;</span><br><span class="line">        _jobService = jobService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">HttpGet(<span class="string">&quot;onetime&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">OneTime</span>()</span> &#123;</span><br><span class="line">        BackgroundJob.Enqueue&lt;IJobService&gt;(x =&gt; x.OneTimeExecute());</span><br><span class="line">        <span class="keyword">return</span> Ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">HttpGet(<span class="string">&quot;delay&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">DelayJob</span>()</span> &#123;</span><br><span class="line">        BackgroundJob.Schedule&lt;IJobService&gt;(x =&gt; x.DelayExecute(), TimeSpan.FromSeconds(<span class="number">30</span>));</span><br><span class="line">        <span class="keyword">return</span> Ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">HttpGet(<span class="string">&quot;scheduler&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Scheduler</span>()</span> &#123;</span><br><span class="line">        RecurringJob.AddOrUpdate&lt;IJobService&gt;(x =&gt; x.SchedulerExecute(), Cron.Minutely);</span><br><span class="line">        <span class="keyword">return</span> Ok();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>跟著筆者實作，會感覺得<code>Hangfire</code>的厲害，提供的三種排程執行方式，已足夠應付各式各樣的需求，以這篇的範例，應該可以構建各式各樣的排程任務。</p>
<p>參考：</p>
<ul>
<li><a href="https://www.hangfire.io/">https://www.hangfire.io/</a></li>
<li><a href="https://dotblogs.com.tw/libtong/2017/10/15/183524">https://dotblogs.com.tw/libtong/2017/10/15/183524</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>hangfire</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>hangfire</tag>
      </tags>
  </entry>
  <entry>
    <title>[IIS]排程及背景服務站台-保持啟動設定</title>
    <url>/2021/08/26/iis-always-run-setting/</url>
    <content><![CDATA[<img src="/2021/08/26/iis-always-run-setting/Untitled.png" class="" title="[IHostedServiceArchitecture]">

<span id="more"></span>

<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者最近因工作上需要使用到排程及背景服務，類似像定期傳送Email或者定時做某一項作業，當然筆者最近在工作上使用皆以全部換成<code>.net core</code>的技術，因此選擇上以<code>.net core</code>技術可達成的方式來完成，會有幾種選擇:</p>
<ul>
<li><p>寫一個<code>Console Application</code>，搭配使用Windows排程設定讓該<code>exe</code>檔於特定時間執行</p>
</li>
<li><p>.net core一直以來都有一個藉由實作<code>IHostedService</code>來達成背景服務，<a href="https://docs.microsoft.com/zh-tw/dotnet/architecture/microservices/multi-container-microservice-net-applications/background-tasks-with-ihostedservice">參考</a></p>
</li>
<li><p>.net core 3.0後更是有<code>Worker Service</code>專案範本可以使用，可以藉由此類專案來實作背景服務，比起.net core 2.*，更是方便使用</p>
</li>
</ul>
<p>以上幾種選擇，因不同專案及使用情境，選擇不一樣的選項來達成，針對這篇文章解決的問題，使用情境則是一個<code>Web API</code>小專案，因考量上版及管理方便，直接於既有<code>Web API</code>專案上使用排程套件 <a href="https://docs.coravel.net/"><code>Coravel</code></a> 或<a href="https://www.hangfire.io/"><code>Hangfire</code></a>來完成排程作業，或者使用<a href="https://github.com/dotnetcore/CAP"><code>CAP</code></a>。</p>
<p>套件使用方式參考筆者其他專門介紹套件的文章，在此不贅述，程式開發完後發佈於<code>IIS</code>上，觀察log一段時間後會發現，<code>IIS</code>上應用程式集區預設設定之閒置時間20分鐘一到後，若沒有任何活動則會被<code>IIS Application Pool</code>強制回收執行緒，此時背景服務是被中斷的，止到使用者連線使用服務，背景服務才會被再次啟動。</p>
<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><h2 id="IIS設定調整"><a href="#IIS設定調整" class="headerlink" title="IIS設定調整"></a>IIS設定調整</h2><p>上段描述對於背景服務要定期執行某項作業的健全性是危害的，假設這<code>Web API</code>服務為內部系統，因此週休二日時上線使用者人數幾呼為零，在此狀況下，原本設定好週末時運行一段排程作業，會因<code>IIS Application Pool</code>強制回收執行緒而中斷。要解這問題就要從<code>IIS</code>設定上面著手，需要調整<code>IIS</code>的應用程式集區中的進皆設定，主要修改的設定為</p>
<ul>
<li><code>Start Mode(啟動模式)</code>設定為 <code>Always Running</code>，預設為<code>On Demand</code></li>
<li><code>Idle Time-out(minutes)限制時間(分)</code>設定為<code>0</code>，預設為<code>20</code></li>
</ul>
<img src="/2021/08/26/iis-always-run-setting/Untitled1.png" class="" title="[IISApplicationPoolAdvancedSetting1]">

<img src="/2021/08/26/iis-always-run-setting/Untitled2.png" class="" title="[IISApplicationPoolAdvancedSetting2]">


<p>接著也要針對站台的進階設定中調整</p>
<ul>
<li><code>Preloaded Enabled(預先載入已啟用)</code>設定為<code>True</code>，預設為<code>False</code></li>
</ul>
<img src="/2021/08/26/iis-always-run-setting/Untitled3.png" class="" title="[IISSiteAdvancedSetting1]">


<p>當然，上述這些方法可以解決運行中的IIS服務不會被中斷，但必須得保證IIS服務已被第一個Request而啟動，因此更新過程式版本，若使用停止IIS後重新起動這種更新模式則，切記需手動打開(觸發)那個站台的某一個頁面或服務，使得確保背景服務被啟動，這樣的解決方式才會完美無缺了。</p>
<h2 id="安裝應用程式初始化"><a href="#安裝應用程式初始化" class="headerlink" title="安裝應用程式初始化"></a>安裝應用程式初始化</h2><p>非常重要的一個步驟，判斷為回收停止後，應用程式可自行啟動並初始化，會看到Shut Down後又Started紀錄。</p>
<img src="/2021/08/26/iis-always-run-setting/Untitled4.png" class="" title="[InstallApplicationStart]">

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>最後，若使用IIS架排程站台，需要設定上述的步驟，才不會被雷到，也由此可知，IIS設定也是一門學問，僅此紀錄其設定，若有碰到其他相關設定技巧，筆者會在寫文章說明。</p>
<p>參考</p>
<ul>
<li><a href="https://blog.darkthread.net/blog/hangfire-recurringjob-notes/">https://blog.darkthread.net/blog/hangfire-recurringjob-notes/</a></li>
<li><a href="https://github.com/dotnetcore/CAP/issues/406">https://github.com/dotnetcore/CAP/issues/406</a></li>
<li><a href="https://rules.ssw.com.au/do-you-ensure-your-application-pool-is-always-running">https://rules.ssw.com.au/do-you-ensure-your-application-pool-is-always-running</a></li>
<li><a href="https://dotblogs.com.tw/rainmaker/2015/08/27/153232">https://dotblogs.com.tw/rainmaker/2015/08/27/153232</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>iis</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>iis</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]排程利器-Coravel:Queue篇</title>
    <url>/2021/08/25/coravel-queue/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者上篇介紹完<a href="https://docs.coravel.net/">Coravel</a>的<code>Scheduler</code>功能後，這篇要來實作<code>Queue</code>的功能了，筆者敘述一下工作上用到的情境，最近因大系統要上線，必須實作<code>Data Migration</code>，為方便，不防做一個前端頁面，才可以有介面去點擊執行<code>Data Migration</code>作業，想當然爾，作業時間一定無法在一個<code>Request</code>時間內完成，一定會噴<code>Timeout Error</code>。</p>
<p>再則為這點小功能，不想透過<a href="https://www.hangfire.io/">Hangfire</a>的<code>BackgroundJob.Enqueue</code>來實作，這時想到<code>Coravel</code>也有提供<code>Queue</code>功能，API站台的action收到Data Migration的request後，塞入一則<code>Coravel</code>的<code>Queue</code>，由<code>Queue</code>對應的Service去往下執行對應的作業，是個完美的方案吧。</p>
<span id="more"></span>
<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><h2 id="安裝Coravel套件"><a href="#安裝Coravel套件" class="headerlink" title="安裝Coravel套件"></a>安裝Coravel套件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet add package coravel</span><br></pre></td></tr></table></figure>

<h2 id="註冊Coravel的Queue服務"><a href="#註冊Coravel的Queue服務" class="headerlink" title="註冊Coravel的Queue服務"></a>註冊Coravel的Queue服務</h2><p>首先必須於<code>Startup.cs</code>中註冊Queue</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 以上省略</span></span><br><span class="line">    services.AddQueue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="建構值注入IQueue"><a href="#建構值注入IQueue" class="headerlink" title="建構值注入IQueue"></a>建構值注入IQueue</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">IQueue _queue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HomeController</span>(<span class="params">IQueue queue</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>._queue = queue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="QueueJob宣告"><a href="#QueueJob宣告" class="headerlink" title="QueueJob宣告"></a>QueueJob宣告</h2><h3 id="QueueJob"><a href="#QueueJob" class="headerlink" title="QueueJob"></a>QueueJob</h3><p>QueueJob與Scheduler一樣，需要實作<code>IInvocable</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LogQueueJob</span> : <span class="title">IInvocable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IHostEnvironment _env;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IConfiguration _config;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LogQueueJob</span>(<span class="params">IHostEnvironment env, IConfiguration config</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _env = env;</span><br><span class="line">        _config = config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Task <span class="title">Invoke</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(</span><br><span class="line">            <span class="string">$&quot;[QueueuService <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>)&#125;</span>]: <span class="subst">&#123;_env.ContentRootPath&#125;</span>&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="QueueJobWithPayload"><a href="#QueueJobWithPayload" class="headerlink" title="QueueJobWithPayload"></a>QueueJobWithPayload</h3><p>為了示範PayLoad傳送，宣告一個Class</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> UserName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因為需要做序列化成字串輸出，安裝老牌子序列化套件<a href="https://www.newtonsoft.com/json">Json.NET</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet add package Newtonsoft.Json</span><br></pre></td></tr></table></figure>

<p>筆者就沿用Coravel那篇的Log形式</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LogQueueJobWithPayLoad</span> : <span class="title">IInvocable</span>, <span class="title">IInvocableWithPayload</span>&lt;<span class="title">UserModel</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IHostEnvironment _env;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IConfiguration _config;</span><br><span class="line">    <span class="keyword">public</span> UserModel Payload &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LogQueueJobWithPayLoad</span>(<span class="params">IHostEnvironment env, IConfiguration config</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _env = env;</span><br><span class="line">        _config = config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Task <span class="title">Invoke</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Payload: <span class="subst">&#123;JsonConvert.SerializeObject(Payload)&#125;</span>&quot;</span>);</span><br><span class="line">        Console.WriteLine(</span><br><span class="line">            <span class="string">$&quot;[QueueServiceWithPayload <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>)&#125;</span>]: <span class="subst">&#123;_env.ContentRootPath&#125;</span>&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中比LogQueueJob多了一個實作<code>IInvocableWithPayload&lt;T&gt;</code>，該<code>T</code>為要傳輸的<code>Model</code>型別，筆者這邊使用前一步宣告好的<code>UserModel</code>，再則需要宣告一個同樣T型別的參數，並且名為<code>Payload</code>，就大功告成了。</p>
<h2 id="執行QueueJob"><a href="#執行QueueJob" class="headerlink" title="執行QueueJob"></a>執行QueueJob</h2><h3 id="QueueJob註冊"><a href="#QueueJob註冊" class="headerlink" title="QueueJob註冊"></a>QueueJob註冊</h3><p>筆者上篇也有提醒過，<code>Coravel</code>也是透過<code>Dotnet Core</code>的DI機制，取得<code>QueueJob</code>並執行，因此需要將<code>QueueJob</code>做註冊的動作</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 以上省略</span></span><br><span class="line">    services.AddQueue();</span><br><span class="line">    services.AddTransient&lt;LogQueueJob&gt;();</span><br><span class="line">    services.AddTransient&lt;LogQueueJobWithPayLoad&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="撰寫Demo-Action"><a href="#撰寫Demo-Action" class="headerlink" title="撰寫Demo Action"></a>撰寫Demo Action</h3><p>分別為<code>api/home/queue</code>以及<code>api/home/queuewithpayload</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> QueueJob示範</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">HttpPost(<span class="string">&quot;queue&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">InvocableQueueJob</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    _queue.QueueInvocable&lt;LogQueueJob&gt;();</span><br><span class="line">    <span class="keyword">return</span> Ok(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> QueueJobWithPayload示範</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">HttpPost(<span class="string">&quot;queuewithPayload&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">InvocableQueueJobWithPayload</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> userModel = <span class="keyword">new</span> UserModel()</span><br><span class="line">    &#123;</span><br><span class="line">        UserName = <span class="string">&quot;Eugene Su&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    _queue.QueueInvocableWithPayload&lt;LogQueueJobWithPayLoad, UserModel&gt;(userModel);</span><br><span class="line">    <span class="keyword">return</span> Ok(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="執行結果"><a href="#執行結果" class="headerlink" title="執行結果"></a>執行結果</h2><p>筆者使用單純的<code>dotnet run</code>指令來啟動API站台</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet run</span><br></pre></td></tr></table></figure>

<p>打開<code>Postman</code>，輸入<code>http://localhost:5000/api/home/queue</code>，<code>http method</code>選擇<code>Post</code></p>
<img src="/2021/08/25/coravel-queue/Untitled.png" class="" title="[Postman-Queue]">

<p>再則我們在<code>command line</code>畫面看輸出</p>
<img src="/2021/08/25/coravel-queue/Untitled1.png" class="" title="[QueueResult]">

<p>再來試Payload部份，調整一下<code>Postman</code>中的<code>url</code>，結尾改為<code>queuewithpayload</code></p>
<img src="/2021/08/25/coravel-queue/Untitled2.png" class="" title="[Postman-QueueWithPayload]">

<p>從<code>command line</code>看輸出</p>
<img src="/2021/08/25/coravel-queue/Untitled3.png" class="" title="[QueueWithPayloadResult]">

<p>可以從結果看出將<code>payload</code>序列化後輸出的結果，也正常輸出時間以及<code>environment</code>的<code>contentrootpath</code></p>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>若有一些作業是不需要馬上回應，只要背景作業，筆者認為<code>Coravel</code>的<code>Queue</code>功能不失為一個選項，簡單設定，<code>符合dotnet core的DI機制</code>，簡單上手，推薦給大家。</p>
<p>參考</p>
<p><a href="https://docs.coravel.net/Queuing/">https://docs.coravel.net/Queuing/</a></p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>
]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>coravel</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>coravel</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]排程利器-Coravel:Scheduler篇</title>
    <url>/2021/08/25/coravel-scheduler/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者因工作有需求要實作排程，以傳統做法來說，最簡單的方式是撰寫一支獨立的console或其他可以產生執行檔的專案，由<code>Windows排程</code>去設定，於某一個特定時間執行某一個自己撰寫的程式執行檔案，但是壞處是我得獨立一個專案，如果以簡易的排程來說太麻煩，本身有API站台要發佈，排程若有更新則需要再發佈一個排程的執行擋。</p>
<p>筆者期初的想法是能找到一個套件依附於API站台專案中，因筆者針對測試環境，有設定WebDeploy的功能，因此很容易發佈更新版本，不需要手動發佈執行檔檔案並調整Windows排程。筆者有在關注<a href="https://github.com/MoienTajik/AspNetCore-Developer-Roadmap">ASP.NET CORE Developer Roadmap</a>，不時會在上面找好料，<a href="https://github.com/jamesmh/coravel">Coravel</a>本身也是從其中的TaskScheduling區塊中找到，就試著用用看吧</p>
<span id="more"></span>
<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>Coravel本身支援諸多應用，免費版的<code>Scheduler</code>及<code>Queue</code>等等功能，至於<code>Dashboard</code>功能付費版才有，筆者這篇以<code>Scheduler</code>為主介紹其應用方式。</p>
<h2 id="簡單應用"><a href="#簡單應用" class="headerlink" title="簡單應用"></a>簡單應用</h2><p>首先建立WebAPI專案</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet new webapi --output Coravel.API</span><br></pre></td></tr></table></figure>

<p>請使用Visual Studio Code開啟專案</p>
<img src="/2021/08/25/coravel-scheduler/Untitled.png" class="" title="[VSCodeProject]">

<p>安裝Coravel套件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet add package coravel</span><br></pre></td></tr></table></figure>

<p>請於<code>Startup.cs</code>中撰寫程式</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">services.AddScheduler();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> provider = app.ApplicationServices;</span><br><span class="line">provider.UseScheduler(scheduler =&gt; &#123;</span><br><span class="line">    scheduler.Schedule(() =&gt; &#123;</span><br><span class="line">        System.Console.WriteLine(<span class="string">$&quot;Hello World! <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>)&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;).EveryMinute();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>完整程式碼如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 以上省略</span></span><br><span class="line">        services.AddScheduler();</span><br><span class="line">        <span class="comment">// 以下省略</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 以上省略</span></span><br><span class="line">        app.ApplicationServices.UseScheduler(scheduler =&gt; &#123;</span><br><span class="line">            scheduler.Schedule(() =&gt; &#123;</span><br><span class="line">                System.Console.WriteLine(<span class="string">$&quot;Hello World! <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>)&#125;</span>&quot;</span>);</span><br><span class="line">            &#125;).EveryMinute();</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 以下省略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果參考</p>
<img src="/2021/08/25/coravel-scheduler/Untitled1.png" class="" title="[SchedulerResult]">


<h2 id="進階應用"><a href="#進階應用" class="headerlink" title="進階應用"></a>進階應用</h2><h3 id="執行一個Service"><a href="#執行一個Service" class="headerlink" title="執行一個Service"></a>執行一個Service</h3><p>首先建立一個Class，筆者命名為「<code>SchedulerService.cs</code>」，需要實作「<code>IInvocable</code>」</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SchedulerService</span> : <span class="title">IInvocable</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">readonly</span> IHostEnvironment _env;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">readonly</span> IConfiguration _config;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SchedulerService</span>(<span class="params">IHostEnvironment env, IConfiguration config</span>)</span> &#123;</span><br><span class="line">	    _env = env;</span><br><span class="line">	    _config = config;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Task <span class="title">Invoke</span>()</span> &#123;</span><br><span class="line">	    System.Console.WriteLine(<span class="string">$&quot;[SchedulerService <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>)&#125;</span>]: <span class="subst">&#123;_env.ContentRootPath&#125;</span>&quot;</span>);</span><br><span class="line">	    <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下來，要來改寫<code>Startup.cs</code>中的程式</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注入Service</span></span><br><span class="line">services.AddTransient&lt;SchedulerService&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Schedule改執行自己撰寫的Service</span></span><br><span class="line"><span class="keyword">var</span> provider = app.ApplicationServices;</span><br><span class="line">provider.UseScheduler(scheduler =&gt; &#123;</span><br><span class="line">    scheduler.Schedule&lt;SchedulerService&gt;()</span><br><span class="line">        .EverySecond();<span class="comment">// 改為每秒執行</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>執行效果如下</p>
<img src="/2021/08/25/coravel-scheduler/Untitled2.png" class="" title="[SchedulerResult]">

<blockquote>
<p>由執行結果可以發現，我們使用自己撰寫的Service是支援dotnet core的DI機制運作，亦即.net core可以使用的注入服務皆可使用，換言之，你也可以注DbContext，於Scheduler Service使用Entity Framework Core與資料庫連線並操作的。</p>
</blockquote>
<blockquote>
<p>其中要特別注意，上述有提到Coravel本身有支援dotnet core的DI機制運作，因此本身自己的Service記得也要注入，不然會爆錯。</p>
</blockquote>
<h3 id="Worker-Service中應用"><a href="#Worker-Service中應用" class="headerlink" title="Worker Service中應用"></a>Worker Service中應用</h3><p>使用<code>Visual Studio</code>或<code>dotnet command</code>的方式新增 Worker Service專案</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet new worker -n &#123;ProjectName&#125;</span><br></pre></td></tr></table></figure>

<p>接著找到<code>program.cs</code>中設置<code>Scheduler</code>資訊，完整程式碼</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 原本是CreateHostBuilder(args).Build().Run();</span></span><br><span class="line">        IHost host = CreateHostBuilder(args).Build();</span><br><span class="line">        host.Services.UseScheduler(scheduler =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            scheduler.Schedule&lt;SchedulerService&gt;()</span><br><span class="line">                .EveryFiveMinutes();</span><br><span class="line">        &#125;);</span><br><span class="line">        host.Run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IHostBuilder <span class="title">CreateHostBuilder</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> =&gt;</span><br><span class="line">        Host.CreateDefaultBuilder(args)</span><br><span class="line">            .ConfigureServices((hostContext, services) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                services.AddScheduler();</span><br><span class="line">                services.AddHostedService&lt;Worker&gt;();</span><br><span class="line">            &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>以簡易的排程來說，<code>Coravel</code>本身以足夠應用，算是短小精幹型的套件，其設定方式也是簡單，且也適用<code>dotnet core的DI機制</code>，筆者就覺得很棒了，下篇再來寫它的<code>Queue</code>功能。</p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>
]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>coravel</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>coravel</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]後端驗證神器:Fluent Validation</title>
    <url>/2021/08/24/fluent-validation/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>現在開發網頁幾乎都切換成前後端分離的開發方式，前端採用 <code>Angular</code>, <code>Vue</code>, <code>React</code>三大框架之一，後端則只要撰寫API服務即可，一來職責分離，前端適合處理畫面的互動效果，後端搭配資料庫處理商業邏輯的運算，使用<code>json</code>格式傳送結果至前端，多完美的協作阿。</p>
<p>通常簡單驗證邏輯會放在前端做處理，畢竟不用花費傳送成本，例如必填、長度等簡單邏輯驗證，直接在前端實作即可，但畢竟後端需要將資料儲存至資料庫，若沒有再做進一步驗證則資料儲存失敗的風險，以及日後資料運算使用時的困難。又或者系統本身需要透過<code>http</code>與其他系統介接，其他系統直接打我方API，這種情境就不需多說，需要在後端做驗證，連必填、長度等簡單邏輯驗證也必須做在後端。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>基於各種理由，我們必須在後端實作資料驗證這個部份，筆者心中想法是這種邏輯驗證必須做在進到<code>action</code>之前，需於<code>Model Binding</code>時期，若驗證不過則由統一格式回傳，既不佔用到運算資源，類似像<code>Dotnet Core</code>中的<code>Middleware</code>設計，責任界線劃分清楚，日後維護或擴充起來會是好的體驗。</p>
<p>跟著筆者一步一步做吧，大概會分為這幾步驟</p>
<ul>
<li>安裝相關Nuget套件</li>
<li>實作Validator</li>
<li>於StartUp載入使用</li>
<li>設定驗證不過則統一格式回復</li>
</ul>
<h2 id="安裝相關Nuget套件-FluentValidation"><a href="#安裝相關Nuget套件-FluentValidation" class="headerlink" title="安裝相關Nuget套件-FluentValidation"></a>安裝相關Nuget套件-FluentValidation</h2><p>依照專案的角色不同，安裝不同套件，若設定Validator的專案則是安裝 <code>FluentValidation</code>，若最終使用端API專案則需要使用到<code>FluentValidation.AspNetCore</code>，跟著筆者安裝吧</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet add package FluentValidation</span><br><span class="line">dotnet add package FluentValidation.AspNetCore</span><br></pre></td></tr></table></figure>

<h2 id="實作Validator"><a href="#實作Validator" class="headerlink" title="實作Validator"></a>實作Validator</h2><p>主要是繼承<code>AbstractValidator</code>，於<code>Constructor</code>宣告驗證的Rule，直接來看Code吧。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 驗證類別</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyApiRegisterRequestModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 身份證字號/居留證號</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Idn &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">// 以下省略</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// AbstractValidator角括號中宣告需驗證的類別</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyApiRequestModelValidator</span> : <span class="title">AbstractValidator</span>&lt;<span class="title">MyApiRegisterRequestModel</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SKBApiRequestModelValidator</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        RuleFor(x =&gt; x.Idn).NotEmpty()</span><br><span class="line">            .WithMessage(<span class="string">&quot;身分證或居留證卡號不得為空&quot;</span>);</span><br><span class="line">        <span class="comment">// 以下省略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要有哪些驗證邏輯，參考官網會有諸多範例可參考，筆者不在這邊多加贅述，直接參考官網說明即可。</p>
<p><a href="https://docs.fluentvalidation.net/en/latest/built-in-validators.html">Built-in Validators - FluentValidation documentation</a></p>
<h2 id="Startup載入宣告"><a href="#Startup載入宣告" class="headerlink" title="Startup載入宣告"></a>Startup載入宣告</h2><p>前提需要安裝Nuget套件: <code>FluentValidation.AspNetCore</code>，筆者這邊的作法是會把View Model會獨立於一個專案中宣告，然後相對應的<code>Validators</code>也宣告於此專案，所以筆者利用套件提供的<code>FromAssembly</code>的方式來做註冊，直接看Code吧。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">services.AddControllers()</span><br><span class="line">.AddFluentValidation(opt =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    opt.RegisterValidatorsFromAssembly(AppDomain.CurrentDomain.Load(<span class="string">&quot;ModelsProjName&quot;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="設定驗證不過則統一格式回復"><a href="#設定驗證不過則統一格式回復" class="headerlink" title="設定驗證不過則統一格式回復"></a>設定驗證不過則統一格式回復</h2><p>配合上一個步驟，只要宣告<code>AddFluentValidation</code>則FluentValidation會在Model Binding時期就會做驗證並將ModelState改變，會去改變ModelState.IsValid的值，所以我們只要Configure <code>ApiBehaviorOptions</code>中的<code>InvalidModelStateResponseFactory</code>做設定，直接回傳結果。</p>
<p>筆者這邊有定義統一回傳格式，依照各位的需求，可以再調整其格式:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Weak type of response result.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">[<span class="meta">XmlRoot(ElementName = <span class="string">&quot;result&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Result</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Response status (default is fail)</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">XmlElement(ElementName = <span class="string">&quot;status&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> ResponseStatus Status &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = ResponseStatus.Failure;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Messages to be showed in response</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">XmlElement(ElementName = <span class="string">&quot;message&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Message &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="built_in">string</span>.Empty;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">this</span>, <span class="keyword">new</span> JsonSerializerSettings</span><br><span class="line">        &#123;</span><br><span class="line">            ContractResolver = <span class="keyword">new</span> CamelCasePropertyNamesContractResolver()</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Generic version of response result.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Result</span>&lt;<span class="title">T</span>&gt; : <span class="title">Result</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> T is always object (多筆的 Pager 資訊是包在這個 Payload 物件裡面)</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> T ResultObj &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 預設Result</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ResultExtension</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 返回成功 （無文字訊息）</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;helper&quot;&gt;</span> <span class="doctag">&lt;see cref=&quot;Result&quot; /&gt;</span> <span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">Success</span>(<span class="params"><span class="keyword">this</span> Result helper</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> helper.Success(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 返回成功</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;helper&quot;&gt;</span>  <span class="doctag">&lt;see cref=&quot;Result&quot; /&gt;</span> <span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;message&quot;&gt;</span> 提示訊息 <span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">Success</span>(<span class="params"><span class="keyword">this</span> Result helper, <span class="built_in">string</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        helper.Status = ResponseStatus.Success;</span><br><span class="line">        helper.Message = message;</span><br><span class="line">        <span class="keyword">return</span> helper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 返回失敗</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;helper&quot;&gt;</span>    <span class="doctag">&lt;see cref=&quot;Result&quot; /&gt;</span> <span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;resultMsg&quot;&gt;</span> 提示/錯誤訊息 <span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">Fail</span>(<span class="params"><span class="keyword">this</span> Result helper, <span class="built_in">string</span> resultMsg</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        helper.Status = ResponseStatus.Failure;</span><br><span class="line">        helper.Message = resultMsg;</span><br><span class="line">        <span class="keyword">return</span> helper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 返回失敗-錯誤訊息=查無資料</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;helper&quot;&gt;</span> <span class="doctag">&lt;see cref=&quot;Result&quot; /&gt;</span> <span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">DbNotFound</span>(<span class="params"><span class="keyword">this</span> Result helper</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        helper.Status = ResponseStatus.NotFound;</span><br><span class="line">        helper.Message = <span class="string">&quot;查無資料&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> helper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">DbException</span>(<span class="params"><span class="keyword">this</span> Result helper</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        helper.Status = ResponseStatus.DatabaseError;</span><br><span class="line">        helper.Message = <span class="string">&quot;資料庫異常&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> helper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>就在Startup設定統一回傳固定的Result，將錯誤訊息打包到一個<code>ResultObj</code>中，型別為<code>List&lt;string&gt;</code>:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">services.Configure&lt;ApiBehaviorOptions&gt;(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.InvalidModelStateResponseFactory = (context) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> errors = context.ModelState</span><br><span class="line">            .Values</span><br><span class="line">            .SelectMany(x =&gt; x.Errors</span><br><span class="line">                        .Select(p =&gt; p.ErrorMessage))</span><br><span class="line">            .ToList();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> result = <span class="keyword">new</span> Result&lt;List&lt;<span class="built_in">string</span>&gt;&gt;()</span><br><span class="line">        &#123;</span><br><span class="line">            ResultObj = errors</span><br><span class="line">        &#125;;</span><br><span class="line">        result.Fail(errors.FirstOrDefault());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OkObjectResult(result);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>跟著筆者來看一下效果吧，就使用Postman來試打一下API，故意傳空值，效果如下:</p>
<img src="/2021/08/24/fluent-validation/Untitled.png" class="" title="[FluentValidationWithPostman]">

<h2 id="複雜物件類別驗證設定"><a href="#複雜物件類別驗證設定" class="headerlink" title="複雜物件類別驗證設定"></a>複雜物件類別驗證設定</h2><p>實際專案往往會遇到不是單純的單層結構，一次接主要資料含明細資料，跟著筆者一起來研究一下遇到這種比較複雜類型要怎麼設定吧，筆者也是跟著官網教學做，因此就follow官網提供的範例了，這邊主要分為明細為單筆或明細為多筆，依照這兩種狀況不同而設定方式有所不同。</p>
<h3 id="單筆明細"><a href="#單筆明細" class="headerlink" title="單筆明細"></a>單筆明細</h3><p>先來看看主要及明細的j物件類別、屬性:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Customer</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  <span class="keyword">public</span> Address Address &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Address</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">string</span> Line1 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">string</span> Line2 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">string</span> Town &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">string</span> County &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">string</span> Postcode &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>針對<code>Address</code>新增一個<code>Validator</code>:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AddressValidator</span> : <span class="title">AbstractValidator</span>&lt;<span class="title">Address</span>&gt; &#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">AddressValidator</span>()</span> &#123;</span><br><span class="line">    RuleFor(address =&gt; address.Postcode).NotNull();</span><br><span class="line">    <span class="comment">//etc</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下來於<code>Customer</code>新增一個<code>Validator</code>，並宣告針對<code>Address</code>屬性的驗證類別:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomerValidator</span> : <span class="title">AbstractValidator</span>&lt;<span class="title">Customer</span>&gt; &#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CustomerValidator</span>()</span> &#123;</span><br><span class="line">    RuleFor(customer =&gt; customer.Name).NotNull();</span><br><span class="line">    RuleFor(customer =&gt; customer.Address).SetValidator(<span class="keyword">new</span> AddressValidator());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多筆明細"><a href="#多筆明細" class="headerlink" title="多筆明細"></a>多筆明細</h3><p>筆者這邊就拿官網上的Customer與Order的例子來說明，一個客戶雍有多筆訂單，這個時候需要使用到<code>RuleForEach</code>，一般單個屬性設定為<code>RuleFor</code>，先宣告對應的物件類別:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Customer</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> List&lt;Order&gt; Orders &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="keyword">new</span> List&lt;Order&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Order</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">double</span> Total &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下來要針對<code>Order</code>先宣告其<code>Validator</code>:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderValidator</span> : <span class="title">AbstractValidator</span>&lt;<span class="title">Order</span>&gt; &#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">OrderValidator</span>()</span> &#123;</span><br><span class="line">    RuleFor(x =&gt; x.Total).GreaterThan(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最後針對<code>Customer</code>設定其<code>Validator</code>時使用<code>RuleForEach</code>設定其擁有的<code>Order</code>屬性使用<code>OrderValidator</code>:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomerValidator</span> : <span class="title">AbstractValidator</span>&lt;<span class="title">Customer</span>&gt; &#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CustomerValidator</span>()</span> &#123;</span><br><span class="line">    RuleForEach(x =&gt; x.Orders).SetValidator(<span class="keyword">new</span> OrderValidator());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Custom-Validator-進階邏輯驗證"><a href="#Custom-Validator-進階邏輯驗證" class="headerlink" title="Custom Validator-進階邏輯驗證"></a>Custom Validator-進階邏輯驗證</h2><p>筆者會用到的另一個情境是，有些識別序號欄位就錯了，其實根本不需要進到邏輯層去處理相關邏輯運算，這種牽扯自身邏輯相關的必須要實作<code>Custom Validator</code>來完成。如下</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChargeListValidator</span> : <span class="title">AbstractValidator</span>&lt;<span class="title">List</span>&lt;<span class="title">ChargeRequestModel</span>&gt;&gt;</span><br><span class="line">&#123;</span><br><span class="line">		<span class="comment">// 依照各位環境中資料庫連接方式實作，筆者這邊是注入DBContext物件，使用EF Core實作資料庫串接</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> MyDBContext _db;</span><br><span class="line">		<span class="comment">// 參考筆者另一篇使用EF Core的文章，筆者這邊使用Constructor注入方式注入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChargeListValidator</span>(<span class="params">MyDBContext db</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _db = db;</span><br><span class="line">        RuleFor(x =&gt; x)</span><br><span class="line">            .Must(ValidateCaseNo).WithMessage(<span class="string">&quot;契約編號有誤，請重新輸入&quot;</span>)                </span><br><span class="line">            .DependentRules(() =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                RuleFor(x =&gt; x)</span><br><span class="line">                    .Must(ValidateTicketNo).WithMessage(<span class="string">&quot;票券編號有誤，請重新輸入&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        RuleForEach(x =&gt; x).SetValidator(<span class="keyword">new</span> ChargeValidator());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Custom Validator</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">ValidateCaseNo</span>(<span class="params">List&lt;ChargeRequestModel&gt; chargeRequestModelList</span></span></span><br><span class="line"><span class="params"><span class="function">        , List&lt;ChargeRequestModel&gt; targetModels</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> distinctCaseNoList = targetModels.Select(x =&gt; x.CaseNo).Distinct().ToList();</span><br><span class="line">        <span class="keyword">var</span> existCount = _db.AuthMainDts.Count(x =&gt; distinctCaseNoList.Contains(x.CaseNo));</span><br><span class="line">        <span class="keyword">return</span> distinctCaseNoList.Count == existCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">ValidateTicketNo</span>(<span class="params">List&lt;ChargeRequestModel&gt; chargeRequestModelList</span></span></span><br><span class="line"><span class="params"><span class="function">        , List&lt;ChargeRequestModel&gt; targetModels</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> existCount = _db.Tkdetails.Count(x =&gt; targetModels.Select(t =&gt; t.TicketNo).ToList().Contains(x.Tkno));</span><br><span class="line">        <span class="keyword">return</span> targetModels.Count == existCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上，筆者需要解說一下，由註解可以看到，我這邊舉的例子使用<code>EF Core</code>操作資料庫，把相對應的檢查邏輯寫在<code>Custom Validator</code>。</p>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>筆者在<code>ASP.NET MVC 5</code>時期就開始使用<code>Fluent Validation</code>，覺得很靈活且方便的設定及使用，內建Validation就已足夠應付一般驗證需求，基本上也可以完全走自定義的Validator，換到<code>ASP.NET CORE</code>，將使用及設定方式更為彈性，尤其搭配<code>ApiBehaviorOption</code>，可以完美地統一處理Response，是一件值得花時間研究一下的套件。</p>
<p>參考</p>
<ul>
<li><a href="https://docs.fluentvalidation.net/en/latest/start.html#chaining-validators">https://docs.fluentvalidation.net/en/latest/start.html#chaining-validators</a></li>
<li><a href="https://docs.fluentvalidation.net/en/latest/collections.html">https://docs.fluentvalidation.net/en/latest/collections.html</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>fluent-validation</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>fluent-validation</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]NLog-ILoggerManager設計</title>
    <url>/2021/08/23/nlog-loggermanager/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者有幸參與到科內負責的大系統，不能單靠一個API站台就解決所有的需求，必須搭配<code>Scheduler</code>、<code>WindowsService</code>等服務，介接技術上，可能會用<code>Socket</code>或是<code>HttpClient</code>介接，再加上自己系統本身，分散多個專案，中間使用<code>Message Queue</code>技術串聯起來，算是一個滿有挑戰性的系統了，挑戰主要是在串連服務的難度上，而非高流量。因此追蹤問題上，需要靠Loggin機制，由於各式各樣的服務，不能單靠底層Logging套件:NLog預設的紀錄欄位，針對不同種類的服務，做一個客製化屬性欄位的擴充才行。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>回到此篇主題，為什麼會有<code>ILoggerManager</code>需求，依照前提情要中提到的情境，可以將大系統中的服務類型大致上可以分為API站台、Scheduler排程服務，Socket服務這三大類，試想可紀錄或紀錄關心的欄位有所不同。</p>
<p>以API站台來說，關心登入者與API Path，這樣才能快速找到對應的程式，並修復；Scheduler排程服務來說，關心的是Scheduler服務名稱，以此類推，依照需求面向不同，需要設計出不一樣的<code>LoggerManager</code>。</p>
<p>以上述分類，筆者設計出三種不同的LoggerManager，分別為:</p>
<ul>
<li>APILoggerManager</li>
<li>SchedulerLoggerManager</li>
<li>ExchangeLoggerManager</li>
</ul>
<h2 id="ILoggerManager"><a href="#ILoggerManager" class="headerlink" title="ILoggerManager"></a>ILoggerManager</h2><p>跟著筆者定義一下LoggerManager</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ILoggerManager</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">LogInfo</span>(<span class="params"><span class="built_in">string</span> message</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">LogWarn</span>(<span class="params"><span class="built_in">string</span> message</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">LogDebug</span>(<span class="params"><span class="built_in">string</span> message</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">LogError</span>(<span class="params"><span class="built_in">string</span> message</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="APILoggerManager"><a href="#APILoggerManager" class="headerlink" title="APILoggerManager"></a>APILoggerManager</h2><h3 id="NLog宣告語法"><a href="#NLog宣告語法" class="headerlink" title="NLog宣告語法"></a>NLog宣告語法</h3><p>主要新增「UserId」、「APIPath」</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[NLog](</span><br><span class="line">	[ID] [<span class="type">int</span>] <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	[MachineName] [nvarchar](<span class="number">200</span>) <span class="keyword">NULL</span>,</span><br><span class="line">	[UserId] [<span class="type">varchar</span>](<span class="number">10</span>) <span class="keyword">NULL</span>,</span><br><span class="line">	[APIPath] [<span class="type">varchar</span>](<span class="number">400</span>) <span class="keyword">NULL</span>,</span><br><span class="line">	[Logged] [datetime] <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	[Level] [<span class="type">varchar</span>](<span class="number">5</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	[Message] [nvarchar](max) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	[Logger] [nvarchar](<span class="number">300</span>) <span class="keyword">NULL</span>,</span><br><span class="line">	[Properties] [nvarchar](max) <span class="keyword">NULL</span>,</span><br><span class="line">	[Callsite] [nvarchar](<span class="number">300</span>) <span class="keyword">NULL</span>,</span><br><span class="line">	[Exception] [nvarchar](max) <span class="keyword">NULL</span>,</span><br><span class="line"> <span class="keyword">CONSTRAINT</span> [PK_dbo.Log] <span class="keyword">PRIMARY</span> KEY CLUSTERED </span><br><span class="line">(</span><br><span class="line">	[ID] <span class="keyword">ASC</span></span><br><span class="line">)<span class="keyword">WITH</span> (PAD_INDEX <span class="operator">=</span> OFF, STATISTICS_NORECOMPUTE <span class="operator">=</span> OFF, IGNORE_DUP_KEY <span class="operator">=</span> OFF, ALLOW_ROW_LOCKS <span class="operator">=</span> <span class="keyword">ON</span>, ALLOW_PAGE_LOCKS <span class="operator">=</span> <span class="keyword">ON</span>) <span class="keyword">ON</span> [<span class="keyword">PRIMARY</span>]</span><br><span class="line">) <span class="keyword">ON</span> [<span class="keyword">PRIMARY</span>] TEXTIMAGE_ON [<span class="keyword">PRIMARY</span>]</span><br></pre></td></tr></table></figure>

<h3 id="APILoggerManager實作"><a href="#APILoggerManager實作" class="headerlink" title="APILoggerManager實作"></a>APILoggerManager實作</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> API所需LoggerManager</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">APILoggerManager</span> : <span class="title">ILoggerManager</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> NLog.Logger _logger = NLog.LogManager.GetCurrentClassLogger();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IIdentityService _identityService;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _apiUrl;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">APILoggerManager</span>(<span class="params">IIdentityService identityService, IHttpContextAccessor context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _identityService = identityService;</span><br><span class="line">        _apiUrl = context?.HttpContext?.Request?.Path;</span><br><span class="line">            <span class="comment">//$&quot;&#123;context.HttpContext.Request.RouteValues[&quot;controller&quot;]&#125;/&#123;context.HttpContext.Request.RouteValues[&quot;action&quot;]&#125;&quot;;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LogDebug</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger.WithProperty(<span class="string">&quot;UserId&quot;</span>, _identityService.GetUserName())</span><br><span class="line">            .WithProperty(<span class="string">&quot;APIPath&quot;</span>, _apiUrl)</span><br><span class="line">            .Debug(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LogError</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger.WithProperty(<span class="string">&quot;UserId&quot;</span>, _identityService.GetUserName())</span><br><span class="line">            .WithProperty(<span class="string">&quot;APIPath&quot;</span>, _apiUrl)</span><br><span class="line">            .Error(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LogInfo</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger.WithProperty(<span class="string">&quot;UserId&quot;</span>, _identityService.GetUserName())</span><br><span class="line">            .WithProperty(<span class="string">&quot;APIPath&quot;</span>, _apiUrl)</span><br><span class="line">            .Info(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LogWarn</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger.WithProperty(<span class="string">&quot;UserId&quot;</span>, _identityService.GetUserName())</span><br><span class="line">            .WithProperty(<span class="string">&quot;APIPath&quot;</span>, _apiUrl)</span><br><span class="line">            .Warn(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述程式碼內容主要是使用<code>IIdentityService</code>取得登入者相關資訊，NLog部份，主要使用<code>WithProperty</code>來設定Custom Column對應的值。來看一下<code>IIdentityService</code>的內容吧</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IIdentityService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="built_in">int</span> <span class="title">GetUserId</span>()</span>;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">GetUserName</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IdentityService</span> : <span class="title">IIdentityService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IHttpContextAccessor _context;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IdentityService</span>(<span class="params">IHttpContextAccessor context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">GetUserId</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> nameId = _context?.HttpContext?.User.FindFirst(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> nameId != <span class="literal">null</span> ? Convert.ToInt32(nameId.Value) : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetUserName</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _context?.HttpContext?.User.FindFirst(<span class="string">&quot;name&quot;</span>)?.Value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述程式碼中，主要使用注入IHttpContextAccessor，並取得登入者相關資訊，筆者使用的是最簡單的<code>jwt token</code>的方式驗證登入者的合法性，後端在登入驗證成功後發出一條<code>jwt token</code>，前端在每一個Request的header中帶入拿到的<code>jwt token</code>，達到<code>Authentitcation</code>的效果。因為關係到怎麼塞入<code>Claim</code>資訊，就得用對應的key值做取得登入資訊。</p>
<h3 id="NLog-Config宣告"><a href="#NLog-Config宣告" class="headerlink" title="NLog Config宣告"></a>NLog Config宣告</h3><ul>
<li>Target設定</li>
</ul>
<p>於NLog.config中宣告database紀錄相關設定，targets中加入database target</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">&quot;database&quot;</span> <span class="attr">xsi:type</span>=<span class="string">&quot;Database&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">connectionString</span>&gt;</span>$&#123;var:connectionStringNlog&#125;<span class="tag">&lt;/<span class="name">connectionString</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">commandText</span>&gt;</span></span><br><span class="line">        insert into dbo.NLog (</span><br><span class="line">        MachineName, UserId, APIPath, Logged, Level, Message,</span><br><span class="line">        Logger, Callsite, Exception</span><br><span class="line">        ) values (</span><br><span class="line">        @MachineName, @UserId, @APIPath, @Logged, @Level, @Message,</span><br><span class="line">        @Logger, @Callsite, @Exception</span><br><span class="line">        );</span><br><span class="line">    <span class="tag">&lt;/<span class="name">commandText</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">&quot;@MachineName&quot;</span> <span class="attr">layout</span>=<span class="string">&quot;$&#123;machinename&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">&quot;@UserId&quot;</span> <span class="attr">layout</span>=<span class="string">&quot;$&#123;event-properties:UserId&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">&quot;@APIPath&quot;</span> <span class="attr">layout</span>=<span class="string">&quot;$&#123;event-properties:APIPath&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">&quot;@Logged&quot;</span> <span class="attr">layout</span>=<span class="string">&quot;$&#123;date&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">&quot;@Level&quot;</span> <span class="attr">layout</span>=<span class="string">&quot;$&#123;level&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">&quot;@Message&quot;</span> <span class="attr">layout</span>=<span class="string">&quot;$&#123;message&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">&quot;@Logger&quot;</span> <span class="attr">layout</span>=<span class="string">&quot;$&#123;logger&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">&quot;@Callsite&quot;</span> <span class="attr">layout</span>=<span class="string">&quot;$&#123;callsite&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">&quot;@Exception&quot;</span> <span class="attr">layout</span>=<span class="string">&quot;$&#123;exception:tostring&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>主要值得注意的是<code>$&#123;event-properties:UserId&#125;</code>及<code>$&#123;event-properties:APIPath&#125;</code>，這邊的<code>key</code>值要對應到<code>WithProperty</code>中的<code>key</code>值。</p>
<ul>
<li>Rules中套用Target設定</li>
</ul>
<p>rules區塊中加入database並且設定level為Error</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">minlevel</span>=<span class="string">&quot;Warn&quot;</span> <span class="attr">writeTo</span>=<span class="string">&quot;database&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>最後要提醒一下，因為APILoggerManager中使用到IIDentityService，IDentityService中又使用到IHttpContextAccessor，因此需於Startup中注入其HttpContextAccessor。</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//以上省略</span></span><br><span class="line">        services.AddHttpContextAccessor();</span><br><span class="line">        <span class="comment">//以下省略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="SchedulerLoggerManager"><a href="#SchedulerLoggerManager" class="headerlink" title="SchedulerLoggerManager"></a>SchedulerLoggerManager</h2><h3 id="NLogScheduler宣告語法"><a href="#NLogScheduler宣告語法" class="headerlink" title="NLogScheduler宣告語法"></a>NLogScheduler宣告語法</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[NLogScheduler](</span><br><span class="line">	[ID] [<span class="type">bigint</span>] <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	[JobID] [<span class="type">varchar</span>](<span class="number">200</span>) <span class="keyword">NULL</span>,</span><br><span class="line">	[MachineName] [nvarchar](<span class="number">200</span>) <span class="keyword">NULL</span>,</span><br><span class="line">	[Logged] [datetime] <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	[Level] [<span class="type">varchar</span>](<span class="number">5</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	[Message] [nvarchar](max) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	[Logger] [nvarchar](<span class="number">300</span>) <span class="keyword">NULL</span>,</span><br><span class="line">	[Properties] [nvarchar](max) <span class="keyword">NULL</span>,</span><br><span class="line">	[Callsite] [nvarchar](<span class="number">300</span>) <span class="keyword">NULL</span>,</span><br><span class="line">	[Exception] [nvarchar](max) <span class="keyword">NULL</span>,</span><br><span class="line"> <span class="keyword">CONSTRAINT</span> [PK_NLogScheduler] <span class="keyword">PRIMARY</span> KEY CLUSTERED </span><br><span class="line">(</span><br><span class="line">	[ID] <span class="keyword">ASC</span></span><br><span class="line">)<span class="keyword">WITH</span> (PAD_INDEX <span class="operator">=</span> OFF, STATISTICS_NORECOMPUTE <span class="operator">=</span> OFF, IGNORE_DUP_KEY <span class="operator">=</span> OFF, ALLOW_ROW_LOCKS <span class="operator">=</span> <span class="keyword">ON</span>, ALLOW_PAGE_LOCKS <span class="operator">=</span> <span class="keyword">ON</span>) <span class="keyword">ON</span> [<span class="keyword">PRIMARY</span>]</span><br><span class="line">) <span class="keyword">ON</span> [<span class="keyword">PRIMARY</span>] TEXTIMAGE_ON [<span class="keyword">PRIMARY</span>]</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXEC</span> sys.sp_addextendedproperty <span class="variable">@name</span><span class="operator">=</span>N<span class="string">&#x27;MS_Description&#x27;</span>, <span class="variable">@value</span><span class="operator">=</span>N<span class="string">&#x27;排程ID&#x27;</span> , <span class="variable">@level0type</span><span class="operator">=</span>N<span class="string">&#x27;SCHEMA&#x27;</span>,<span class="variable">@level0name</span><span class="operator">=</span>N<span class="string">&#x27;dbo&#x27;</span>, <span class="variable">@level1type</span><span class="operator">=</span>N<span class="string">&#x27;TABLE&#x27;</span>,<span class="variable">@level1name</span><span class="operator">=</span>N<span class="string">&#x27;NLogScheduler&#x27;</span>, <span class="variable">@level2type</span><span class="operator">=</span>N<span class="string">&#x27;COLUMN&#x27;</span>,<span class="variable">@level2name</span><span class="operator">=</span>N<span class="string">&#x27;JobID&#x27;</span></span><br><span class="line">GO</span><br></pre></td></tr></table></figure>

<h3 id="SchedulerLoggerManager實作"><a href="#SchedulerLoggerManager實作" class="headerlink" title="SchedulerLoggerManager實作"></a>SchedulerLoggerManager實作</h3><p>筆者這邊環境是使用Hangfire實作相關排程程式，所以會有一些針對Hangfire做的一些客製化作業，先看一下SchedulerLoggerManager實作程式</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SchedulerLoggerManager</span> : <span class="title">ILoggerManager</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Logger _logger = LogManager.GetCurrentClassLogger();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LogDebug</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger.WithProperty(<span class="string">&quot;JobID&quot;</span>, JobContext.JobId)</span><br><span class="line">            .Debug(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LogError</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger.WithProperty(<span class="string">&quot;JobID&quot;</span>, JobContext.JobId)</span><br><span class="line">            .Error(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LogInfo</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger.WithProperty(<span class="string">&quot;JobID&quot;</span>, JobContext.JobId)</span><br><span class="line">            .Info(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LogWarn</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger.WithProperty(<span class="string">&quot;JobID&quot;</span>, JobContext.JobId)</span><br><span class="line">            .Warn(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上程式碼中所使用到的JobContext.JobId則是筆者另外寫的一個可以取得當次<code>Scheduler</code>的<code>JobId</code>名稱，不過筆者這邊是有導入動態排程機制，由資料庫去控制其排程設定值，可以透過<code>JobInitial</code>程式可以重新宣告排程，因此取得JobId部份非常地客製化，參考其結構就可以。</p>
<h3 id="IServerFilter實作"><a href="#IServerFilter實作" class="headerlink" title="IServerFilter實作"></a>IServerFilter實作</h3><p>筆者這邊使用的是Hangfire有開放的IServerFilter實作</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JobContext</span> : <span class="title">IServerFilter</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">ThreadStatic</span>]</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">string</span> _jobId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> JobId &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> _jobId; &#125; <span class="keyword">set</span> &#123; _jobId = <span class="keyword">value</span>; &#125; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnPerformed</span>(<span class="params">PerformedContext filterContext</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnPerforming</span>(<span class="params">PerformingContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 取得context中的某個值當作Logger機制中的識別JobId</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="IServerFilter註冊"><a href="#IServerFilter註冊" class="headerlink" title="IServerFilter註冊"></a>IServerFilter註冊</h3><p>這個IServerFilter實作需要註冊，須於Startup中註冊才會生效</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//以上省略</span></span><br><span class="line">        GlobalConfiguration.Configuration.UseFilter(<span class="keyword">new</span> JobContext());</span><br><span class="line">        <span class="comment">//以下省略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>NLog.Config</code>部份參考其<code>APILoggerManager</code>說明，只要將<code>APILoggerManager</code>客製化屬性去除，新增<code>SchedulerLoggerManager</code>客製化屬性即可。</p>
<h2 id="ExchangeLoggerManager"><a href="#ExchangeLoggerManager" class="headerlink" title="ExchangeLoggerManager"></a>ExchangeLoggerManager</h2><p>該LoggerManager主要運用於Socket相關專案中，筆者這邊負責與五個系統使用Socket串接，對筆者來說主要是可以識別為哪個系統對應的專案log即可，因此只要多加一個欄位為「SystemId」，方便筆者去做一個Filter。</p>
<h3 id="NLogExchange宣告語法"><a href="#NLogExchange宣告語法" class="headerlink" title="NLogExchange宣告語法"></a>NLogExchange宣告語法</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[NLogExchange](</span><br><span class="line">	[ID] [<span class="type">bigint</span>] <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	[SystemId] [<span class="type">varchar</span>](<span class="number">20</span>) <span class="keyword">NULL</span>,</span><br><span class="line">	[MachineName] [nvarchar](<span class="number">200</span>) <span class="keyword">NULL</span>,</span><br><span class="line">	[Logged] [datetime] <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	[Level] [<span class="type">varchar</span>](<span class="number">5</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	[Message] [nvarchar](max) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	[Logger] [nvarchar](<span class="number">300</span>) <span class="keyword">NULL</span>,</span><br><span class="line">	[Properties] [nvarchar](max) <span class="keyword">NULL</span>,</span><br><span class="line">	[Callsite] [nvarchar](<span class="number">300</span>) <span class="keyword">NULL</span>,</span><br><span class="line">	[Exception] [nvarchar](max) <span class="keyword">NULL</span>,</span><br><span class="line"> <span class="keyword">CONSTRAINT</span> [PK_NLogExchange] <span class="keyword">PRIMARY</span> KEY CLUSTERED </span><br><span class="line">(</span><br><span class="line">	[ID] <span class="keyword">ASC</span></span><br><span class="line">)<span class="keyword">WITH</span> (PAD_INDEX <span class="operator">=</span> OFF, STATISTICS_NORECOMPUTE <span class="operator">=</span> OFF, IGNORE_DUP_KEY <span class="operator">=</span> OFF, ALLOW_ROW_LOCKS <span class="operator">=</span> <span class="keyword">ON</span>, ALLOW_PAGE_LOCKS <span class="operator">=</span> <span class="keyword">ON</span>) <span class="keyword">ON</span> [<span class="keyword">PRIMARY</span>]</span><br><span class="line">) <span class="keyword">ON</span> [<span class="keyword">PRIMARY</span>] TEXTIMAGE_ON [<span class="keyword">PRIMARY</span>]</span><br><span class="line">GO</span><br></pre></td></tr></table></figure>

<h3 id="ExchangeLoggerManager實作"><a href="#ExchangeLoggerManager實作" class="headerlink" title="ExchangeLoggerManager實作"></a>ExchangeLoggerManager實作</h3><p>主要是使用筆者設計下的<code>Options</code>參數取得系統名稱，筆者有包裝成一個<code>AddSocketService</code>的<code>Extension</code>，由外層<code>Client</code>使用時方便的使用，但也多個系統共用，需要使用<code>Options</code>參數來控制其對應的設定值。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExchangeLoggerManager</span> : <span class="title">ILoggerManager</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Logger _logger = LogManager.GetCurrentClassLogger();</span><br><span class="line">    <span class="keyword">private</span> SocketSettingOption _socketSettingOption;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExchangeLoggerManager</span>(<span class="params">IOptions&lt;SocketSettingOption&gt; options</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _socketSettingOption = options.Value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LogDebug</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger.WithProperty(<span class="string">&quot;SystemId&quot;</span>, _socketSettingOption.AppId)</span><br><span class="line">            .Debug(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LogError</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger.WithProperty(<span class="string">&quot;SystemId&quot;</span>, _socketSettingOption.AppId)</span><br><span class="line">            .Error(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LogInfo</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger.WithProperty(<span class="string">&quot;SystemId&quot;</span>, _socketSettingOption.AppId)</span><br><span class="line">            .Info(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LogWarn</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger.WithProperty(<span class="string">&quot;SystemId&quot;</span>, _socketSettingOption.AppId)</span><br><span class="line">            .Warn(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>筆者在另一個Socket文章系列中有提及其設計原理，可能要讀者對照著參考，才會理解其中的意義，不過至少在這邊列一下<code>SocketSettinOption</code>物件，詳細說明參考其對應文章:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SocketSettingOption</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> MainSocketSetting &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> SubSocketSetting &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> HubUrlSetting &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Func&lt;List&lt;<span class="built_in">byte</span>&gt;, Tuple&lt;List&lt;<span class="built_in">byte</span>&gt;, List&lt;Byte[]&gt;&gt;&gt; ClientSliceByteFunc &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Func&lt;List&lt;<span class="built_in">byte</span>&gt;, Tuple&lt;List&lt;<span class="built_in">byte</span>&gt;, List&lt;Byte[]&gt;&gt;&gt; ServerSliceByteFunc &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> DisconnectAfterClientReceive &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> AppId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> AppName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ServiceName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> MonitorService &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> ---ForLogging---</span></span><br><span class="line">    <span class="keyword">public</span> Func&lt;<span class="built_in">byte</span>[], Type&gt; GetHeaderResponseModelType &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        = (data) =&gt; &#123; <span class="keyword">return</span> <span class="keyword">typeof</span>(HeaderResponseModel); &#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ConnectionStringKey &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">&quot;FMTR&quot;</span>;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>NLog.Config</code>部份參考其<code>APILoggerManager</code>說明，只要將<code>APILoggerManager</code>客製化屬性去除，新增<code>SchedulerLoggerManager</code>客製化屬性即可。</p>
<h2 id="Client套用"><a href="#Client套用" class="headerlink" title="Client套用"></a>Client套用</h2><h3 id="注入對應的ILoggerManager實作"><a href="#注入對應的ILoggerManager實作" class="headerlink" title="注入對應的ILoggerManager實作"></a>注入對應的ILoggerManager實作</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 以上省略</span></span><br><span class="line">        <span class="comment">// 切換成自己的連線字串</span></span><br><span class="line">        LogManager.Configuration.Variables[<span class="string">&quot;connectionStringNlog&quot;</span>] = <span class="string">&quot;&#123;connectionString&#125;&quot;</span>;</span><br><span class="line">        <span class="comment">// 換成自己要的ILoggerManager實作Service</span></span><br><span class="line">        services.AddTransient&lt;ILoggerManager, APILoggerManager&gt;();</span><br><span class="line">        <span class="comment">// 以下省略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Client的Service端中實際使用"><a href="#Client的Service端中實際使用" class="headerlink" title="Client的Service端中實際使用"></a>Client的Service端中實際使用</h3><p>主要是使用建構值注入的方式取得其<code>ILoggerManager</code>實體</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IFlowService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DoProcess</span>(<span class="params">FlowConditions conditions</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FlowService</span>: <span class="title">IFlowService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILoggerManager _logger;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlowService</span>(<span class="params">ILoggerManager logger</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger = logger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoProcess</span>(<span class="params">FlowConditions conditions</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger.LogInfo(<span class="string">&quot;Flow do process start!&quot;</span>);</span><br><span class="line">        <span class="comment">// business logic</span></span><br><span class="line">        _logger.LogInfo(<span class="string">&quot;Flow do process end!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>筆者透過將不同需求分類的方式將NLog做一個有效的分類，Log資料量分開之外，查問題時更清楚自己要查的資料，可以有效的查詢問題，藉由設計客製化欄位，對於NLog掌握度更高了。</p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>nlog</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]NLog使用</title>
    <url>/2021/08/23/nlog/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者因處在比較嚴格的金融業中，撰寫的資訊系統上線後，追蹤系統作業面，只能靠強而有力的Log機制來追縱問題，以利快速找出問題所在，包含<code>sql log</code>、<code>ap log</code>以及<code>error log</code>，最好發生Error時寄信的方式通知。筆者本身推崇不重新造輪子，基本上訪間已經有很多很成熟的<code>logging框架</code>，<code>dotnet core</code>中也不乏候選套件:<code>NLog</code>、<code>SeriLog</code>、<code>Log4net</code>等等，筆者選擇NLog當作主要Logging機制的底層框架。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><h2 id="安裝NLog相關套件"><a href="#安裝NLog相關套件" class="headerlink" title="安裝NLog相關套件"></a>安裝NLog相關套件</h2><p>NLog，屬眾多Log套件其中一種，主要搭配一個nlog.config，依照其設定執行Log作業，因此主要安裝套件如下：</p>
<ul>
<li>NLog</li>
<li>NLog.Config</li>
<li>NLog.Web.AspNetCore</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet add package NLog</span><br><span class="line">dotnet add package NLog.Config</span><br><span class="line">dotnet add package NLog.Web.AspNetCore</span><br></pre></td></tr></table></figure>

<h2 id="NLog-Config設置"><a href="#NLog-Config設置" class="headerlink" title="NLog.Config設置"></a>NLog.Config設置</h2><p>安裝完成後編輯nlog.config檔案，記得將其屬性中的Copy To Output Directory選為Copy always選項。主要有兩個區塊要去設定：targets及rules；targets部份則設定輸出形式，可以設定多個；rules部份則設定套用規則。</p>
<p>筆者這邊簡單舉個例子，假設targets部份有兩個輸出形式：檔案及資料庫，rules套用規則部份，我們可以這樣設定，Info等級以上的輸出於檔案中，Error等級以上才需輸出於資料庫中，意即重要錯誤資訊再塞到資料庫中即可，畢竟資料庫空間比較值錢。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nlog</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.nlog-project.org/schemas/NLog.xsd&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">autoReload</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">throwExceptions</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">internalLogLevel</span>=<span class="string">&quot;Off&quot;</span> <span class="attr">internalLogFile</span>=<span class="string">&quot;c:\temp\nlog-internal.log&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- optional, add some variables</span></span><br><span class="line"><span class="comment">  https://github.com/nlog/NLog/wiki/Configuration-file#variables</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">&quot;myvar&quot;</span> <span class="attr">value</span>=<span class="string">&quot;myvalue&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  See https://github.com/nlog/nlog/wiki/Configuration-file</span></span><br><span class="line"><span class="comment">  for information on customizing logging rules and outputs.</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">targets</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">xsi:type</span>=<span class="string">&quot;File&quot;</span> <span class="attr">name</span>=<span class="string">&quot;f&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;basedir&#125;/logs/$&#123;shortdate&#125;.log&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">layout</span>=<span class="string">&quot;$&#123;longdate&#125; $&#123;uppercase:$&#123;level&#125;&#125; $&#123;message&#125;&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">targets</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">rules</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- add your logging rules here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">minlevel</span>=<span class="string">&quot;Info&quot;</span> <span class="attr">writeTo</span>=<span class="string">&quot;f&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">rules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nlog</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="NLog套用"><a href="#NLog套用" class="headerlink" title="NLog套用"></a>NLog套用</h2><p>將NLog初始化於Program.cs中</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> NLog.Web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> &#123;</span><br><span class="line">			<span class="comment">// Confi註冊</span></span><br><span class="line">      NLogBuilder.ConfigureNLog(<span class="string">&quot;NLog.config&quot;</span>).GetCurrentClassLogger();</span><br><span class="line">      CreateHostBuilder(args).Build().Run();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IHostBuilder <span class="title">CreateHostBuilder</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> =&gt;</span><br><span class="line">      Host.CreateDefaultBuilder(args)</span><br><span class="line">      .ConfigureWebHostDefaults(webBuilder =&gt; &#123;</span><br><span class="line">          webBuilder.UseStartup&lt;Startup&gt;();</span><br><span class="line">      &#125;)</span><br><span class="line">      .UseNLog();<span class="comment">// NLog註冊</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Client端套用"><a href="#Client端套用" class="headerlink" title="Client端套用"></a>Client端套用</h2><p>使用NLog，只要於每個Class最上方宣告</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> NLog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Logger _logger = LogManager.GetCurrentClassLogger();</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>使用NLog超級容易，生態圈也很豐富，要以Database形式存紀錄，或者寄信通知紀錄等等皆有現成的套件可以使用，筆者覺得說它是Loggin入門套件一點也不為過。</p>
<p>參考</p>
<ul>
<li><a href="https://github.com/NLog/NLog/wiki/Getting-started-with-ASP.NET-Core-5">https://github.com/NLog/NLog/wiki/Getting-started-with-ASP.NET-Core-5</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>nlog</tag>
      </tags>
  </entry>
  <entry>
    <title>[MySQL]範例資料庫設定</title>
    <url>/2021/08/23/mysql-sample-db/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者上篇介紹完MySQL安裝與設定後，這篇則是紀錄安裝範例資料，筆者使用<a href="https://www.mysqltutorial.org/">MySQL Tutorial</a>所使用的範例資料，安裝範例資料庫也是參考該網站上面的兩篇文章，詳細資料庫中的相關資料表內容，可以觀看參考中兩篇文章的詳細內容。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><h2 id="下載範例資料庫產生語法"><a href="#下載範例資料庫產生語法" class="headerlink" title="下載範例資料庫產生語法"></a>下載範例資料庫產生語法</h2><p>至<a href="https://www.mysqltutorial.org/wp-content/uploads/2018/03/mysqlsampledatabase.zip">MySQL Sample Data</a>，下載後解壓縮備著。</p>
<h2 id="執行建立範例資料庫語法"><a href="#執行建立範例資料庫語法" class="headerlink" title="執行建立範例資料庫語法"></a>執行建立範例資料庫語法</h2><p>首先使用<code>command line</code>進入<code>mysql cli</code>介面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<blockquote>
<p>以下皆為已進入MySQL cli後進行</p>
</blockquote>
<p>使用<code>source</code>指令載入剛剛下載的建立範例資料庫語法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 路徑改為解壓縮檔案路徑</span></span><br><span class="line"><span class="built_in">source</span> ~/Downloads/mysqlsampledatabase.sql</span><br></pre></td></tr></table></figure>

<p>使用<code>show databases;</code>指令觀看是否載入成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure>

<img src="/2021/08/23/mysql-sample-db/ShowDatabases.png" class="" title="[ShowDatabases]">

<h2 id="使用GUI軟體觀看資料庫"><a href="#使用GUI軟體觀看資料庫" class="headerlink" title="使用GUI軟體觀看資料庫"></a>使用GUI軟體觀看資料庫</h2><p>筆者這邊使用<a href="https://dbeaver.io/download/">DBeaver Community</a>，安裝方式就不在這邊贅述了。</p>
<ol>
<li><p>資料庫選擇MySql</p>
<img src="/2021/08/23/mysql-sample-db/ChooseMySQL.png" class="" title="[ChooseMySQL]"></li>
<li><p>設定連線字串並測試連線</p>
<img src="/2021/08/23/mysql-sample-db/SettingConnection.png" class="" title="[SettingConnection]"></li>
<li><p>完成後看到<code>classicmodels</code>資料庫了</p>
<img src="/2021/08/23/mysql-sample-db/classicmodels-table.png" class="" title="[classictable]"></li>
</ol>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>終於完成範例資料庫的建立了，筆者可以好好的撰寫資料庫相關的技術文章了，太棒了。</p>
<p>參考<br><a href="https://www.mysqltutorial.org/how-to-load-sample-database-into-mysql-database-server.aspx">Load Sample Database to MySQL Server</a><br><a href="https://www.mysqltutorial.org/mysql-sample-database.aspx">MySQL Sample Database</a></p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>[MySQL]安裝與設定</title>
    <url>/2021/08/23/mysql-install/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者想要將所學技術紀錄於部落格中，若撰寫資料庫相關套件介紹文章時，因牽扯到公司機密性，需要用自己建立的範例資料庫，筆者這邊環境是Windows跟Mac都有，但一般平常帶出去都是Mac，畢竟電量樂勝，因此也常有機會使用Mac撰寫部落格文章，撰寫相關的demo code時需要連線至實際資料庫，最好是Windows、Mac環境通用的資料庫，筆者選擇MySQL，因此這篇要來介紹在Mac環境中MySQL安裝與設定。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><h2 id="透過brew安裝mysql"><a href="#透過brew安裝mysql" class="headerlink" title="透過brew安裝mysql"></a>透過brew安裝mysql</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install mysql</span><br></pre></td></tr></table></figure>

<h2 id="啟動mysql服務"><a href="#啟動mysql服務" class="headerlink" title="啟動mysql服務"></a>啟動mysql服務</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew services start mysql</span><br></pre></td></tr></table></figure>

<p>使用root登入並更改root密碼</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root</span><br><span class="line"><span class="comment"># 以下為mysql環境中執行</span></span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;密碼&#x27;</span>;</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<p>確認更改密碼是否有效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line"><span class="comment"># 出現password輸入提示，輸入密碼後可以進入mysql環境表示設定成功</span></span><br></pre></td></tr></table></figure>

<h2 id="安裝管理介面"><a href="#安裝管理介面" class="headerlink" title="安裝管理介面"></a>安裝管理介面</h2><p>看到部落格上推薦的<code>sequel pro</code> 來試用看看，免費，不過可以捐錢給作者：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install --cask sequel-pro</span><br></pre></td></tr></table></figure>

<h2 id="錯誤處理"><a href="#錯誤處理" class="headerlink" title="錯誤處理"></a>錯誤處理</h2><p>若遇到以下錯誤訊息，筆者使用<code>sequel pro</code>這套軟體連線時出現該錯誤訊息的：</p>
<blockquote>
<p>Authentication plugin ‘caching_sha2_password’ cannot be loaded</p>
</blockquote>
<p>請使用以下指令修復</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;密碼&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>筆者將安裝過程紀錄於此，以便下次需要用到時參考，當然筆者這個作法對照現在來看，已經落伍，應該要嘗試使用<code>docker image</code>的方式，等筆者把公司做的相關技術文章打完，再來撰寫docker系列文章吧，敬請期待。</p>
<p>參考</p>
<ul>
<li><a href="https://www.jianshu.com/p/9a645c473676">https://www.jianshu.com/p/9a645c473676</a></li>
<li><a href="https://www.notion.so/5ada6a254804c33dbebbca4161277836">https://gist.github.com/joeyklee/5ada6a254804c33dbebbca4161277836</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>[RabbitMQ]安裝及設定</title>
    <url>/2021/08/21/rabbitmq-install/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p><code>RabbitMQ</code>是實現<code>AMQP(Advanced Message Queuing Protocol)</code>的伺服器，使用<code>Er lang</code>撰寫而成，且提供<code>HA</code>及分散式架構的設定，官網就提供大量不同程式語言的連線及操作範例程式，入門門檻瞬間變低，若要進階設定HA則需要在花比較多時間研究及實戰經驗，這篇主要以安裝及設定方面著墨安裝步驟。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>首先因為<code>RabbitMQ</code>使用<code>ER Lang</code>撰寫而成，需要安裝執行環境，因此需先設定<code>ER Lang</code>的環境:</p>
<h2 id="ERLang安裝及設定"><a href="#ERLang安裝及設定" class="headerlink" title="ERLang安裝及設定"></a>ERLang安裝及設定</h2><p>ERLang安裝檔案下載連結</p>
<p><a href="https://www.erlang.org/news/135">Erlang Programming Language</a></p>
<img src="/2021/08/21/rabbitmq-install/Untitled.png" class="" title="[ErlangInstallOptions]">

<img src="/2021/08/21/rabbitmq-install/Untitled1.png" class="" title="[ErlanInstallPercentage]">

<p>設定ERLang環境變數(新增系統變數)</p>
<blockquote>
<p>ERLANG_HOME C:\Program Files\erl10.6</p>
</blockquote>
<img src="/2021/08/21/rabbitmq-install/Untitled2.png" class="" title="[ErlanEnvironmentPath]">

<h2 id="Rabbit-MQ安裝及設定"><a href="#Rabbit-MQ安裝及設定" class="headerlink" title="Rabbit MQ安裝及設定"></a>Rabbit MQ安裝及設定</h2><h3 id="使用choco安裝"><a href="#使用choco安裝" class="headerlink" title="使用choco安裝"></a>使用choco安裝</h3><p><a href="https://chocolatey.org/packages/rabbitmq">RabbitMQ 3.8.2</a></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">choco install rabbitmq</span><br></pre></td></tr></table></figure>

<h3 id="使用安裝檔案安裝"><a href="#使用安裝檔案安裝" class="headerlink" title="使用安裝檔案安裝"></a>使用安裝檔案安裝</h3><p>下載連結</p>
<p><a href="https://www.rabbitmq.com/install-windows.html">Installing on Windows</a></p>
<img src="/2021/08/21/rabbitmq-install/Untitled3.png" class="" title="[RabbitMQInstallOptions]">

<img src="/2021/08/21/rabbitmq-install/Untitled4.png" class="" title="[RabbitMQInstallAlert]">

<img src="/2021/08/21/rabbitmq-install/Untitled5.png" class="" title="[RabbitMQInstallPercentage]">

<img src="/2021/08/21/rabbitmq-install/Untitled6.png" class="" title="[RabbitMQInstallComplete]">

<h2 id="Rabbit-MQ設定及開啟管理介面"><a href="#Rabbit-MQ設定及開啟管理介面" class="headerlink" title="Rabbit MQ設定及開啟管理介面"></a>Rabbit MQ設定及開啟管理介面</h2><p>開啟Command line介面，筆者這邊以 <a href="https://cmder.net/">cmder</a>為例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 進入Rabbit MQ bat檔案路徑</span><br><span class="line"><span class="built_in">cd</span> C:\Program Files\RabbitMQ Server\rabbitmq_server-3.8.2\sbin</span><br><span class="line"></span><br><span class="line">// 開啟管理介面</span><br><span class="line">rabbitmq-plugins.bat <span class="built_in">enable</span> rabbitmq_management</span><br><span class="line"></span><br><span class="line">// 重起服務</span><br><span class="line">net stop rabbitmq &amp;&amp; net start rabbitmq</span><br></pre></td></tr></table></figure>

<img src="/2021/08/21/rabbitmq-install/Untitled7.png" class="" title="[RabbitMQOpenManagement]">

<p>接著打開瀏覽器，輸入 <a href="http://localhost:15672/">http://localhost:15672</a></p>
<img src="/2021/08/21/rabbitmq-install/Untitled8.png" class="" title="[RabbitMQSuccess]">

<p>出現以上的畫面，就恭喜你，你已經安裝成功了。預設登入者為</p>
<blockquote>
<p>帳號： guest</p>
</blockquote>
<blockquote>
<p>密碼： guest</p>
</blockquote>
<img src="/2021/08/21/rabbitmq-install/Untitled9.png" class="" title="[RabbitMQPage]">

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>開啟圖形化管理介面後，基本上都可以透過管理網頁新增、編輯、刪除Queue相關的設定。這篇主要介紹到這邊，架一個<code>RabbitMQ</code>的步驟不會說太困難，留下筆記的同時，希望有幫助到有需求安裝<code>RabbitMQ</code>的朋友。</p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>message queue</category>
      </categories>
      <tags>
        <tag>rabbitmq</tag>
        <tag>message queue</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]Batch檔案執行及追縱</title>
    <url>/2021/08/21/dotnetcore-batch/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者因為工作環境需要跟多個系統做串接，因最近參與的大系統，必須在某一塊作業使用外部廠商系統，需要透過各種介接方式做資料上的串接，例如﹔需要與廠商平台上面撰寫外掛程式，呼叫我們寫好的API，做為資料同步，這不在這篇的講的內容就不往下深入討論，另一種可能是我們在某些情境下，某個時段，需要驅動廠商系統進行其作業，廠商系統也有開放<code>batch file</code>，讓我們方便去執行。</p>
<span id="more"></span>

<p>上述中的第二種執行<code>batch file</code>變得格外繁瑣，為何這樣說呢，讓筆者娓娓道來，為各系統間不要互相影響，一定將各系統隔開，，試想若把各種不同系統都放在同一台，若該台伺服器遇到甚麼問題，其不就是自找死路，完全運作不下去。基於各種理由會將外部廠商系統獨立於一台伺服器中，這樣問題就來了，第一是<code>batch file</code>是一個落地的檔案，要由另一台伺服器(筆者部門的系統)去觸發執行該<code>batch file</code>，且也要能夠追蹤其執行狀況，因為有可能該bat作業會產生檔案，筆者部門系統需要該檔案做後續作業。</p>
<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>介紹完情境後，開始來思考一件事情，我們需要完成哪些事情，如下:</p>
<ul>
<li>通知執行</li>
<li>執行Batch file</li>
<li>執行結果監聽</li>
</ul>
<h2 id="通知執行"><a href="#通知執行" class="headerlink" title="通知執行"></a>通知執行</h2><p>通知執行部分，由諸多選擇，利用<code>SignalR</code>類的 <code>web socket</code>通訊、利用<code>Message Queue</code>、利用<code>資料庫pooling</code>方式，基本上前兩種為留下軌跡紀錄，必須搭配資料庫做紀錄查詢，筆者這邊索性選擇最後一種資料庫Pooling的方式，當然也可以透過<code>SqlDependency</code>的方式監聽資料表的變化，因該方式牽扯到資料庫權限問題，筆者公司環境不允許AP端擁有過高的資料庫權限，僅能有讀寫權限，只能放棄作罷。筆者會會再寫一篇單獨介紹<code>SqlDependency</code>的文章，到時再詳細討論。</p>
<p>基本上是設計一張資料表存放欲執行的<code>batch file</code>路徑及檔名，以及執行完成後產生的檔案路徑及名稱，筆者工作環境需要由產生檔案的資料做一些邏輯處理，會再加一些執行<code>Store Procedure</code>的設定欄位。對應物件設計如下</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">BatchLog</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> BatchId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> BatFilePath &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> BatFileName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">// batch file執行完畢後產生檔案路徑及名稱</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ResultFilePath &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ResultFileName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">// 因為要解析產生檔案，資料部分可能會有表頭，其設定為資料列從哪一列開始</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span>? DataStartRow &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">// 以下為筆者工作環境中用到的解析邏輯相關設定，這就因人而異</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CapPublishName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CapPublishParaFname &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CapPublishParaDataDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Result &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ErrorMessage &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> AuditUser &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DateTime? AuditTime &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="執行Batch-File"><a href="#執行Batch-File" class="headerlink" title="執行Batch File"></a>執行Batch File</h2><p>基本上外部廠商系統，已把執行邏輯包成一個<code>batch file</code>，筆者負責部份使用<code>command line</code>模式下執行該<code>batch file</code>即可。需要用到<code>ProcessStartInfo</code>及<code>Process</code>這兩個類別，參考如下:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> processStartInfo = <span class="keyword">new</span> ProcessStartInfo(<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">$&quot;/c <span class="subst">&#123;_batchLog.BatFileName&#125;</span>&quot;</span>);</span><br><span class="line">    processStartInfo.CreateNoWindow = <span class="literal">true</span>;</span><br><span class="line">    processStartInfo.UseShellExecute = <span class="literal">false</span>;</span><br><span class="line">    processStartInfo.RedirectStandardError = <span class="literal">true</span>;</span><br><span class="line">    processStartInfo.RedirectStandardOutput = <span class="literal">true</span>;</span><br><span class="line">    processStartInfo.WorkingDirectory = _nxbatLog.BatFilePath;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> _process = Process.Start(processStartInfo);</span><br><span class="line">    _process.OutputDataReceived += OutputDataReceived;</span><br><span class="line">    _process.ErrorDataReceived += ErrorDataReceived;</span><br><span class="line">    _process.EnableRaisingEvents = <span class="literal">true</span>;</span><br><span class="line">    _process.Exited += Exited;</span><br><span class="line">    _process.BeginErrorReadLine();</span><br><span class="line">    _process.BeginOutputReadLine();</span><br><span class="line">    _process.WaitForExit();</span><br><span class="line">    _process.Close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ErrorDataReceived</span>(<span class="params"><span class="built_in">object</span> sender, DataReceivedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// logic</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OutputDataReceived</span>(<span class="params"><span class="built_in">object</span> sender, DataReceivedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// logic</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Exited</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// logic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="執行結果監聽"><a href="#執行結果監聽" class="headerlink" title="執行結果監聽"></a>執行結果監聽</h2><p>上節式碼部份，需要說明一下，筆者測驗的結果，需要配合設定才會有相對應的<code>event</code>事件觸發，須注意一下有些是針對<code>ProcessStartInfo</code>的設定，有些是對<code>Process</code>的設定，需釐清楚:</p>
<h3 id="Error通知事件"><a href="#Error通知事件" class="headerlink" title="Error通知事件"></a>Error通知事件</h3><p>Error通知事件要特別注意，經由筆者測試發現，即便<code>batch file</code>執行完成後，<code>exitcode</code>為<code>0</code>，仍觸發<code>ErrorDataReceived</code>事件，最保險的方式是裡頭再判斷<code>string.IsNullOrEmpty(e.Data) == false</code>才做接下來要做的事情。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 須將該設定設為true</span></span><br><span class="line">processStartInfo.RedirectStandardError = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 以下掛載event才會作用</span></span><br><span class="line">_process.ErrorDataReceived += ErrorDataReceived;</span><br><span class="line"><span class="comment">// event觸發後處理邏輯</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ErrorDataReceived</span>(<span class="params"><span class="built_in">object</span> sender, DataReceivedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// logic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Output通知事件"><a href="#Output通知事件" class="headerlink" title="Output通知事件"></a>Output通知事件</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 須將該設定設為true</span></span><br><span class="line">processStartInfo.RedirectStandardOutput = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 以下掛載event才會作用</span></span><br><span class="line">_process.OutputDataReceived += OutputDataReceived;</span><br><span class="line"><span class="comment">// event觸發後處理邏輯</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OutputDataReceived</span>(<span class="params"><span class="built_in">object</span> sender, DataReceivedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// logic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="結束通知事件"><a href="#結束通知事件" class="headerlink" title="結束通知事件"></a>結束通知事件</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 須將該設定設為true</span></span><br><span class="line">_process.EnableRaisingEvents = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 以下掛載event才會作用</span></span><br><span class="line">_process.Exited += Exited;</span><br><span class="line"><span class="comment">// event觸發後處理邏輯</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Exited</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// logic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>筆者不免俗的利用<code>event</code>, <code>action</code>對最終端使用開放擴充性，附上完整程式碼:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyBatchJob</span> : <span class="title">IDisposable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Logger _logger = LogManager.GetCurrentClassLogger();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> BatchLog _batchLog;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;BatchLog , DataReceivedEventArgs&gt; MyOutputDataReceived;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;BatchLog , DataReceivedEventArgs&gt; MyErrorDataReceived;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;BatchLog , <span class="built_in">int</span>, EventArgs&gt; MyExited;</span><br><span class="line">    <span class="keyword">private</span> Process _process;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyBatchJob</span>(<span class="params">BatchLog batchLog</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _batchLog= batchLog;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> processStartInfo = <span class="keyword">new</span> ProcessStartInfo(<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">$&quot;/c <span class="subst">&#123;_batchLog.BatFileName&#125;</span>&quot;</span>);</span><br><span class="line">        processStartInfo.CreateNoWindow = <span class="literal">true</span>;</span><br><span class="line">        processStartInfo.UseShellExecute = <span class="literal">false</span>;</span><br><span class="line">        processStartInfo.RedirectStandardError = <span class="literal">true</span>;</span><br><span class="line">        processStartInfo.RedirectStandardOutput = <span class="literal">true</span>;</span><br><span class="line">        processStartInfo.WorkingDirectory = _batchLog.BatFilePath;</span><br><span class="line"></span><br><span class="line">        _process = Process.Start(processStartInfo);</span><br><span class="line">        _process.OutputDataReceived += OutputDataReceived;</span><br><span class="line">        _process.ErrorDataReceived += ErrorDataReceived;</span><br><span class="line">        _process.EnableRaisingEvents = <span class="literal">true</span>;</span><br><span class="line">        _process.Exited += Exited;</span><br><span class="line">        _process.BeginErrorReadLine();</span><br><span class="line">        _process.BeginOutputReadLine();</span><br><span class="line">        _process.WaitForExit();</span><br><span class="line">        _process.Close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ErrorDataReceived</span>(<span class="params"><span class="built_in">object</span> sender, DataReceivedEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MyErrorDataReceived(_batchLog, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OutputDataReceived</span>(<span class="params"><span class="built_in">object</span> sender, DataReceivedEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MyOutputDataReceived(_batchLog, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Exited</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MyExited(_batchLog, _process.ExitCode, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger.Info(<span class="string">$&quot;[MyBatchJob Dispose]!!&quot;</span>);</span><br><span class="line">        _process.Dispose();</span><br><span class="line">        <span class="comment">// Suppress finalization.</span></span><br><span class="line">        GC.SuppressFinalize(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Client端使用"><a href="#Client端使用" class="headerlink" title="Client端使用"></a>Client端使用</h2><p>最終使用端使用起來也很簡便，如下:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// item為BatchLog類別</span></span><br><span class="line"><span class="keyword">var</span> myBatchJob = <span class="keyword">new</span> MyBatchJob(item);</span><br><span class="line">myBatchJob .MyOutputDataReceived += MyOutputDataReceived;</span><br><span class="line">myBatchJob .MyErrorDataReceived += MyErrorDataReceived;</span><br><span class="line">myBatchJob .MyExited += MyExited;</span><br><span class="line">myBatchJob .Execute();</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>筆者因工作環境需要執行<code>batch file</code>，藉機熟悉一下平常比較少使用到的<code>ProcessStartInfo</code>及<code>Process</code>，也因資料庫Pooling及Log，徹底研究了一下對應事件觸發及其設定方式，可以說是以後有類似的需求時，不用再爾外花時間研究其運作方式，基本上筆者程式碼片段中，可以將<code>BatchLog</code>改成<code>泛型T</code>基本上可以變成通用型，也不怕每份工作的不同資料結構設計。</p>
<p>參考</p>
<ul>
<li><a href="https://docs.microsoft.com/zh-tw/dotnet/api/system.diagnostics.processstartinfo?view=netcore-3.1">https://docs.microsoft.com/zh-tw/dotnet/api/system.diagnostics.processstartinfo?view=netcore-3.1</a></li>
<li><a href="https://docs.microsoft.com/zh-tw/dotnet/api/system.diagnostics.process?view=netcore-3.1">https://docs.microsoft.com/zh-tw/dotnet/api/system.diagnostics.process?view=netcore-3.1</a></li>
</ul>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>
]]></content>
      <categories>
        <category>dotnetcore</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>bat</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]Socket程式實作-切割封包</title>
    <url>/2021/08/21/dotnetcore-socket-slicing/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>為什麼會談到封包切割時做這個議題呢，底層元件基本上會有一個超大buffer去裝載收到的封包，並觸發<code>OnReceive</code>事件，到筆者這邊的底層元件則是最原始的封包，不過該套件也會順便丟出<code>offset</code>及<code>size</code>，讓筆者知道要怎麼取得這次的有意義的封包。接著可以想一個情境，試想你是一個Server，會有多個Client跟你進行連線，連線必會發生封包傳輸，底層元件使用一個超大buffer裝載封包，試想同時收到多個Client端的情求，如何辨別有效的每一段封包，這時封包切割邏輯就顯得重要了。</p>
<span id="more"></span>
<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>以筆者剛出社會時也實作過<code>Socket</code>相關程式，基本上都會將封包設計成知道該<code>byte</code>內容為多少，表示該封包已結束，可以進行處理了，這只是一種方式，有千千萬萬種的設計。筆者目前的公司會設計封包開頭幾個<code>byte</code>位置的內容即整段<code>封包的長度</code>，取得這幾個<code>byte</code>位置的內容，讓筆者有一個切割封包的依據。</p>
<h2 id="封包切割方法"><a href="#封包切割方法" class="headerlink" title="封包切割方法"></a>封包切割方法</h2><p>筆者就照這樣設計一個封包切割的方法，但是要注意一點是筆者撰寫的底層元件是要給各個需要<code>Socket</code>功能Client端使用，基本上不一應該寫死封包切割方法，這時<code>Func</code>就派上用場了，若外部有傳入<code>Func</code>實作方法就使用該方法，若無則使用底層元件已寫好的切割方法。先貼上底層元件的封包切割方法﹔</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Tuple&lt;List&lt;<span class="built_in">byte</span>&gt;, List&lt;<span class="built_in">byte</span>[]&gt;&gt; CommSlicingByteFunc(List&lt;<span class="built_in">byte</span>&gt; source)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">new</span> Tuple&lt;List&lt;<span class="built_in">byte</span>&gt;, List&lt;<span class="built_in">byte</span>[]&gt;&gt;(<span class="keyword">new</span> List&lt;<span class="built_in">byte</span>&gt;(), <span class="keyword">new</span> List&lt;<span class="built_in">byte</span>[]&gt;());</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (source.Count &gt; <span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> totalLength = <span class="built_in">int</span>.Parse(CoreHelper.Encoding.GetString(ByteExtensions.GetSubByte(source.ToArray(), <span class="number">0</span>, <span class="number">4</span>)));</span><br><span class="line">            _logger.Info(<span class="string">$&quot;[Total Length]: <span class="subst">&#123;totalLength&#125;</span>&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (totalLength &lt;= source.Count)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> subBytes = <span class="keyword">new</span> <span class="built_in">byte</span>[totalLength];</span><br><span class="line">                System.Buffer.BlockCopy(source.ToArray(), <span class="number">0</span>, subBytes, <span class="number">0</span>, totalLength);</span><br><span class="line">                _logger.Info(<span class="string">$&quot;[Sub byte]: <span class="subst">&#123;CoreHelper.Encoding.GetString(subBytes)&#125;</span>&quot;</span>);</span><br><span class="line">                <span class="keyword">var</span> newQueue = ByteExtensions.GetSubByte(source.ToArray(), totalLength, source.Count - totalLength);</span><br><span class="line">                _logger.Info(<span class="string">$&quot;[newQueue]: <span class="subst">&#123;CoreHelper.Encoding.GetString(newQueue)&#125;</span>&quot;</span>);</span><br><span class="line">                source = <span class="keyword">new</span> List&lt;<span class="built_in">byte</span>&gt;();</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; newQueue.Length; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    source.Add(newQueue[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                result.Item2.Add(subBytes);</span><br><span class="line">                <span class="keyword">if</span> (newQueue.Length &gt; <span class="number">4</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    totalLength = <span class="built_in">int</span>.Parse(CoreHelper.Encoding.GetString(ByteExtensions.GetSubByte(newQueue, <span class="number">0</span>, <span class="number">4</span>)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        _logger.Error(<span class="string">$&quot;[CommSlicingByteFunc]: <span class="subst">&#123;ex&#125;</span>&quot;</span>);</span><br><span class="line">        <span class="comment">//throw;</span></span><br><span class="line">        result.Item2.Add(source.ToArray());</span><br><span class="line">        source = <span class="keyword">new</span> List&lt;<span class="built_in">byte</span>&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> source)</span><br><span class="line">    &#123;</span><br><span class="line">        result.Item1.Add(item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>簡單解釋一下上述程式碼，我會先把前四碼封包內容解讀出來當作是切割的依據，切割完的封包加入至回傳封包資料集中，剩下的封包中繼續使用該方法切割到不能切割為止，若切割有錯誤當作byte內容有誤，整包原封不動往外拋出。</p>
<h2 id="套用外部傳入之封包切割方法"><a href="#套用外部傳入之封包切割方法" class="headerlink" title="套用外部傳入之封包切割方法"></a>套用外部傳入之封包切割方法</h2><p>筆者當初設計時有些參數是從外部傳入，類似像<code>Socket</code>設定，<code>IP、Port</code>等等資訊，將包裝成<code>IOptions</code>項目，筆者於<code>SocketServiceRegistration</code>中設定，這樣任何物件中只要注入對應的<code>IOptions</code>項目即可使用外部傳入之參數，筆者這邊使用的物件為</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SocketSettingOption</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> MainSocketSetting &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> SubSocketSetting &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> HubUrlSetting &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 封包切割方法</span></span><br><span class="line">    <span class="keyword">public</span> Func&lt;List&lt;<span class="built_in">byte</span>&gt;, Tuple&lt;List&lt;<span class="built_in">byte</span>&gt;, List&lt;Byte[]&gt;&gt;&gt; ClientSliceByteFunc &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Func&lt;List&lt;<span class="built_in">byte</span>&gt;, Tuple&lt;List&lt;<span class="built_in">byte</span>&gt;, List&lt;Byte[]&gt;&gt;&gt; ServerSliceByteFunc &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> DisconnectAfterClientReceive &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> AppId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> AppName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ServiceName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> MonitorService &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> ---ForLogging---</span></span><br><span class="line">    <span class="keyword">public</span> Func&lt;<span class="built_in">byte</span>[], Type&gt; GetHeaderResponseModelType &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        = (data) =&gt; &#123; <span class="keyword">return</span> <span class="keyword">typeof</span>(HeaderResponseModel); &#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ConnectionStringKey &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">&quot;FMTR&quot;</span>;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用方式為建構式中注入，並判斷是否為null，若為非<code>null</code>則使用外部串入之切割方法</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BaseClient.cs</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> MyTcpClient _client;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BaseClient</span>(<span class="params">IAnalyzeService analyzeService</span></span></span><br><span class="line"><span class="params"><span class="function">            , IOptions&lt;SocketSettingOption&gt; socketSettingOption</span></span></span><br><span class="line"><span class="params"><span class="function">            , IConfiguration config</span></span></span><br><span class="line"><span class="params"><span class="function">            , SocketSettingType socketSettingType</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">		<span class="comment">// ...以上省略</span></span><br><span class="line">		<span class="keyword">if</span> (options.ClientSliceByteFunc != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">				<span class="comment">// 若為非null則指定該切割方法</span></span><br><span class="line">        _client.SliceByteFunc = options.ClientSliceByteFunc;</span><br><span class="line">    &#125;</span><br><span class="line">		<span class="comment">// ...以下省略</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// MyTcpClient.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyTcpClient</span> : <span class="title">NetCoreServer.TcpClient</span></span><br><span class="line">&#123;</span><br><span class="line">		<span class="comment">// ...以上省略</span></span><br><span class="line"></span><br><span class="line">		<span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 切割byte內容</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> Func&lt;List&lt;<span class="built_in">byte</span>&gt;, Tuple&lt;List&lt;<span class="built_in">byte</span>&gt;, List&lt;Byte[]&gt;&gt;&gt; SliceByteFunc;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">MyTcpClient</span>(<span class="params">IPAddress address, <span class="built_in">int</span> port</span></span></span><br><span class="line"><span class="params"><span class="function">            , IOptions&lt;SocketSettingOption&gt; options</span>) : <span class="title">base</span>(<span class="params">address, port</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (SliceByteFunc == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">						<span class="comment">// 若為null則使用預設的切割方法</span></span><br><span class="line">            SliceByteFunc = ByteExtensions.CommSlicingByteFunc;</span><br><span class="line">        &#125;</span><br><span class="line">        _socketSetting = options.Value;</span><br><span class="line">    &#125;</span><br><span class="line">		<span class="comment">// ...以下省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Client端使用方式"><a href="#Client端使用方式" class="headerlink" title="Client端使用方式"></a>Client端使用方式</h2><p>Client端使用方式參考，若自己切割方法與底層元件不符則自己宣告切割邏輯。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">services.AddMySocket(option =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...以上省略</span></span><br><span class="line">    option.ClientSliceByteFunc = ((source) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="keyword">new</span> Tuple&lt;List&lt;<span class="built_in">byte</span>&gt;, List&lt;<span class="built_in">byte</span>[]&gt;&gt;(<span class="keyword">new</span> List&lt;<span class="built_in">byte</span>&gt;(), <span class="keyword">new</span> List&lt;<span class="built_in">byte</span>[]&gt;());</span><br><span class="line">        result.Item2.Add(source.ToArray());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// ...以下省略 </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>筆者自從會使用<code>Func、Event、Action</code>這三個資料型別後，真的是有一種挖到寶的感覺，尤其是筆者偏向撰寫底層元件為主，為底層元件的邏輯處理更有彈性，且具有擴充性。</p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>socket</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>socket</tag>
        <tag>netcoreserver</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]Socket程式實作-解析封包</title>
    <url>/2021/08/21/dotnetcore-socket-analyze/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者在上篇把該有的<code>Socket</code>底層元件相關的程式碼依照分類貼出，筆者分幾個筆記來詳細解釋相關設計概念，此篇以最上層Client端解析封包作業為例，解釋筆者的設計概念。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>筆者用過幾個Event設計的原件，基本上可以從<code>dotnet</code>預設的套件就可以看出諸多此類的設計，筆者自己也加工過幾個，例:<code>SMTP Send Mail</code>，使用<code>ProcessInfo</code>執行<code>bat file</code>皆使用上此類技巧。</p>
<p>以筆者使用的<a href="https://github.com/chronoxor/NetCoreServer">NetCoreServer</a>來說，他所設計的方式是繼承他原有的物件，將幾個<code>socket</code>發生的事件處裡邏輯封裝成<code>virtual</code>的形式，你可以<code>override</code>成自己想要的樣子，以套件github頁面上提供的範例來說，由幾個處裡事件方法是可以複寫的，如下:</p>
<ul>
<li>Server/Session/Client<ul>
<li>OnConnected</li>
<li>OnDisconnected</li>
<li>OnReceived</li>
<li>OnError</li>
</ul>
</li>
</ul>
<p>筆者將擴大成將常用的事件定義成契約<code>interface</code>，才會出現<code>IServer</code>及<code>IClient</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IServer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 傳送封包</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;data&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Send</span>(<span class="params"><span class="built_in">byte</span>[] data</span>)</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 回傳特定Client封包</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;clientId&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;data&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Send</span>(<span class="params">Guid clientId, <span class="built_in">byte</span>[] data</span>)</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Client連線事件</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;clientId&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Server_OnAccept</span>(<span class="params">Guid clientId</span>)</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 傳送事件</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sent&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;pending&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Server_OnSend</span>(<span class="params"><span class="built_in">long</span> sent, <span class="built_in">long</span> pending</span>)</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 特定Client封包接受事件</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;clientId&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;buffer&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Server_OnReceive</span>(<span class="params">Guid clientId, <span class="built_in">byte</span>[] buffer</span>)</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 特定Client關閉</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;clietId&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Server_OnClose</span>(<span class="params">Guid clietId</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IClient</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Client_OnClose</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Client_OnReceive</span>(<span class="params"><span class="built_in">byte</span>[] data</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Client_OnConnect</span>(<span class="params"><span class="built_in">bool</span> obj</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Client_OnSend</span>(<span class="params"><span class="built_in">long</span> sent, <span class="built_in">long</span> pending</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Send</span>(<span class="params"><span class="built_in">byte</span>[] data, <span class="built_in">int</span> offset, <span class="built_in">int</span> length</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>筆者在中間有換過一次底層套件，<a href="https://github.com/chronoxor/NetCoreServer">NetCoreServer</a>還是第二次套用的底層元件，為這個套件調整過一次上述Interface，不過因為上層相依的部份只有<code>OnReceive</code>，筆者當初的想法是對於最上層Client使用端來說只有解析封包這件事是客製化的，其他行為是不會改變的，因此才有了<code>IAnalyzeService</code>﹔</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IAnalyzeService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ClientAnalyze</span>(<span class="params"><span class="built_in">byte</span>[] receiveBytes</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ServerAnalyze</span>(<span class="params">Guid arg1, <span class="built_in">byte</span>[] arg2</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出筆者只定義了Server收到封包後的解析邏輯以及Client收到封包後的解析邏輯，筆者於各自的BaseServer及BaseClient的OnReceive中呼叫IAnalyzeService中對應的Method﹔</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//BaseServer</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Server_OnReceive</span>(<span class="params">Guid clientId, <span class="built_in">byte</span>[] data</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//...以上省略</span></span><br><span class="line">    _analyzeService.ServerAnalyze(clientId, data);</span><br><span class="line">		<span class="comment">//...以下省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//BaseClient</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Client_OnReceive</span>(<span class="params"><span class="built_in">byte</span>[] data</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//...以上省略</span></span><br><span class="line">    _analyzeService.ClientAnalyze(data);</span><br><span class="line">    <span class="comment">//...以下省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>意即最上層Client使用端只要注入對應的實作<code>IAnalyzeService</code>，只要<code>OnReceive</code>事件觸發，底層元件會呼叫其對應的解析封包方法。</p>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>藉由這邊來解釋一下底層元件與最上層Client使用端是如何連結的。</p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>socket</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>socket</tag>
        <tag>netcoreserver</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]Socket程式實作</title>
    <url>/2021/08/21/dotnetcore-socket/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者目前於金融業資訊部門就職，如大家所知，核心系統大都維持使用<code>cobol</code>程式語言開發，我們這種寫<code>C#</code>程式語言的，只能攻外圍系統，但不免俗的需要與各核心相關系統做打交道，不管是取得資料或者是更新資料等，比較舊型的架構都是透過<code>TCP/IP</code>交換資料，也就是透過<code>socket</code>程式交換資料。界於此，筆者需要實作socket程式基礎框架適應各種Client程式的開發需求，今天就來寫一支<code>socket core</code>程式吧。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><h2 id="尋找適合nuget套件"><a href="#尋找適合nuget套件" class="headerlink" title="尋找適合nuget套件"></a>尋找適合nuget套件</h2><p>筆者堅持不重新造輪子的觀念，若有適合的底層套件則不偏向自己開發，因為基本上現今網路上大神們貢獻的程式碼，因Open Source的關係，也會有同好的大神們加入開發並改善，可以透過</p>
<ul>
<li>最新維護日期</li>
<li>星星數</li>
<li>網路上資源多寡程度</li>
</ul>
<p>來決定是否使用該套件。筆者想TCP/IP溝通應該算是一個底層程式的議題，應該有不乏現成套件可使用，在茫茫程式碼大海中找到這個</p>
<p><a href="https://github.com/chronoxor/NetCoreServer">chronoxor/NetCoreServer</a></p>
<p>主要選擇原因為星星數這個量算多，接著最後編輯時間不超過一個月，表示有持續在更新，看了一下套用範例程式也算簡單。就選擇他了。</p>
<h2 id="撰寫Client-Server程式"><a href="#撰寫Client-Server程式" class="headerlink" title="撰寫Client/Server程式"></a>撰寫Client/Server程式</h2><p><a href="https://github.com/chronoxor/NetCoreServer">NetCoreServer</a>本身提供諸多的介接實作，筆者這邊主要參考<code>TCP</code>的部份，因此只要參考<code>TCP Chat Server</code>、<code>TCP Chat Client</code>範例程式即可。那筆者就照著套件提供的範例程式開發<code>Client Server</code>程式吧</p>
<ul>
<li>MyTcpClient</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyTcpClient</span> : <span class="title">NetCoreServer.TcpClient</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Logger _logger = LogManager.GetCurrentClassLogger();</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 連接成功事件 item1:是否連接成功</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;<span class="built_in">bool</span>&gt; OnConnect;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 接收通知事件 item1:數據</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;<span class="built_in">byte</span>[]&gt; OnReceive;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 切割byte內容</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> Func&lt;List&lt;<span class="built_in">byte</span>&gt;, Tuple&lt;List&lt;<span class="built_in">byte</span>&gt;, List&lt;Byte[]&gt;&gt;&gt; SliceByteFunc;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 已發送通知事件 item1:長度</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;<span class="built_in">long</span>, <span class="built_in">long</span>&gt; OnSend;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 斷開連接通知事件</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action OnClose;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 接收到的数据缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> List&lt;<span class="built_in">byte</span>&gt; queue = <span class="keyword">new</span> List&lt;<span class="built_in">byte</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> SocketSettingOption _socketSetting;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTcpClient</span> (<span class="params">IPAddress address, <span class="built_in">int</span> port</span></span></span><br><span class="line"><span class="params"><span class="function">        , IOptions&lt;SocketSettingOption&gt; options</span>) : <span class="title">base</span>(<span class="params">address, port</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (SliceByteFunc == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            SliceByteFunc = CommSlicingByteFunc;</span><br><span class="line">        &#125;</span><br><span class="line">        _socketSetting = options.Value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DisconnectAndStop</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _stop = <span class="literal">true</span>;</span><br><span class="line">        DisconnectAsync();</span><br><span class="line">        <span class="keyword">while</span> (IsConnected)</span><br><span class="line">            Thread.Yield();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnConnected</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger.Info(<span class="string">$&quot;Chat TCP client connected a new session with Id <span class="subst">&#123;Id&#125;</span>&quot;</span>);</span><br><span class="line">        OnConnect(<span class="keyword">this</span>.IsConnected);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnDisconnected</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger.Info(<span class="string">$&quot;Chat TCP client disconnected a session with Id <span class="subst">&#123;Id&#125;</span>&quot;</span>);</span><br><span class="line">        OnClose();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Wait for a while...</span></span><br><span class="line">        Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Try to connect again</span></span><br><span class="line">        <span class="keyword">if</span> (!_stop &amp;&amp; _socketSetting.DisconnectAfterClientReceive == <span class="literal">false</span>)</span><br><span class="line">            ConnectAsync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnReceived</span>(<span class="params"><span class="built_in">byte</span>[] buffer, <span class="built_in">long</span> offset, <span class="built_in">long</span> size</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (OnReceive != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                _logger.Info(<span class="string">$&quot;[Buffer] <span class="subst">&#123;buffer.Length&#125;</span>;[Offset] <span class="subst">&#123;offset&#125;</span>;[Size] <span class="subst">&#123;size&#125;</span>&quot;</span>);</span><br><span class="line">                <span class="keyword">var</span> dataBuffer = ByteExtensions.GetSubByte(buffer, (<span class="built_in">int</span>)offset, (<span class="built_in">int</span>)size);</span><br><span class="line">                _logger.Info(<span class="string">$&quot;[TcpServer_eventactionReceive:data]: <span class="subst">&#123;CoreHelper.Encoding.GetString(dataBuffer)&#125;</span>&quot;</span>);</span><br><span class="line">                queue.AddRange(dataBuffer);</span><br><span class="line">                _logger.Info(<span class="string">$&quot;[TcpServer_eventactionReceive:queue]: <span class="subst">&#123;CoreHelper.Encoding.GetString(queue.ToArray())&#125;</span>&quot;</span>);</span><br><span class="line">                <span class="keyword">lock</span> (queue)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> sliceResult = SliceByteFunc(queue);</span><br><span class="line">                    queue = sliceResult.Item1;</span><br><span class="line">                    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> sliceResult.Item2)</span><br><span class="line">                    &#123;</span><br><span class="line">                        OnReceive(item);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            _logger.Info(<span class="string">$&quot;[TcpServer_eventactionReceive error]: <span class="subst">&#123;ex&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnError</span>(<span class="params">SocketError error</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger.Info(<span class="string">$&quot;Chat TCP client caught an error with code <span class="subst">&#123;error&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnSent</span>(<span class="params"><span class="built_in">long</span> sent, <span class="built_in">long</span> pending</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        OnSend(sent, pending);</span><br><span class="line">        <span class="keyword">base</span>.OnSent(sent, pending);</span><br><span class="line">    &#125;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>MyTcpClient的Private Method</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">bool</span> _stop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Tuple&lt;List&lt;<span class="built_in">byte</span>&gt;, List&lt;<span class="built_in">byte</span>[]&gt;&gt; CommSlicingByteFunc(List&lt;<span class="built_in">byte</span>&gt; source)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">new</span> Tuple&lt;List&lt;<span class="built_in">byte</span>&gt;, List&lt;<span class="built_in">byte</span>[]&gt;&gt;(<span class="keyword">new</span> List&lt;<span class="built_in">byte</span>&gt;(), <span class="keyword">new</span> List&lt;<span class="built_in">byte</span>[]&gt;());</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (source.Count &gt; <span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> totalLength = <span class="built_in">int</span>.Parse(CoreHelper.Encoding.GetString(ByteExtensions.GetSubByte(source.ToArray(), <span class="number">0</span>, <span class="number">4</span>)));</span><br><span class="line">            _logger.Info(<span class="string">$&quot;[Total Length]: <span class="subst">&#123;totalLength&#125;</span>&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (totalLength &lt;= source.Count)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> subBytes = <span class="keyword">new</span> <span class="built_in">byte</span>[totalLength];</span><br><span class="line">                System.Buffer.BlockCopy(source.ToArray(), <span class="number">0</span>, subBytes, <span class="number">0</span>, totalLength);</span><br><span class="line">                _logger.Info(<span class="string">$&quot;[Sub byte]: <span class="subst">&#123;CoreHelper.Encoding.GetString(subBytes)&#125;</span>&quot;</span>);</span><br><span class="line">                <span class="keyword">var</span> newQueue = ByteExtensions.GetSubByte(source.ToArray(), totalLength, source.Count - totalLength);</span><br><span class="line">                _logger.Info(<span class="string">$&quot;[newQueue]: <span class="subst">&#123;CoreHelper.Encoding.GetString(newQueue)&#125;</span>&quot;</span>);</span><br><span class="line">                source = <span class="keyword">new</span> List&lt;<span class="built_in">byte</span>&gt;();</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; newQueue.Length; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    source.Add(newQueue[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                result.Item2.Add(subBytes);</span><br><span class="line">                <span class="keyword">if</span> (newQueue.Length &gt; <span class="number">4</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    totalLength = <span class="built_in">int</span>.Parse(CoreHelper.Encoding.GetString(ByteExtensions.GetSubByte(newQueue, <span class="number">0</span>, <span class="number">4</span>)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        _logger.Error(<span class="string">$&quot;[CommSlicingByteFunc]: <span class="subst">&#123;ex&#125;</span>&quot;</span>);</span><br><span class="line">        <span class="comment">//throw;</span></span><br><span class="line">        result.Item2.Add(source.ToArray());</span><br><span class="line">        source = <span class="keyword">new</span> List&lt;<span class="built_in">byte</span>&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> source)</span><br><span class="line">    &#123;</span><br><span class="line">        result.Item1.Add(item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>MyTcpServer</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyTcpServer</span> : <span class="title">TcpServer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Logger _logger = LogManager.GetCurrentClassLogger();</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 連接成功事件 item1:connectId</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;Guid&gt; OnAccept;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 接收通知事件 item1:connectId,item2:數據</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;Guid, <span class="built_in">byte</span>[]&gt; OnReceive;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 已發送通知事件  item1:connectId,item2:長度</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;<span class="built_in">long</span>, <span class="built_in">long</span>&gt; OnSend;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 斷開連接通知事件 item1:connectId,</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;Guid&gt; OnClose;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTcpServer</span>(<span class="params">IPAddress address, <span class="built_in">int</span> port</span>) : <span class="title">base</span>(<span class="params">address, port</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> TcpSession <span class="title">CreateSession</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger.Info(<span class="string">$&quot;Create Session!&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> session = <span class="keyword">new</span> MyTcpSession(<span class="keyword">this</span>);</span><br><span class="line">        _logger.Info(<span class="string">$&quot;Session Id: <span class="subst">&#123;session.Id&#125;</span>&quot;</span>);</span><br><span class="line">        session.OnAccept += OnAccept;</span><br><span class="line">        session.OnReceive += OnReceive;</span><br><span class="line">        session.OnSend += OnSend;</span><br><span class="line">        session.OnClose += OnClose;</span><br><span class="line">        <span class="keyword">return</span> session;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnError</span>(<span class="params">SocketError error</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger.Error(<span class="string">$&quot;[MyTcpServer:Error] <span class="subst">&#123;error&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnStarted</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger.Info(<span class="string">$&quot;[MyTcpServer Started]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnStopped</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger.Info(<span class="string">$&quot;[MyTcpServer Stopped]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>MyTcpSession</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyTcpSession</span> : <span class="title">TcpSession</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 連接成功事件 item1:connectId</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;Guid&gt; OnAccept;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 接收通知事件 item1:connectId,item2:數據</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;Guid, <span class="built_in">byte</span>[]&gt; OnReceive;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 已發送通知事件  item1:connectId,item2:長度</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;<span class="built_in">long</span>, <span class="built_in">long</span>&gt; OnSend;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 斷開連接通知事件 item1:connectId,</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;Guid&gt; OnClose;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTcpSession</span>(<span class="params">MyTcpServer server</span>) : <span class="title">base</span>(<span class="params">server</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnConnected</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        OnAccept(Id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnDisconnected</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        OnClose(Id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnReceived</span>(<span class="params"><span class="built_in">byte</span>[] buffer, <span class="built_in">long</span> offset, <span class="built_in">long</span> size</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> dataBuffer = ByteExtensions.GetSubByte(buffer, (<span class="built_in">int</span>)offset, (<span class="built_in">int</span>)size);</span><br><span class="line">        OnReceive(Id, dataBuffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnSent</span>(<span class="params"><span class="built_in">long</span> sent, <span class="built_in">long</span> pending</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        OnSend(sent, pending);</span><br><span class="line">        <span class="keyword">base</span>.OnSent(sent, pending);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnError</span>(<span class="params">SocketError error</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.OnError(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="撰寫Base-Client-Base-Server程式"><a href="#撰寫Base-Client-Base-Server程式" class="headerlink" title="撰寫Base Client/Base Server程式"></a>撰寫Base Client/Base Server程式</h2><p>基本上筆者希望使用端不需要在出現<code>new</code>出相對應的<code>Server</code>或<code>Client</code>的程式，基本上連線資訊使用<code>appsetting</code>設定，底層程式將<code>appsetting</code>的設定讀出來做設定。因此最上層Client端只要簡單注入就即可使用，接著只要設定好相對應的<code>Event</code>事件，底層的<code>Base Class</code>作轉觸發的動作，最上層的Client端程式只要針對<code>Event</code>事件作對應處理，完美封裝了底層實作。</p>
<p>不免俗的定義一下Interface規格</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IClient</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Client_OnClose</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Client_OnReceive</span>(<span class="params"><span class="built_in">byte</span>[] data</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Client_OnConnect</span>(<span class="params"><span class="built_in">bool</span> obj</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Client_OnSend</span>(<span class="params"><span class="built_in">long</span> sent, <span class="built_in">long</span> pending</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Send</span>(<span class="params"><span class="built_in">byte</span>[] data, <span class="built_in">int</span> offset, <span class="built_in">int</span> length</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// IServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IServer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 傳送封包</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;data&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Send</span>(<span class="params"><span class="built_in">byte</span>[] data</span>)</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 回傳特定Client封包</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;clientId&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;data&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Send</span>(<span class="params">Guid clientId, <span class="built_in">byte</span>[] data</span>)</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Client連線事件</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;clientId&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Server_OnAccept</span>(<span class="params">Guid clientId</span>)</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 傳送事件</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sent&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;pending&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Server_OnSend</span>(<span class="params"><span class="built_in">long</span> sent, <span class="built_in">long</span> pending</span>)</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 特定Client封包接受事件</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;clientId&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;buffer&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Server_OnReceive</span>(<span class="params">Guid clientId, <span class="built_in">byte</span>[] buffer</span>)</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 特定Client關閉</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;clietId&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Server_OnClose</span>(<span class="params">Guid clietId</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>BaseServer部份，基本上就是實作IServer相對應的Method</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BaseServer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Logger _logger = LogManager.GetCurrentClassLogger();</span><br><span class="line">    <span class="keyword">private</span> MyTcpServer _server;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IAnalyzeService _analyzeService;</span><br><span class="line">    <span class="keyword">private</span> SocketSetting _socketSetting = <span class="keyword">new</span> SocketSetting();</span><br><span class="line">    <span class="keyword">private</span> SocketSettingOption _socketSettingOption;</span><br><span class="line">    <span class="keyword">private</span> SocketSettingType _socketSettingType;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _connectionStr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseServer</span>(<span class="params">IAnalyzeService analyzeService</span></span></span><br><span class="line"><span class="params"><span class="function">        , IOptions&lt;SocketSettingOption&gt; socketSettingOption</span></span></span><br><span class="line"><span class="params"><span class="function">        , IConfiguration config</span></span></span><br><span class="line"><span class="params"><span class="function">        , SocketSettingType socketSettingType</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger.Info(<span class="string">&quot;ServerPush Constructor!!&quot;</span>);</span><br><span class="line">        _analyzeService = analyzeService;</span><br><span class="line"></span><br><span class="line">        _socketSettingOption = socketSettingOption.Value;</span><br><span class="line">        <span class="keyword">switch</span> (socketSettingType)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> SocketSettingType.Main:</span><br><span class="line">                config.Bind(_socketSettingOption.MainSocketSetting, _socketSetting);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> SocketSettingType.Sub:</span><br><span class="line">                config.Bind(_socketSettingOption.SubSocketSetting, _socketSetting);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="literal">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        _socketSettingType = socketSettingType;</span><br><span class="line"></span><br><span class="line">        _connectionStr = Encoding.UTF8.GetString(</span><br><span class="line">            Convert.FromBase64String(config.GetConnectionString(_socketSettingOption.ConnectionStringKey)));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> ipAddress = IPAddress.Parse(_socketSetting.Server.ReceiveIP);</span><br><span class="line">        _server = <span class="keyword">new</span> MyTcpServer(ipAddress, _socketSetting.Server.ReceivePort);</span><br><span class="line">        _server.OnAccept += Server_OnAccept;</span><br><span class="line">        _server.OnClose += Server_OnClose;</span><br><span class="line">        _server.OnReceive += Server_OnReceive;</span><br><span class="line">        _server.OnSend += Server_OnSend;</span><br><span class="line">        _server.Start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span>(<span class="params"><span class="built_in">byte</span>[] data</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_server.ConnectedSessions == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            _logger.Info(<span class="string">&quot;[BaseServer]: No Client to send!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        data.Logging(_socketSettingOption, _socketSetting, _connectionStr);</span><br><span class="line">        _server.Multicast(data);        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span>(<span class="params">Guid clientId, <span class="built_in">byte</span>[] data</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_server.ConnectedSessions == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            _logger.Info(<span class="string">&quot;[BaseServer]: No Client to send!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> session = _server.FindSession(clientId);</span><br><span class="line">        <span class="keyword">if</span>(session != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            data.Logging(_socketSettingOption, _socketSetting, _connectionStr);</span><br><span class="line">            session.SendAsync(data);           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 其餘事件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Server_OnAccept</span>(<span class="params">Guid clientId</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    _logger.Info(<span class="string">$&quot;Server_OnAccept <span class="subst">&#123;clientId&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Server_OnClose</span>(<span class="params">Guid clientId</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    _logger.Info(<span class="string">$&quot;Server OnClose <span class="subst">&#123;clientId&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Server_OnReceive</span>(<span class="params">Guid clientId, <span class="built_in">byte</span>[] data</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    data.Logging(_socketSettingOption, _socketSetting, _connectionStr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> receiveData = CoreHelper.Encoding.GetString(data);</span><br><span class="line">    _logger.Info(<span class="string">$&quot;Server_OnReceive: <span class="subst">&#123;receiveData&#125;</span>&quot;</span>);</span><br><span class="line">    _analyzeService.ServerAnalyze(clientId, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Server_OnSend</span>(<span class="params"><span class="built_in">long</span> arg1, <span class="built_in">long</span> arg2</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    _logger.Info(<span class="string">&quot;Server OnSend&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>BaseClient部份，基本上就是實作IClient相對應的Method</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BaseClient</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Logger _logger = LogManager.GetCurrentClassLogger();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IAnalyzeService _analyzeService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> MyTcpClient _client;</span><br><span class="line">    <span class="keyword">private</span> SocketSetting _socketSetting = <span class="keyword">new</span> SocketSetting();</span><br><span class="line">    <span class="keyword">private</span> SocketSettingOption _socketSettingOption;</span><br><span class="line">    <span class="keyword">private</span> SocketSettingType _socketSettingType;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _connectionStr;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseClient</span>(<span class="params">IAnalyzeService analyzeService</span></span></span><br><span class="line"><span class="params"><span class="function">        , IOptions&lt;SocketSettingOption&gt; socketSettingOption</span></span></span><br><span class="line"><span class="params"><span class="function">        , IConfiguration config</span></span></span><br><span class="line"><span class="params"><span class="function">        , SocketSettingType socketSettingType</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _analyzeService = analyzeService;</span><br><span class="line">        _socketSettingOption = socketSettingOption.Value;</span><br><span class="line">        <span class="keyword">var</span> options = socketSettingOption.Value;</span><br><span class="line">        <span class="keyword">switch</span> (socketSettingType)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> SocketSettingType.Main:</span><br><span class="line">                config.Bind(options.MainSocketSetting, _socketSetting);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> SocketSettingType.Sub:</span><br><span class="line">                config.Bind(options.SubSocketSetting, _socketSetting);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="literal">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        _socketSettingType = socketSettingType;</span><br><span class="line"></span><br><span class="line">        _connectionStr = Encoding.UTF8.GetString(</span><br><span class="line">            Convert.FromBase64String(config.GetConnectionString(_socketSettingOption.ConnectionStringKey)));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> ipAddress = IPAddress.Parse(_socketSetting.Client.RemoteIP);</span><br><span class="line">        _client = <span class="keyword">new</span> MyTcpClient(ipAddress, _socketSetting.Client.RemotePort, socketSettingOption);</span><br><span class="line">        _client.OnClose += Client_OnClose;</span><br><span class="line">        _client.OnConnect += Client_OnConnect;</span><br><span class="line">        _client.OnReceive += Client_OnReceive;</span><br><span class="line">        _client.OnSend += Client_OnSend;</span><br><span class="line">        <span class="keyword">if</span> (options.ClientSliceByteFunc != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            _client.SliceByteFunc = options.ClientSliceByteFunc;</span><br><span class="line">        &#125;</span><br><span class="line">        _client.ConnectAsync();</span><br><span class="line">        _logger.Info(<span class="string">$&quot;[Client Connect]: <span class="subst">&#123;_client.IsConnected&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Client_OnClose</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger.Info(<span class="string">&quot;Client OnClose&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Client_OnConnect</span>(<span class="params"><span class="built_in">bool</span> obj</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger.Info(<span class="string">$&quot;Client OnConnect: <span class="subst">&#123;obj&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Client_OnReceive</span>(<span class="params"><span class="built_in">byte</span>[] data</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(CoreHelper.Encoding.GetString(data).Trim())) <span class="keyword">return</span>;</span><br><span class="line">        _logger.Info(<span class="string">$&quot;Client OnReceive[Hex String]: <span class="subst">&#123;data.ToHexString()&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">        data.Logging(_socketSettingOption, _socketSetting, _connectionStr);</span><br><span class="line"></span><br><span class="line">        _logger.Info(<span class="string">$&quot;Client OnReceive: <span class="subst">&#123;CoreHelper.Encoding.GetString(data)&#125;</span>&quot;</span>);</span><br><span class="line">        _analyzeService.ClientAnalyze(data);            </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Client_OnSend</span>(<span class="params"><span class="built_in">long</span> sent, <span class="built_in">long</span> pending</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger.Info(<span class="string">&quot;Client OnSend&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span>(<span class="params"><span class="built_in">byte</span>[] data, <span class="built_in">int</span> offset, <span class="built_in">int</span> length</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_socketSettingOption.DisconnectAfterClientReceive)</span><br><span class="line">        &#123;</span><br><span class="line">            _client.DisconnectAndStop();</span><br><span class="line">            Thread.Sleep(<span class="number">500</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (PoolingService.RetryUntilSuccessOrTimeout(() =&gt;</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="keyword">if</span> (!_client.IsConnected)</span><br><span class="line">                 _client.ConnectAsync();</span><br><span class="line">             Thread.Sleep(<span class="number">500</span>);</span><br><span class="line">             <span class="keyword">return</span> _client.IsConnected;</span><br><span class="line">         &#125;, TimeSpan.FromSeconds(<span class="number">10</span>)))</span><br><span class="line">        &#123;</span><br><span class="line">            _logger.Info(<span class="string">$&quot;Client Send: <span class="subst">&#123;CoreHelper.Encoding.GetString(data)&#125;</span>&quot;</span>);</span><br><span class="line">            data.Logging(_socketSettingOption, _socketSetting, _connectionStr);</span><br><span class="line">            <span class="keyword">var</span> sent = _client.SendAsync(data);</span><br><span class="line">            _logger.Info(<span class="string">$&quot;Client Send Length: <span class="subst">&#123;sent&#125;</span>&quot;</span>);               </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;                </span><br><span class="line">            _logger.Error(<span class="string">$&quot;Client Connect Timeout Error!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Client端使用Server、Client物件"><a href="#Client端使用Server、Client物件" class="headerlink" title="Client端使用Server、Client物件"></a>Client端使用Server、Client物件</h2><p>到這邊，我們已經有<code>BaseServer</code>及<code>BaseClient</code>物件可以使用了，我們為了Client端方便使用，再包裝一個對外的Server、Client物件。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MyClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClient</span> : <span class="title">BaseClient</span>, <span class="title">IClient</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClient</span> (<span class="params">IAnalyzeService analyzeService</span></span></span><br><span class="line"><span class="params"><span class="function">        , IOptions&lt;SocketSettingOption&gt; socketSettingOption</span></span></span><br><span class="line"><span class="params"><span class="function">        , IConfiguration config</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params">analyzeService, socketSettingOption, config, SocketSettingType.Main</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// MyServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyServer</span> : <span class="title">BaseServer</span>, <span class="title">IServer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyServer</span>(<span class="params">IAnalyzeService analyzeService</span></span></span><br><span class="line"><span class="params"><span class="function">        , IOptions&lt;SocketSettingOption&gt; socketSettingOption</span></span></span><br><span class="line"><span class="params"><span class="function">        , IConfiguration config</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params">analyzeService, socketSettingOption, config, SocketSettingType.Main</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Service-Registration-Extension實作"><a href="#Service-Registration-Extension實作" class="headerlink" title="Service Registration Extension實作"></a>Service Registration Extension實作</h2><p>最後的最後，基本上<code>socket</code>程式本身不像一般的Service跟著<code>http request</code>執行，而是一個<code>singleton</code>的實體，底層套件就直接做完注入<code>new</code>出一個實體的作業。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">SocketServiceRegistration</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IServiceCollection <span class="title">AddMySocket</span>(<span class="params"><span class="keyword">this</span> IServiceCollection services</span></span></span><br><span class="line"><span class="params"><span class="function">        , Action&lt;SocketSettingOption&gt; setupOptions</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        services.AddSingleton&lt;IServer, MyServer&gt;();</span><br><span class="line">        services.AddSingleton&lt;IClient, MyClient&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> options = <span class="keyword">new</span> SocketSettingOption();</span><br><span class="line">        setupOptions(options);</span><br><span class="line">        services.Configure(setupOptions);</span><br><span class="line"></span><br><span class="line">        services.AddHostedService&lt;SocketWorker&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> services;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上述程式碼中可以看到有一個<code>SocketWorker</code>，可以想成是一個<code>Socket Initial Worker</code>，就是硬生生給他<code>new</code>出來放著，基本上最上層Client端使用時就是一個ready好的<code>Server</code>及<code>Client</code>實體。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SocketWorker</span> : <span class="title">BackgroundService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Logger _logger = LogManager.GetCurrentClassLogger();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IClient _client;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IServer _server;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IExchangeService _exchangeService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IConfiguration _config;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> SocketSettingOption _socketSetting;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SocketWorker</span>(<span class="params">IClient client</span></span></span><br><span class="line"><span class="params"><span class="function">        , IServer server</span></span></span><br><span class="line"><span class="params"><span class="function">        , IExchangeService exchangeService</span></span></span><br><span class="line"><span class="params"><span class="function">        , IConfiguration config</span></span></span><br><span class="line"><span class="params"><span class="function">        , IOptions&lt;SocketSettingOption&gt; options</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _client = client;</span><br><span class="line">        _server = server;</span><br><span class="line">        _exchangeService = exchangeService;</span><br><span class="line">        _socketSetting = options.Value;</span><br><span class="line">        _config = config;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Task <span class="title">ExecuteAsync</span>(<span class="params">CancellationToken stoppingToken</span>)</span></span><br><span class="line">    &#123;            </span><br><span class="line">        <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最上層Client端套用"><a href="#最上層Client端套用" class="headerlink" title="最上層Client端套用"></a>最上層Client端套用</h2><p>套用部份，只要於Program中，呼叫上述Extension中的方法即可，當然宣告的同時要設定好Socket相關設定值。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">services.AddMySocket(option =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    option.MainSocketSetting = <span class="string">&quot;Socket&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>也順便列出<code>appsetting</code>設定值</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;Socket&quot;</span><span class="punctuation">:</span> </span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Client&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;SendBufferSize&quot;</span><span class="punctuation">:</span> <span class="number">1024</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;RemoteIP&quot;</span><span class="punctuation">:</span> <span class="string">&quot;RemoteIP&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;RemotePort&quot;</span><span class="punctuation">:</span> RemotePort</span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Server&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;NumConnections&quot;</span><span class="punctuation">:</span> <span class="number">20000</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ReceiveBufferSize&quot;</span><span class="punctuation">:</span> <span class="number">1024</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ReceiveIP&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MyIP&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ReceivePort&quot;</span><span class="punctuation">:</span> MyPort<span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;OverTime&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Encoding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Big5&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>雖然包了很多層，筆者追求底層邏輯封裝，讓最上層Client使用端易用性高，基本上底層邏輯封裝做得越好，若使用的底層套件有問題，還可轉用其他的，對於Client使用端來說只要接口、使用方式不變，不需調整任何程式，就可享有效能更好的底層套件體驗。筆者下一篇來解釋最上層Client使用端如何串接解析處裡封包。</p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
        <category>socket</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>socket</tag>
        <tag>netcoreserver</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]EventBus套件CAP:以RabbitMQ為例</title>
    <url>/2021/08/21/dotnetcore-cap/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者公司有需求是系統跟系統串接，前人是使用資料庫交換的方式進行，簡單來講就是系統A有需求要請系統B做事情，簡單作法就是系統A於共同資料庫中的資料表中寫一筆資料，系統B則<code>Database Pooling</code>的方式進行監聽，若有撈出一筆<code>Status = N</code>的資料則進行邏輯處裡，進行完成後壓回<code>Status = Y 或 N</code>的註記方式來完成該次的串接需求，當然途中也會壓<code>Status = P</code>作為下次<code>Pooling</code>會撈到的防呆，大概就是這麼簡單的技術完成串接的需求。</p>
<p>筆者因前一份公司有接觸過Message Queue，主要是<a href="https://www.rabbitmq.com/">Rabbit MQ</a>，覺得使用Message Queue當作中間交換資訊平台，確實有其發展性，不論是之後需求變大時可以做分散式的處理，系統間也間接解偶了。</p>
<span id="more"></span>

<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>那怎麼會有產生此篇文章呢，是因為筆者在上一份工作有寫過監聽<code>Rabbit MQ</code>的<code>Queue</code>以及<code>publish</code>的程式，基本上是不難，照著官網範例打，應該都寫得出來，只是落落等，抽共用方法是可以解決，但會有<code>Persistance</code>的需求，就要自幹了。</p>
<p>那找到這個套件也是因為筆者在熟悉一種框架時會找相對應的<code>developer roadmap</code>，當作自己要完成的目標，參考<a href="https://github.com/MoienTajik/AspNetCore-Developer-Roadmap">asp.net core developer roadmap</a>，裡頭有一個分類是Message Bus，介紹了幾個推薦用的套件，其中包含<a href="https://github.com/dotnetcore/CAP">CAP</a>，其實這個命名有一個玄機，由<a href="https://medium.com/@thegiive/cap-%E7%90%86%E8%AB%96-19cd81c82658">CAP理論</a>而來，意思就是此套件也是照著CAP理論來達成的。</p>
<h2 id="套件安裝"><a href="#套件安裝" class="headerlink" title="套件安裝"></a>套件安裝</h2><p>主要套件安裝</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PM&gt; Install-Package DotNetCore.CAP</span><br></pre></td></tr></table></figure>

<p>接著要考慮的你要串接的是哪一個Message Queue，CAP套件支援</p>
<ul>
<li>Kafka</li>
<li>Rabbit MQ</li>
<li>AzureServiceBus</li>
<li>AmazonSQS</li>
</ul>
<p>依照選擇的對象不同而安裝對應的套件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PM&gt; Install-Package DotNetCore.CAP.Kafka</span><br><span class="line"><span class="comment"># 筆者因為串接RabbitMQ，因此使用這則</span></span><br><span class="line">PM&gt; Install-Package DotNetCore.CAP.RabbitMQ</span><br><span class="line">PM&gt; Install-Package DotNetCore.CAP.AzureServiceBus</span><br><span class="line">PM&gt; Install-Package DotNetCore.CAP.AmazonSQS</span><br></pre></td></tr></table></figure>

<p>接著關係到<code>Persistance</code>，依你選擇的<code>Persistance</code>不同而安裝對應的套件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 筆者因為SqlServer當作Persistance Target，因此使用這則</span></span><br><span class="line">PM&gt; Install-Package DotNetCore.CAP.SqlServer</span><br><span class="line">PM&gt; Install-Package DotNetCore.CAP.MySql</span><br><span class="line">PM&gt; Install-Package DotNetCore.CAP.PostgreSql</span><br><span class="line">PM&gt; Install-Package DotNetCore.CAP.MongoDB     //need MongoDB 4.0+ cluster</span><br></pre></td></tr></table></figure>

<p>安裝完以上三個套件後就完成安裝作業了。筆者再列一下筆者安裝的項目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PM&gt; Install-Package DotNetCore.CAP</span><br><span class="line">PM&gt; Install-Package DotNetCore.CAP.RabbitMQ</span><br><span class="line">PM&gt; Install-Package DotNetCore.CAP.SqlServer</span><br></pre></td></tr></table></figure>

<h2 id="初始化套件"><a href="#初始化套件" class="headerlink" title="初始化套件"></a>初始化套件</h2><p>安裝套件完畢後，該是時候初始化它了，我們宣告於<code>Startup.cs</code>中</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ConfigureServices</span></span><br><span class="line">services.AddCap(x =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    x.UseSqlServer(<span class="string">$&quot;<span class="subst">&#123;連線字串&#125;</span>&quot;</span>);</span><br><span class="line">    x.UseRabbitMQ(cfg =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        cfg.HostName = <span class="string">$&quot;<span class="subst">&#123;RabbitMQ Server IP&#125;</span>&quot;</span>;</span><br><span class="line">        cfg.UserName = <span class="string">$&quot;<span class="subst">&#123;RabbitMQ Server Account&#125;</span>&quot;</span>;</span><br><span class="line">        cfg.Password = <span class="string">$&quot;<span class="subst">&#123;RabbitMQ Server Password&#125;</span>&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    x.FailedRetryCount = <span class="number">5</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="發佈Queue"><a href="#發佈Queue" class="headerlink" title="發佈Queue"></a>發佈Queue</h2><p>這個發布只有一種模式，叫做<code>ICapPublisher</code>，任何Service物件皆可進行發佈，只要能使用建構式注入的物件，例: <code>Controller/Action</code>，一般<code>Service</code>，<code>WorkerService</code>，只要是能藉由建構式注入<code>ICapPublisher</code>即可使用發佈功能。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PublishController</span> : <span class="title">Controller</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ICapPublisher _capBus;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PublishController</span>(<span class="params">ICapPublisher capPublisher</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _capBus = capPublisher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Route(<span class="string">&quot;~/adonet/transaction&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">AdonetWithTransaction</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> connection = <span class="keyword">new</span> MySqlConnection(ConnectionString))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> transaction = connection.BeginTransaction(_capBus, autoCommit: <span class="literal">true</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//your business logic code</span></span><br><span class="line"></span><br><span class="line">                _capBus.Publish(<span class="string">&quot;xxx.services.show.time&quot;</span>, DateTime.Now);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Route(<span class="string">&quot;~/ef/transaction&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">EntityFrameworkWithTransaction</span>(<span class="params">[FromServices]AppDbContext dbContext</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> trans = dbContext.Database.BeginTransaction(_capBus, autoCommit: <span class="literal">true</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//your business logic code</span></span><br><span class="line"></span><br><span class="line">            _capBus.Publish(<span class="string">&quot;xxx.services.show.time&quot;</span>, DateTime.Now);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Ok();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>當然發佈之於，需要理解一下<code>Rabbit MQ</code>中的發佈定義，<code>Publish/Subscribe</code>部份有四種模式</p>
<ul>
<li>Fanout</li>
<li>Routing</li>
<li>Topics: CAP套件採用此類交換模式</li>
<li>RPC</li>
</ul>
<p>詳細定義請參考<a href="https://zamhuang.medium.com/rabbitmq-%E4%BA%94%E5%88%86%E9%90%98%E8%BC%95%E9%AC%86%E4%BA%86%E8%A7%A3-rabbitmq-%E9%81%8B%E4%BD%9C-fcaecbaa69d4">五分鐘了解RabbitMQ運作</a></p>
<h2 id="監聽Queue"><a href="#監聽Queue" class="headerlink" title="監聽Queue"></a>監聽Queue</h2><p>透過<code>CAP</code>套件監聽<code>Queue</code>也是非常簡單，只要在你在邏輯處裡的<code>Method</code>上面套上相對應的<code>Attribute</code>即可完成。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PublishController</span> : <span class="title">Controller</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">CapSubscribe(<span class="string">&quot;xxx.services.show.time&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CheckReceivedMessage</span>(<span class="params">DateTime datetime</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(datetime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>若想要在一般的Service層套用監聽則</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">BusinessCode.Service</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISubscriberService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">CheckReceivedMessage</span>(<span class="params">DateTime datetime</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 主要是你的Service要實作ICapSubscribe</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SubscriberService</span>: <span class="title">ISubscriberService</span>, <span class="title">ICapSubscribe</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">CapSubscribe(<span class="string">&quot;xxx.services.show.time&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CheckReceivedMessage</span>(<span class="params">DateTime datetime</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>透過CAP套件，你也可以很容易地使用<code>Message Queue</code>當作系統間的橋樑，這是跨入<code>Microservice</code>世界的一小步，也可以達成物件導向追求的解偶。</p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>
]]></content>
      <categories>
        <category>dotnetcore</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>cap</tag>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]SMTP寄信服務設計</title>
    <url>/2021/08/21/dotnetcore-smtp/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>這篇的誕生是因為筆者在工作上專案時有寄信的需求，且會有各式各樣的服務皆可能需要寄信服務，各式各樣服務包含應用程式端、資料庫端像Store Procedure運算完需寄信通知，目標要讓不同服務都有相同的接口去對應。</p>
<p>我們的想法是設計一個資料表，有寄信需求則往該資料表新增一筆資料，再由一個專門pooling的排程服務依照Status，一一的把信件寄出去，由於因為是靠Status在運作，更新Status變成是一個很重要的任務。</p>
<span id="more"></span>

<p>大概運作方式就是，排程服務時間到要運行時，會將 <code>Status = &#39;N&#39;</code> 符合的資料撈出來，一筆一筆進行寄信作業，但由於在<code>foreach</code>中若用同步的方式寄信則會大塞車，當然要考慮最差狀況，因此必須要使用非同步方式進行寄信。但非同步方式的話，只要 <code>SendMailAsync()</code> 後會與主程式脫鉤，無法掌握寄信成功與否，更新其對應的紀錄，將<code>Status</code>更新為<code>Y</code> 或 <code>F</code>。</p>
<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>筆者第一步是想到<code>SmtpClient</code>本身應該會有提供相對應的事件，查一下就會看到有<code>SendCompleted</code> 可以觸發，但此<code>call back function</code>帶回的參數，為<code>object sender, AsyncCompletedEventArgs e</code>，只知道寄信結果及<code>SmtpClient(Sender)</code>相關資訊，無法取得寄信資料表對應的資料，才有辦法做更新作業。</p>
<p><a href="https://docs.microsoft.com/zh-tw/dotnet/api/system.net.mail.smtpclient.sendcompleted?view=net-5.0">SmtpClient.SendCompleted 事件 (System.Net.Mail)</a></p>
<p>筆者接下去思考，自己必須要包一個類別，把寄信資料表對應的資料接進來變內部變數，對外開放<code>Event</code>，使外部使用端可以接受寄信結果完成事件觸發，再由該<code>Event</code>時丟出</p>
<ul>
<li>寄信資料表對應的資料</li>
<li>寄信作業結果</li>
</ul>
<h2 id="寄信需求資料"><a href="#寄信需求資料" class="headerlink" title="寄信需求資料"></a>寄信需求資料</h2><p>來實作吧，首先先規劃出寄信需求資料結構，如下:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MailToDoItem</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> SeqNo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">		<span class="comment">// 服務名稱</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> SourceId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">		<span class="comment">// 主要收信者(多個以;隔開)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Mail_To &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">		<span class="comment">// 副本收信者(多個以;隔開)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Mail_Cc &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">		<span class="comment">// 信件主旨</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Subject &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">		<span class="comment">// 信件內容</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Message &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">		<span class="comment">// 寄信狀態(N, P, Y, F)</span></span><br><span class="line">		<span class="comment">// N: 尚未寄信</span></span><br><span class="line">		<span class="comment">// P: 寄信中</span></span><br><span class="line">		<span class="comment">// Y: 寄信完成</span></span><br><span class="line">		<span class="comment">// F: 寄信失敗(搭配ErrMessage)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Status &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">		<span class="comment">// 寄信者</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> SendUser &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">		<span class="comment">// 寄信時間</span></span><br><span class="line">    <span class="keyword">public</span> DateTime? SendTime &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">		<span class="comment">// 錯誤訊息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ErrMessage &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="寄信服務類別"><a href="#寄信服務類別" class="headerlink" title="寄信服務類別"></a>寄信服務類別</h2><p>接著自己的寄信服務類別:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MySmtpClient</span> : <span class="title">IDisposable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Logger _logger = LogManager.GetCurrentClassLogger();</span><br><span class="line">    <span class="keyword">private</span> MailToDoItem _mailToDo;</span><br><span class="line">    <span class="keyword">private</span> SmtpClient _smtpClient;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;MailToDoItem, AsyncCompletedEventArgs&gt; MySendCompleted;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySmtpClient</span>(<span class="params">MailToDoItem mailToDo, EmailSetting emailSetting</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _mailToDo = mailToDo;</span><br><span class="line">        _smtpClient = <span class="keyword">new</span> SmtpClient(emailSetting.SmtpServer);</span><br><span class="line">        _smtpClient.SendCompleted += <span class="keyword">new</span> SendCompletedEventHandler(_smtpClient_SendCompleted);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> _smtpClient_SendCompleted(<span class="built_in">object</span> sender, AsyncCompletedEventArgs e)</span><br><span class="line">    &#123;</span><br><span class="line">        MySendCompleted(_mailToDo, e);</span><br><span class="line">        _smtpClient.SendCompleted -= _smtpClient_SendCompleted;</span><br><span class="line">        <span class="keyword">this</span>.Dispose();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendMailProcess</span>(<span class="params"><span class="built_in">string</span> systemId</span></span></span><br><span class="line"><span class="params"><span class="function">        , <span class="built_in">byte</span>[] attach, <span class="built_in">string</span> attachName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MailMessage mailMessage = <span class="keyword">new</span> MailMessage();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> mailFrom = <span class="keyword">new</span> MailAddress(<span class="string">$&quot;<span class="subst">&#123;systemId&#125;</span>@company.com.tw&quot;</span>, systemId);</span><br><span class="line">        mailMessage.From = mailFrom;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> _mailToDo.Mail_To?.Split(<span class="string">&quot;;&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(item) == <span class="literal">false</span>)</span><br><span class="line">                mailMessage.To.Add(item);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> _mailToDo.Mail_Cc?.Split(<span class="string">&#x27;;&#x27;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(item) == <span class="literal">false</span>)</span><br><span class="line">                mailMessage.CC.Add(item);</span><br><span class="line">        &#125;</span><br><span class="line">        mailMessage.Body = _mailToDo.Message;</span><br><span class="line">        mailMessage.Subject = _mailToDo.Subject;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (attach != <span class="literal">null</span> &amp;&amp; attach?.Length &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Attachment attachment = <span class="keyword">new</span> Attachment(<span class="keyword">new</span> MemoryStream(attach), attachName);</span><br><span class="line">            mailMessage.Attachments.Add(attachment);</span><br><span class="line">        &#125;</span><br><span class="line">        _smtpClient.SendMailAsync(mailMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger.Info(<span class="string">$&quot;[MySmtpClient Dispose]!!&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>._smtpClient.Dispose();</span><br><span class="line">        <span class="comment">// Suppress finalization.</span></span><br><span class="line">        GC.SuppressFinalize(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中<code>EmailSetting</code>，要再宣告一下，也是從外面傳進去，基本上是寄信相關的設定物件</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EmailSetting</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> SmtpServer &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> SmtpPort &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Account &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Password &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上 <code>MySmtpClient</code> 包裝<code>SmtpClient</code>，達到物件導向設計三大特性中的封裝，你不需要知道我怎麼寄信，把<code>寄信資料表對應的資料</code>及<code>SmtpServer</code>相關的資訊給我，我幫你完成寄信，且寄信完成後會再由你自定義的事件觸發讓你知道已完成。</p>
<p>使用端使用方式也很簡單，第一步宣告事件對應的<code>Action</code>:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">MailSendCompleted</span>(<span class="params">MailToDoItem mailToDoItem, AsyncCompletedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    _logger.Info(<span class="string">$&quot;[Send Completed]: <span class="subst">&#123;JsonConvert.SerializeObject(mailToDoItem)&#125;</span>&quot;</span>);</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> _conn = <span class="keyword">new</span> SqlConnection(_connStr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> result = e.Error != <span class="literal">null</span> ? <span class="string">&quot;F&quot;</span> : <span class="string">&quot;Y&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> errMsg = e.Error != <span class="literal">null</span> ? e.Error.ToString() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">        _conn.Execute(<span class="string">@&quot;UPDATE MailToDo SET Status = @Status, ErrMessage = @ErrMessage</span></span><br><span class="line"><span class="string">                            , SendUser = @SendUser, SendTime = @SendTime WHERE SeqNo = @SeqNo&quot;</span></span><br><span class="line">                                , <span class="keyword">new</span></span><br><span class="line">                                &#123;</span><br><span class="line">                                    Status = result,</span><br><span class="line">                                    mailToDoItem.SeqNo,</span><br><span class="line">                                    SendUser = <span class="string">&quot;SYS&quot;</span>,</span><br><span class="line">                                    SendTime = DateTime.Now,</span><br><span class="line">                                    ErrMessage = errMsg</span><br><span class="line">                                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="寄信Client端"><a href="#寄信Client端" class="headerlink" title="寄信Client端"></a>寄信Client端</h2><p>再寄信需求程式片段中呼叫:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mySmtpClient = <span class="keyword">new</span> MySmtpClient(mailToDoItem, emailSetting);</span><br><span class="line">mySmtpClient.MySendCompleted += MailSendCompleted;</span><br><span class="line">mySmtpClient.SendMailProcess(<span class="string">&quot;MySystem.Admin&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>以上，筆者在實際掛排程服務跑過，是沒有問題的，確實感受到非同步的好處，以及 <code>event, action</code>的搭配，堪稱是完美。要記住<code>event, action</code>的搭配，筆者會在爾後會常使用到該技巧。</p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>dotnetcore</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
        <tag>smtp</tag>
      </tags>
  </entry>
  <entry>
    <title>[DotnetCore]ActionFilter實作</title>
    <url>/2021/08/20/dotnetcore-actionfilter/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者公司因為需要符合資安要求，系統規劃中需要設計留下使用者足跡，筆者這邊第一個想到就是用ActionFilter設計，將Htpp Request對應的相關資訊，存到對應的紀錄表中。</p>
<span id="more"></span>
<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><h2 id="設計系統操作紀錄表"><a href="#設計系統操作紀錄表" class="headerlink" title="設計系統操作紀錄表"></a>設計系統操作紀錄表</h2><p>需要先設計一個存放系統操作紀錄的表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[SysAPLog](</span><br><span class="line">	[LogNo] [<span class="type">bigint</span>] <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	[AuditTime] [datetime] <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	[HostName] [<span class="type">varchar</span>](<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	[HostAddress] [<span class="type">varchar</span>](<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	[UserAgent] [<span class="type">varchar</span>](max) <span class="keyword">NULL</span>,</span><br><span class="line">	[FilePath] [<span class="type">varchar</span>](max) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	[AuditUser] [<span class="type">varchar</span>](<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	[LogType] [<span class="type">varchar</span>](<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	[Memo1] [<span class="type">varchar</span>](max) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	[Memo2] [<span class="type">varchar</span>](max) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	[Memo3] [<span class="type">varchar</span>](max) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	[Memo4] [<span class="type">varchar</span>](max) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	[Memo5] [<span class="type">varchar</span>](max) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> <span class="keyword">CONSTRAINT</span> [PK_SysAPLog] <span class="keyword">PRIMARY</span> KEY CLUSTERED </span><br><span class="line">(</span><br><span class="line">	[LogNo] <span class="keyword">ASC</span></span><br><span class="line">)<span class="keyword">WITH</span> (PAD_INDEX <span class="operator">=</span> OFF, STATISTICS_NORECOMPUTE <span class="operator">=</span> OFF, IGNORE_DUP_KEY <span class="operator">=</span> OFF, ALLOW_ROW_LOCKS <span class="operator">=</span> <span class="keyword">ON</span>, ALLOW_PAGE_LOCKS <span class="operator">=</span> <span class="keyword">ON</span>) <span class="keyword">ON</span> [<span class="keyword">PRIMARY</span>]</span><br><span class="line">) <span class="keyword">ON</span> [<span class="keyword">PRIMARY</span>] TEXTIMAGE_ON [<span class="keyword">PRIMARY</span>]</span><br><span class="line">GO</span><br></pre></td></tr></table></figure>
<h2 id="撰寫ActionFilter"><a href="#撰寫ActionFilter" class="headerlink" title="撰寫ActionFilter"></a>撰寫ActionFilter</h2><p>接著是本文的主軸，設計一個ActionFilter，攔截使用者的Request，並存回Table做紀錄，以便以後追縱用</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">APLogActionFilter</span> : <span class="title">IActionFilter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ISysAPLogService _apLogService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SKActionFilter</span>(<span class="params">ISysAPLogService apLogService</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _apLogService = apLogService;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Logger _logger = LogManager.GetCurrentClassLogger();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnActionExecuted</span>(<span class="params">ActionExecutedContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Nothing to do</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnActionExecuting</span>(<span class="params">ActionExecutingContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> action = context.RouteData.Values[<span class="string">&quot;action&quot;</span>].ToString().ToLower();</span><br><span class="line">        <span class="comment">//AuditTime</span></span><br><span class="line">        <span class="comment">//HostName</span></span><br><span class="line">        <span class="comment">//HostAddress</span></span><br><span class="line">        <span class="comment">//UserAgent</span></span><br><span class="line">        <span class="comment">//FilePath(route)</span></span><br><span class="line">        <span class="comment">//AuditUser</span></span><br><span class="line">        <span class="comment">//LogType</span></span><br><span class="line">        <span class="comment">//Memo1~5</span></span><br><span class="line">        <span class="keyword">var</span> apLog = <span class="keyword">new</span> SysAplog()</span><br><span class="line">        &#123;</span><br><span class="line">            AuditTime = DateTime.Now,</span><br><span class="line">            HostName = context.HttpContext.Connection.RemoteIpAddress.ToString(),</span><br><span class="line">            HostAddress = context.HttpContext.Connection.RemoteIpAddress.ToString(),</span><br><span class="line">            UserAgent = context.HttpContext.Request.Headers[<span class="string">&quot;User-Agent&quot;</span>],</span><br><span class="line">            FilePath = <span class="string">$&quot;<span class="subst">&#123;context.RouteData.Values[<span class="string">&quot;controller&quot;</span>]&#125;</span>/<span class="subst">&#123;context.RouteData.Values[<span class="string">&quot;action&quot;</span>]&#125;</span>&quot;</span>,</span><br><span class="line">            AuditUser = context.HttpContext.User.FindFirst(<span class="string">&quot;name&quot;</span>)?.Value ?? <span class="string">&quot;&quot;</span>,</span><br><span class="line">            LogType = <span class="string">&quot;&quot;</span>,</span><br><span class="line">            Memo1 = JsonConvert.SerializeObject(context.ActionArguments.FirstOrDefault().Value),</span><br><span class="line">            Memo2 = <span class="string">&quot;&quot;</span>,</span><br><span class="line">            Memo3 = <span class="string">&quot;&quot;</span>,</span><br><span class="line">            Memo4 = <span class="string">&quot;&quot;</span>,</span><br><span class="line">            Memo5 = <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (action != <span class="string">&quot;login&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            _logger.Warn(JsonConvert.SerializeObject(<span class="string">$&quot;<span class="subst">&#123;apLog.FilePath&#125;</span>: <span class="subst">&#123;apLog.Memo1&#125;</span>&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        _apLogService.InsertAPLog(apLog);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="撰寫相關Service"><a href="#撰寫相關Service" class="headerlink" title="撰寫相關Service"></a>撰寫相關Service</h2><p>裡頭有用到「ISysAPLogService 」，參考如下:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISysAPLogService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">InsertAPLog</span>(<span class="params">SysAplog apLog</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接著實作這個Service</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SysAPLogService</span> : <span class="title">ISysAPLogService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InsertAPLog</span>(<span class="params">SysAplog apLog</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//_db.SysAplogs.Add(apLog);</span></span><br><span class="line">        <span class="comment">//_db.SaveChanges();</span></span><br><span class="line">        <span class="keyword">using</span>(<span class="keyword">var</span> _conn = <span class="keyword">new</span> SqlConnection(_db.Database.GetDbConnection().ConnectionString))</span><br><span class="line">        &#123;</span><br><span class="line">            _conn.Execute(<span class="string">@&quot;INSERT INTO [dbo].[SysAPLog]</span></span><br><span class="line"><span class="string">                    ([AuditTime], [HostName], [HostAddress], [UserAgent], [FilePath], [AuditUser]</span></span><br><span class="line"><span class="string">                    , [LogType], [Memo1], [Memo2], [Memo3], [Memo4], [Memo5])</span></span><br><span class="line"><span class="string">                VALUES</span></span><br><span class="line"><span class="string">                    (@AuditTime, @HostName, @HostAddress, @UserAgent, @FilePath, @AuditUser</span></span><br><span class="line"><span class="string">                    , @LogType, @Memo1,@Memo2, @Memo3, @Memo4, @Memo5)&quot;</span>, apLog);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="引用ActionFilter"><a href="#引用ActionFilter" class="headerlink" title="引用ActionFilter"></a>引用ActionFilter</h2><p>於<code>Startup</code>中注入使用</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">services.AddMvc(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.Filters.Add&lt;APLogActionFilter&gt;();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>主要的ActionFilter中有使用到將使用者的<code>Request Data</code>，使用<code>JsonConvert.SerializeObject</code>序列化後轉成字串，切記若<code>Request Data</code>中的<code>get, set</code>會執行過一遍，若其中邏輯有錯，可能會crash掉，筆者就遇到了，因此特別紀錄一下。</p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>
]]></content>
      <categories>
        <category>dotnetcore</category>
      </categories>
      <tags>
        <tag>dotnetcore</tag>
      </tags>
  </entry>
  <entry>
    <title>[Vue]Vue套件介紹：axios</title>
    <url>/2018/06/25/vue-axios/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>筆者在公司的專案開發上選擇vue作為前端開發framework，不外呼就是開發應用程式，當然免不了基本的CRUD功能，此時需要一個強而有力的呼叫API套件，之所以選擇<code>axios</code>，沒有爾外的原因，因為是vue作者推薦使用，這樣不需有任何的疑慮，用下去就對了，此篇就以<code>axios</code>來探討其用法介紹及經驗分享。</p>
<span id="more"></span>
<blockquote>
<p>使用工具及環境參考<a href="/2018/05/24/vue-guide/" title="[Vue]Vue基本語法">[Vue]Vue基本語法</a></p>
</blockquote>
<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>我們要在專案上使用第一部就是使用<code>npm</code>來安裝它</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure>
<p>若要在component上套用axios則，需先import它</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>接下來我們先來看一下簡單的get指令</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Make a request for a user with a given ID</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user?ID=12345&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="建立axios實體"><a href="#建立axios實體" class="headerlink" title="建立axios實體"></a>建立axios實體</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://some-domain.com/api/&#x27;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">1000</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;<span class="string">&#x27;X-Custom-Header&#x27;</span>: <span class="string">&#x27;foobar&#x27;</span>&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>視情況會使用到自己宣告出來的axios實體，筆者遇到的情形是</p>
<ol>
<li>呼叫不同的API站台時</li>
<li>需要有獨立的config設定時</li>
</ol>
<h2 id="alias別名-簡寫"><a href="#alias別名-簡寫" class="headerlink" title="alias別名(簡寫)"></a>alias別名(簡寫)</h2><p>以上使用到<code>axios</code>所提供的簡寫功能<code>get</code>，axios提供我們會常用到<code>http action</code>的簡寫宣告</p>
<ul>
<li>axios.request(config)</li>
<li>axios.get(url[, config])</li>
<li>axios.delete(url[, config])</li>
<li>axios.head(url[, config])</li>
<li>axios.options(url[, config])</li>
<li>axios.post(url[, data[, config]])</li>
<li>axios.put(url[, data[, config]])</li>
<li>axios.patch(url[, data[, config]])</li>
</ul>
<h2 id="Config項目介紹"><a href="#Config項目介紹" class="headerlink" title="Config項目介紹"></a>Config項目介紹</h2><p>接下來介紹有哪些config可以設定，先來看一下一般的宣告方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Send a POST request</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/user/12345&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>完整的config項目列表，其中<code>url</code>為必填之外，其他為選填項目，筆者盡量以自己的理解的方式寫上註解</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 欲呼叫的目標API的URL</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// http action(對應到api定義的http action)</span></span><br><span class="line">    <span class="comment">// 若沒宣告此屬性則，預設為get</span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 欲呼叫的目標API的BaseUrl</span></span><br><span class="line">    <span class="comment">// 假設API網址有</span></span><br><span class="line">    <span class="comment">// http://localhost:5000/api/user</span></span><br><span class="line">    <span class="comment">// http://localhost:5000/api/user/5</span></span><br><span class="line">    <span class="comment">// 對我們來說以上兩個API的BaseUrl為http://localhost:5000/api</span></span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;https://some-domain.com/api/&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 傳送server端之前，可以透過此function撰寫統一處理邏輯</span></span><br><span class="line">    <span class="comment">// 只支援於http action如put、post、patch</span></span><br><span class="line">    <span class="comment">// 最後必須回傳處理過後的request封包，形式可為string/buffer/fomdata/stream等</span></span><br><span class="line">    <span class="attr">transformRequest</span>: [<span class="keyword">function</span> (<span class="params">data, headers</span>) &#123;</span><br><span class="line">        <span class="comment">// Do whatever you want to transform the data</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如同transformRequest，這個是針對response做處理</span></span><br><span class="line">    <span class="attr">transformResponse</span>: [<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="comment">// Do whatever you want to transform the data</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可自定義header參數</span></span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// querystring參數</span></span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">ID</span>: <span class="number">12345</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可自定義parameter serialize的function</span></span><br><span class="line">    <span class="attr">paramsSerializer</span>: <span class="keyword">function</span> (<span class="params">params</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Qs</span>.<span class="title function_">stringify</span>(params, &#123;</span><br><span class="line">            <span class="attr">arrayFormat</span>: <span class="string">&#x27;brackets&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// put/post/patch使用，request物件</span></span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定義request timeout時間，單位為豪秒ms</span></span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">1000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上僅列出部份config項目，完整請參考<a href="https://github.com/axios/axios">axios github中的說明</a></p>
<h2 id="全域設定"><a href="#全域設定" class="headerlink" title="全域設定"></a>全域設定</h2><h3 id="設定方式"><a href="#設定方式" class="headerlink" title="設定方式"></a>設定方式</h3><p><code>axios</code>很貼心的提供了全域設定的功能，等於說有些設定是共用的，可以透過<code>defaults</code>來設定，通常一定會設置一個<code>baseURL</code>，頁面上的呼叫api設定的url就只要設定相對url即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;https://api.example.com&#x27;</span>;</span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">common</span>[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="variable constant_">AUTH_TOKEN</span>;</span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">post</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>以上只是很簡單的舉了三個例子，第一個是設定baseURL，第二個是將登入成功後取得的token，設定於每次request中的header參數中，第三個是指定post時的content type為html encode過後的，以防腳本攻擊。這些只是簡單的例子，基本上<code>defaults</code>後面可以接上述提到的所有config項目。</p>
<h3 id="設定優先順序探討"><a href="#設定優先順序探討" class="headerlink" title="設定優先順序探討"></a>設定優先順序探討</h3><p>參考<code>axios</code>github中的<code>Config order of precedence</code></p>
<ol>
<li>request當中<code>config</code></li>
<li><code>defaults</code>關鍵字設定之全域設定</li>
<li><code>lib/defaults.js</code></li>
</ol>
<h2 id="Interceptor攔截器"><a href="#Interceptor攔截器" class="headerlink" title="Interceptor攔截器"></a>Interceptor攔截器</h2><h3 id="使用方式-1"><a href="#使用方式-1" class="headerlink" title="使用方式"></a>使用方式</h3><p>筆者特別想介紹這個部份，此功能非常重要，我們要做什麼事情，有了這個攔截器，根本就是事半功倍阿。簡單來說就是<code>axios</code>開放request前或response得到後事件，方便我們撰寫統一處理邏輯。</p>
<p>最簡單的應用就是我們在request的時候，無論是取得下拉式選單的data source，設定條件後按下「查詢」取得相對應的資料，都需要等待時間，現代都是求速成，連一秒都不願意等待，需要馬上有feedback，通常我們都會選擇使用<code>顯示loading</code>讓使用者知道我們很努力的在獲取資料。</p>
<p>這個時候這個攔截器的好處就浮現了，一般沒有攔截器的情況下，我們必須得在每一個request中必須處理<code>顯示loading</code>的邏輯，但這樣一來，重複的程式碼出現在不同地方，需要更改效果時根本就是惡夢阿。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Add a request interceptor</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// Do something before request is sent</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// Do something with request error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add a response interceptor</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// Do something with response data</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// Do something with response error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="移除攔截器"><a href="#移除攔截器" class="headerlink" title="移除攔截器"></a>移除攔截器</h3><p>我們可以使用<code>interceptor攔截器</code>，當然也可以移除它</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用const變數宣告request interceptor</span></span><br><span class="line"><span class="keyword">const</span> myInterceptor = axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="comment">/*...*/</span>&#125;);</span><br><span class="line"><span class="comment">//將上述interceptor使用eject的方式移除</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">eject</span>(myInterceptor);</span><br></pre></td></tr></table></figure>
<p>筆者當初看到這個說明會覺得不會使用到它，直到有些頁面中有<code>autocomplete</code>功能時，就會用上它了。我們專案的情境是我們會在<code>main.js</code>中宣告全域的interceptor，每次發出呼叫API的request前先將<code>loading...</code>畫面顯示，得到response後將其關閉。但問題來了，我們的<code>autocomplete</code>功能，也是會產生呼叫API的情形，會變成每打一個字會產生<code>loading...</code>效果，這是我們不希望的。</p>
<p>筆者在上述的問題解決方式採用上面提到的宣告一個新的<code>axios實體</code>方式，並且將該實體的interceptor設定中使用<code>eject</code>方式移除特定interceptor，當然在呼叫API時使用該<code>axios實體</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 宣告於main.js中</span></span><br><span class="line"><span class="keyword">const</span> myInterceptor = axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="comment">/*...*/</span>&#125;);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myInterceptor</span> = myInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下為個別的Vue檔案中script區塊</span></span><br><span class="line"><span class="comment">// import axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="comment">// 宣告axios實體變數於data區塊中</span></span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">      <span class="attr">myAxios</span>: <span class="literal">null</span>  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 宣告axios實體初始化於created事件中</span></span><br><span class="line"><span class="attr">created</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    myAxios = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">        <span class="attr">baseURL</span>: <span class="string">&#x27;https://some-domain.com/api/&#x27;</span>,</span><br><span class="line">        <span class="attr">timeout</span>: <span class="number">1000</span>,</span><br><span class="line">        <span class="attr">headers</span>: &#123;<span class="string">&#x27;X-Custom-Header&#x27;</span>: <span class="string">&#x27;foobar&#x27;</span>&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    myAxios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">eject</span>(<span class="variable language_">this</span>.<span class="property">$myInterceptor</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 該頁面中呼叫api時使用myAxios這個實體</span></span><br></pre></td></tr></table></figure>

<h2 id="多個請求Concurrency化"><a href="#多個請求Concurrency化" class="headerlink" title="多個請求Concurrency化"></a>多個請求Concurrency化</h2><p><code>axios</code>有提供多個request平行處理的功能<code>all</code>，然後可以使用<code>spread</code>將多個response當作參數接進來</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">all</span>([</span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&#x27;/users&#x27;</span>),</span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&#x27;/posts&#x27;</span>, <span class="attr">params</span>:&#123;</span><br><span class="line">        <span class="attr">userId</span>: userId</span><br><span class="line">    &#125;)</span><br><span class="line">])</span><br><span class="line">.<span class="title function_">then</span>(</span><br><span class="line">    axios.<span class="title function_">spread</span>(<span class="function">(<span class="params">userResponse, postResponse</span>)=&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(userResponse);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(postResponse);</span><br><span class="line">    &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="實例"><a href="#實例" class="headerlink" title="實例"></a>實例</h2><p>我們來做一下實例吧，找一個公開的api <a href="https://jsonplaceholder.typicode.com/">jsonplaceholder</a> 串接，並使用<code>interceptor</code>做進一步的處理。</p>
<h3 id="安裝及設置前置作業"><a href="#安裝及設置前置作業" class="headerlink" title="安裝及設置前置作業"></a>安裝及設置前置作業</h3><p>前置作業很多，但我會以這個專案為模版，其他文章的範例會使用這個專案繼續完成其他套件示範。</p>
<ol>
<li>使用<code>vue-cli</code>initial webpack模版專案<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vue init webpack DemoApp</span><br></pre></td></tr></table></figure></li>
<li>安裝<code>bootstrap-vue</code><br>接著使用<code>visual studio code</code>開啟專案，為了版面漂亮，我們來安裝一下<code>bootstrap</code>吧，為了使用現成的bootstrap component，我們就直接安裝<code>bootstrap-vue</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install bootstrap-vue --save</span><br></pre></td></tr></table></figure>
 接著我們在<code>main.js</code>中<code>bootstrap-vue</code>的import及使用宣告<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import及使用</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">BootstrapVue</span> <span class="keyword">from</span> <span class="string">&#x27;bootstrap-vue&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">BootstrapVue</span>);</span><br><span class="line"><span class="comment">// 載入相關css</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;bootstrap/dist/css/bootstrap.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;bootstrap-vue/dist/bootstrap-vue.css&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>安裝<code>jquery</code>及<code>popper.js</code><br>因為我們專案使用<code>bootstrap 4</code>版本，需要安裝<code>jquery</code>及<code>popper.js</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install jquery --save</span><br><span class="line">npm install popper.js --save</span><br></pre></td></tr></table></figure></li>
<li>安裝<code>font-awesome</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install font-awesome</span><br></pre></td></tr></table></figure>
 接著我們在<code>main.js</code>中載入相關css<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;font-awesome/css/font-awesome.css&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>安裝我們的主角<code>axios</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure>
 以上面所介紹的，我們在<code>main.js</code>中加入<code>defaults</code>設定值，先加入<code>baseURL</code>吧<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;https://jsonplaceholder.typicode.com&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="撰寫程式"><a href="#撰寫程式" class="headerlink" title="撰寫程式"></a>撰寫程式</h3>這個範例會使用<a href="https://jsonplaceholder.typicode.com/posts">https://jsonplaceholder.typicode.com/posts</a>做示範，先看一下回傳的object結構<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sunt aut facere repellat provident occaecati excepturi optio reprehenderit&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
我們這篇的範例就示範印出<code>title</code>及<code>body</code>欄位。筆者就增加一點困難，我們就先列出<code>title</code>欄位列表，然後點下<code>title</code>後相對應的<code>body</code>內容才會以<code>collapse</code>效果彈出顯示，使用<code>font-awesome</code>在顯示隱藏效果下，切換顯示 <i class="fa fa-plus-square-o"></i> 及 <i class="fa fa-minus-square-o"></i> 符號。<code>body</code>欄位隱藏的狀態下會顯示 <i class="fa fa-plus-square-o"></i> 表示可以點開內容，若已顯示狀態下則切換顯示為 <i class="fa fa-minus-square-o"></i>，表示已打開內容。需求講完了，我們就來實際動手做吧。<h4 id="建立Component-AxiosDemo-vue"><a href="#建立Component-AxiosDemo-vue" class="headerlink" title="建立Component:AxiosDemo.vue"></a>建立Component:AxiosDemo.vue</h4>在<code>Explorer</code>視窗中，直接在components上按右鍵加入<code>AxiosDemo.vue</code>，我們先來宣告一下data部份，到時呼叫api後得到的response data使用這個data變數去接<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">postInfos</span>: []</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
接下來我們就直接在<code>created</code>事件中呼叫API，取得資料，因我們已經於<code>main.js</code>中設置<code>baseURL</code>，geturl只要設置相對路徑即可<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">created</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&quot;/posts&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> tempInfos = response.<span class="property">data</span>;</span><br><span class="line">      tempInfos.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        item.<span class="property">show</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">postInfos</span>.<span class="title function_">push</span>(item);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
以上程式碼稍微要講解一下，我們先用<code>tempInfos</code>接response data，之後再使用<code>foreach</code>倒出資料時，順邊指定<code>show</code>屬性，預設設為<code>false</code>，其控制<code>body</code>欄位資料顯示隱藏邏輯，設定好的資料push至我們的data變數<code>postInfos</code>。</li>
</ol>
<p>都設置完邏輯面的部份，我們來處理一下ui面吧，這裡會使用到<code>bootstrap</code>中的<code>card</code>結構，<code>title</code>欄位資料放於<code>card-header</code>中，<code>body</code>資料放於<code>card-body</code>中(預設隱藏)。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">&quot;post in postInfos&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:key</span>=<span class="string">&quot;post.id&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-header&quot;</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">click</span>=<span class="string">&quot;post.show = !post.show&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-plus-square-o&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;!post.show&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-minus-square-o&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;post.show&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> &#123;&#123;post.title&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-body&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-show</span>=<span class="string">&quot;post.show&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;card-text&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;post.body&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上述程式碼使用到vue相關技巧如下</p>
<ul>
<li><code>vue directive</code>有<code>v-for</code>、<code>v-show</code></li>
<li>事件監聽<code>v-on</code>如<code>@click</code></li>
<li><code>javascript表達式</code>寫於<code>@click</code>，將show改為目前show值相反值<ul>
<li>例:true改為false、false則反之。</li>
</ul>
</li>
<li>一定要會的<code>Mustache語法</code>使用，將<code>title</code>、<code>body</code>欄位值印出</li>
</ul>
<p>完整的<code>AxiosDemo.vue</code>程式碼如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;axiosdemo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">         <span class="attr">v-for</span>=<span class="string">&quot;post in postInfos&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">         <span class="attr">:key</span>=<span class="string">&quot;post.id&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-header&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">           @<span class="attr">click</span>=<span class="string">&quot;post.show = !post.show&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-plus-square-o&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;!post.show&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-minus-square-o&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;post.show&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> &#123;&#123;post.title&#125;&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-body&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">           <span class="attr">v-show</span>=<span class="string">&quot;post.show&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;card-text&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;&#123;post.body&#125;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;AxiosDemo&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">postInfos</span>: []</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">created</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    axios.<span class="title function_">get</span>(<span class="string">&quot;/posts&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> tempInfos = response.<span class="property">data</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      tempInfos.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        item.<span class="property">show</span> = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">postInfos</span>.<span class="title function_">push</span>(item);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="設定Route"><a href="#設定Route" class="headerlink" title="設定Route"></a>設定Route</h4><p>我們找到<code>router\index.js</code>，擴充<code>routes</code>陣列</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先import Component</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AxiosDemo</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/AxiosDemo&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 擴充routes陣列</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;axios&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;AxiosDemo&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">AxiosDemo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用<code>npm run dev</code>執行網站，效果如下</p>
<img src="/2018/06/25/vue-axios/Axios_Demo.gif" class="" title="[Axios_Demo]">

<h3 id="套用axios攔截器及loading效果"><a href="#套用axios攔截器及loading效果" class="headerlink" title="套用axios攔截器及loading效果"></a>套用axios攔截器及loading效果</h3><p>上面有介紹到<code>interceptor攔截器</code>的功能，筆者就以上述範例繼續以擴充的方式完成</p>
<ol>
<li>安裝loading效果實現套件<code>vue-blockui</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install vue-blockui --save</span><br></pre></td></tr></table></figure></li>
<li>接著在<code>main.js</code>中引入<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 將套件import進來</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">BlockUI</span> <span class="keyword">from</span> <span class="string">&#x27;vue-blockui&#x27;</span></span><br><span class="line"><span class="comment">// 套用於vue中</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">BlockUI</span>)</span><br></pre></td></tr></table></figure></li>
<li><code>AxiosDemo.vue</code>頁面中加入<code>vue-blockui</code>ui區塊<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用data變數spinnerStatus來控制顯示與否 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用data變數msg來動態設定顯示字串 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">BlockUI</span> <span class="attr">:message</span>=<span class="string">&quot;msg&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-show</span>=<span class="string">&quot;spinnerStatus&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-cog fa-spin fa-3x fa-fw&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">BlockUI</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>上步驟宣告中有使用到<code>data</code>變數<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">postInfos</span>: [],</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&quot;Loading...&quot;</span>,</span><br><span class="line">        <span class="attr">spinnerStatus</span>: <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
<li>在<code>created</code>事件中加入相關程式碼<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> $vue = <span class="variable language_">this</span>;</span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="keyword">function</span>(<span class="params">config</span>) &#123;</span><br><span class="line">        $vue.<span class="property">spinnerStatus</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">        $vue.<span class="property">spinnerStatus</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 使用setTimeout是為了demo效果，不然資料撈太快，會沒看到loading效果</span></span><br><span class="line"><span class="comment">// 因此故意延遲3秒後才隱藏loading視窗</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="keyword">function</span>(<span class="params">response</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            $vue.<span class="property">spinnerStatus</span> = <span class="literal">false</span>;</span><br><span class="line">        &#125;, <span class="number">3000</span>);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">        $vue.<span class="property">spinnerStatus</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li>
<li>完整的程式碼(加入<code>axios.get</code>及<code>axios.interceptors</code>)<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;axiosdemo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">         <span class="attr">v-for</span>=<span class="string">&quot;post in postInfos&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">         <span class="attr">:key</span>=<span class="string">&quot;post.id&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-header&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">           @<span class="attr">click</span>=<span class="string">&quot;post.show = !post.show&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-plus-square-o&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">           <span class="attr">v-show</span>=<span class="string">&quot;!post.show&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-minus-square-o&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">           <span class="attr">v-show</span>=<span class="string">&quot;post.show&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> &#123;&#123;post.title&#125;&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-body&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">           <span class="attr">v-show</span>=<span class="string">&quot;post.show&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;card-text&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;&#123;post.body&#125;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- blockui --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">BlockUI</span> <span class="attr">:message</span>=<span class="string">&quot;msg&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">             <span class="attr">v-show</span>=<span class="string">&quot;spinnerStatus&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-cog fa-spin fa-3x fa-fw&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">BlockUI</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;AxiosDemo&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">postInfos</span>: [],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">msg</span>: <span class="string">&quot;Loading...&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">spinnerStatus</span>: <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">created</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> $vue = <span class="variable language_">this</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">function</span>(<span class="params">config</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $vue.<span class="property">spinnerStatus</span> = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> config;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">function</span>(<span class="params">error</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $vue.<span class="property">spinnerStatus</span> = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    );</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// Add a response interceptor</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">function</span>(<span class="params">response</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          $vue.<span class="property">spinnerStatus</span> = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, <span class="number">3000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> response;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">function</span>(<span class="params">error</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $vue.<span class="property">spinnerStatus</span> = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    );</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    axios.<span class="title function_">get</span>(<span class="string">&quot;/posts&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> tempInfos = response.<span class="property">data</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      tempInfos.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        item.<span class="property">show</span> = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">postInfos</span>.<span class="title function_">push</span>(item);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
最終完成效果如下<img src="/2018/06/25/vue-axios/Axios_Interceptor_Demo.gif" class="" title="[Axios_Interceptor_Demo]"></li>
</ol>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>我們建構應用程式最基本的功能就是CRUD，<code>axios</code>套件是一定要投資的，筆者建議一定要花時間研究及練習，老話一句，一定要記得<code>axios</code>提供哪些功能，這樣需要用到時，很快就能查出相對應的解法，介紹就到這邊，我們下篇再見。</p>
<p>範例檔案參考<a href="https://github.com/EugeneSu0515/VueDemoApp">https://github.com/EugeneSu0515/VueDemoApp</a></p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>[Vue]Vue套件介紹:vee-validate</title>
    <url>/2018/06/25/vue-vee-validate/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p><code>Vue.js</code>專案開發，一般應用程式都會遇到表單送出功能，然而前後端分離架構下，前後端必須採用不同階段的驗證，筆者認為基本的資料驗證必須得在前端完成，後端API接收到的資料，應該只剩資料重複性檢查等複雜驗證，這才是筆者認為的健康的資料流。<code>Vue.js</code>驗證相關套件中，筆者選擇<a href="https://baianat.github.io/vee-validate/">vee-validate</a>，此篇就以該套件說明使用方式。</p>
<span id="more"></span>
<blockquote>
<p>使用工具及環境參考<a href="/2018/05/24/vue-guide/" title="[Vue]Vue基本語法">[Vue]Vue基本語法</a></p>
</blockquote>
<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vee-validate --save</span><br><span class="line">yarn add vee-validate</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="載入使用"><a href="#載入使用" class="headerlink" title="載入使用"></a>載入使用</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接定義於main.js中</span></span><br><span class="line"><span class="comment">//載入</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VeeValidate</span> <span class="keyword">from</span> <span class="string">&#x27;vee-validate&#x27;</span>;</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VeeValidate</span>);</span><br></pre></td></tr></table></figure>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="在表單中的input設定驗證屬性"><a href="#在表單中的input設定驗證屬性" class="headerlink" title="在表單中的input設定驗證屬性"></a>在表單中的input設定驗證屬性</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- name屬性一定要設定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-validate</span>=<span class="string">&quot;&#x27;required&#x27;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;myinput&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 顯示錯誤訊息-與name屬性設定名稱需一致 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; errors.first(&#x27;myinput&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="表單送出事件中驗證"><a href="#表單送出事件中驗證" class="headerlink" title="表單送出事件中驗證"></a>表單送出事件中驗證</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// submit method做驗證</span></span><br><span class="line"><span class="attr">submitProcess</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$validator</span>.<span class="title function_">validateAll</span>().<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (result) &#123;</span><br><span class="line">            <span class="comment">//驗證成功區塊-可以實作呼叫API</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//驗證失敗顯示資訊</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="登入頁面實作"><a href="#登入頁面實作" class="headerlink" title="登入頁面實作"></a>登入頁面實作</h2><p>以上基本用法的實際應用，跟著筆者做一個登入頁面感受一下吧。筆者會持續更新之前使用的VueDemo專案，連結於此<br><a href="https://github.com/EugeneSu0515/VueDemoApp.git">https://github.com/EugeneSu0515/VueDemoApp.git</a></p>
<p>安裝步驟就省略掉了，參考上方安裝方法，接下來實作其他步驟：</p>
<h3 id="Template區塊宣告"><a href="#Template區塊宣告" class="headerlink" title="Template區塊宣告"></a>Template區塊宣告</h3><p>加一個Validation Component，template區塊中宣告</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 有兩個欄位-帳號及密碼，並且驗證為必填，放一個登入按鈕</span></span><br><span class="line"><span class="comment">，並且執行「submitProcess」method --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;userId&quot;</span>&gt;</span>UserId<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">id</span>=<span class="string">&quot;userId&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">name</span>=<span class="string">&quot;userId&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">v-validate</span>=<span class="string">&quot;&#x27;required&#x27;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;invalid-feedback&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">&quot;display:block;&quot;</span>&gt;</span>&#123;&#123; errors.first(&#x27;userId&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">id</span>=<span class="string">&quot;password&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">name</span>=<span class="string">&quot;password&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">v-validate</span>=<span class="string">&quot;&#x27;required&#x27;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;invalid-feedback&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">&quot;display:block;&quot;</span>&gt;</span>&#123;&#123; errors.first(&#x27;password&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">click.prevent</span>=<span class="string">&quot;submitProcess()&quot;</span>&gt;</span>登入<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Script區塊宣告"><a href="#Script區塊宣告" class="headerlink" title="Script區塊宣告"></a>Script區塊宣告</h3><p>同樣是Validation Component的script區塊中宣告</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vue的methods option中加入「submitProcess」method</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Validation&quot;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">submitProcess</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$validator</span>.<span class="title function_">validateAll</span>().<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (result) &#123;</span><br><span class="line">          <span class="comment">//可以實作呼叫API</span></span><br><span class="line">          <span class="title function_">alert</span>(<span class="string">&quot;Form Submitted!&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;Correct them errors!&quot;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="美化版面"><a href="#美化版面" class="headerlink" title="美化版面"></a>美化版面</h3><p>為了美化版面，適當的加入其他版面配置語法，Validation Component完整語法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;validation&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 採用`justify-content-center`的配置，讓區塊置中 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row justify-content-center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 採用`cards`的配置 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-header&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;card-title&quot;</span>&gt;</span>登入<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-body&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;userId&quot;</span>&gt;</span>UserId<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">                                       <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span></span></span><br><span class="line"><span class="tag">                                       <span class="attr">id</span>=<span class="string">&quot;userId&quot;</span></span></span><br><span class="line"><span class="tag">                                       <span class="attr">name</span>=<span class="string">&quot;userId&quot;</span></span></span><br><span class="line"><span class="tag">                                       <span class="attr">v-validate</span>=<span class="string">&quot;&#x27;required&#x27;&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;invalid-feedback&quot;</span></span></span><br><span class="line"><span class="tag">                                     <span class="attr">style</span>=<span class="string">&quot;display:block;&quot;</span>&gt;</span></span><br><span class="line">                                    &#123;&#123; errors.first(&#x27;userId&#x27;) &#125;&#125;</span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">                                       <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span></span></span><br><span class="line"><span class="tag">                                       <span class="attr">id</span>=<span class="string">&quot;password&quot;</span></span></span><br><span class="line"><span class="tag">                                       <span class="attr">name</span>=<span class="string">&quot;password&quot;</span></span></span><br><span class="line"><span class="tag">                                       <span class="attr">v-validate</span>=<span class="string">&quot;&#x27;required&#x27;&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;invalid-feedback&quot;</span></span></span><br><span class="line"><span class="tag">                                     <span class="attr">style</span>=<span class="string">&quot;display:block;&quot;</span>&gt;</span></span><br><span class="line">                                    &#123;&#123; errors.first(&#x27;password&#x27;) &#125;&#125;</span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span></span></span><br><span class="line"><span class="tag">                                    @<span class="attr">click.prevent</span>=<span class="string">&quot;submitProcess()&quot;</span>&gt;</span>登入<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;Validation&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">submitProcess</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">$validator</span>.<span class="title function_">validateAll</span>().<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (result) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//可以實作呼叫API</span></span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">alert</span>(<span class="string">&quot;Form Submitted!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;Correct them errors!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="設置Router"><a href="#設置Router" class="headerlink" title="設置Router"></a>設置Router</h3><p>擴充<code>router</code>，<code>router/index.js</code>增加連到<code>Validation</code> Component的連結</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Validation</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Validation&#x27;</span></span><br><span class="line"><span class="comment">// routes陣列中增加</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;validation&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;ValidationDemo&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Validation</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Menu調整"><a href="#Menu調整" class="headerlink" title="Menu調整"></a>Menu調整</h3><p>改造<code>navbar</code>裡的Menu</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 加一條`router-link`，連到上面設定的`route path` --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; path: &#x27;/validation&#x27; &#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-item&quot;</span>&gt;</span>vee-validate<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="實際效果"><a href="#實際效果" class="headerlink" title="實際效果"></a>實際效果</h3><img src="/2018/06/25/vue-vee-validate/ValidationDemo.gif" class="" title="[ValidationDemo]">

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>以上，簡單的套用<code>validation</code>效果，我覺得<code>vee-validate</code>已經算很容易套用，下一篇介紹其屬性使用及進階應用，這篇就到這邊。<br>詳細code請參考 <a href="https://github.com/EugeneSu0515/VueDemoApp.git">https://github.com/EugeneSu0515/VueDemoApp.git</a>。</p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vee-validate</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue系列文章五：Vue Instance與Component</title>
    <url>/2018/06/25/vue-instance-component/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>前面兩篇講了vue相關的語法，是不是覺得少了點什麼，這篇是重頭戲，介紹Vue Instance宣告時有哪些options可設定，有什麼樣的相關技巧以及Component的應用，筆者就以自身開發角度分享實戰經驗。</p>
<span id="more"></span>
<blockquote>
<p>使用工具及環境參考<a href="/2018/05/24/vue-guide/" title="[Vue]Vue基本語法">[Vue]Vue基本語法</a>。</p>
</blockquote>
<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><h2 id="Vue-Instance"><a href="#Vue-Instance" class="headerlink" title="Vue Instance"></a>Vue Instance</h2><h3 id="建立實體"><a href="#建立實體" class="headerlink" title="建立實體"></a>建立實體</h3><p>使用<code>new</code>關鍵字建立vue實體</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="comment">// options</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="相關屬性介紹"><a href="#相關屬性介紹" class="headerlink" title="相關屬性介紹"></a>相關屬性介紹</h3><h4 id="el"><a href="#el" class="headerlink" title="el"></a>el</h4><p>最重要且一定要設定的option，vue的作用域，與<code>jquery selector</code>類似方式宣告</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表示vue作用域為id=app之div區塊</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="data"><a href="#data" class="headerlink" title="data"></a>data</h4><p>vue中使用到的參數，皆宣告於此</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">msg</span>: <span class="string">&#x27;Hello Vue!!&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h4><p>vue宣告之使用到的function，皆宣告於此</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">msg</span>: <span class="string">&#x27;Hello Vue!!&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">      <span class="attr">someMethod</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello Vue!!&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="Lifecycle-Hook"><a href="#Lifecycle-Hook" class="headerlink" title="Lifecycle Hook"></a>Lifecycle Hook</h4><p>vue在實體化過程中開放hook讓我們監聽，看<a href="https://vuejs.org/v2/guide/instance.html#Instance-Lifecycle-Hooks">官網圖</a>比較順</p>
<img src="/2018/06/25/vue-instance-component/Vue_Lifecycle.jpg" class="" title="[Vue_Lifecycle]">
<p>以上以筆者經驗來說，最常使用的是<code>created</code>、<code>mounted</code>、<code>beforeDestroy</code>這三個事件，使用時機為</p>
<ol>
<li><code>created</code>：會Initial頁面上的資料來源，如下拉式選單source</li>
<li><code>mounted</code>：監聽事件宣告，或者確保vue實體化完才可以做的事情；若分不清楚，在此宣告是最安全的</li>
<li><code>beforeDestroy</code>：若頁面上有監聽事件則，需於此事件中解除監聽<code>off</code></li>
</ol>
<h4 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h4><p>若頁面上使用變數為經過運算後才得到值，可以使用<code>computed</code>option中宣告它，在vue中使用時與<code>data</code>參數無差別，差別在於若運算邏輯中有參考到別的參數則，該參數有變化則會重新運算</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">msg</span>: <span class="string">&#x27;Hello Vue!!&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">      <span class="attr">someMethod</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello Vue!!&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">      <span class="attr">msgLength</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">msg</span>.<span class="property">length</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>官網中提到假設<code>computed</code>變數中無參考到其他參數，而是一般function執行，例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="attr">now</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>則比較適合使用<code>methods</code>方式來宣告，才會頁面rerender時會再重新呼叫一次function</p>
<h4 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h4><p>監聽參數變化，vue預設會提供新舊值讓我們操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="comment">// 監聽question這個參數</span></span><br><span class="line">    <span class="attr">question</span>: <span class="keyword">function</span> (<span class="params">newQuestion, oldQuestion</span>) &#123;</span><br><span class="line">        <span class="comment">//邏輯處理</span></span><br><span class="line">        <span class="comment">//newQuestion：新設定值</span></span><br><span class="line">        <span class="comment">//oldQuestion：最後一次設定值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<div class="admonition info"><p>methods/computed/watch這三個option一定要慎選使用，多思考一秒會讓你事半功倍，不留下臭蟲</p>
</div>

<h4 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h4><p><code>mixin</code>看官網解釋重點就是<code>mixed</code>這個字，表是我們可以定義一個<code>component</code>，有完整的vue實體化options可以設定，並使用<code>mixins</code>option使用我們剛定義好的component。以筆者親身經驗來說，若有共用function的需求，我會定一個<code>mixin</code>用component，裡頭會使用<code>methods</code>宣告共用function。最後，任一個component中使用<code>mixins</code>option宣告並使用共用function。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定義完整的Component當作MyMixin</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mymixin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;MyMixin&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 這邊定義了一個共用function</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">hello</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello vue from mixin!&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示範使用上述宣告之MyMixin</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mixindemo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">MyMixin</span> <span class="keyword">from</span> <span class="string">&quot;@/components/MyMixin.vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;MixinDemo&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">mixins</span>: [<span class="title class_">MyMixin</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">created</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="title function_">hello</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>執行後的結果</p>
<img src="/2018/06/25/vue-instance-component/Vue_Mixin.jpg" class="" title="[Vue_Mixin]">

<h2 id="Component介紹"><a href="#Component介紹" class="headerlink" title="Component介紹"></a>Component介紹</h2><p>基本上，若使用<code>webpack full</code>template產生之專案則，每一個<code>.vue</code>檔案都是一個獨立的component，vue instance裡可設定的所有options(除el)皆可設定。</p>
<h3 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h3><p>筆者習慣上，依功能區分component，以利達到Component最小化，例如Layout中會抽Navigation、Sidebar、Footer等；若查詢頁面中則會抽Conditions、Pagination等Component。</p>
<h3 id="傳遞資料"><a href="#傳遞資料" class="headerlink" title="傳遞資料"></a>傳遞資料</h3><p>以上述情形，會遇到Component間傳遞資料的需求，假設以查詢頁面為例，符合統一頁面設計規則，每個查詢頁面中會放置「新增」按鈕，這種統一需求會一併抽至<code>conditions</code>component，等於每個功能的「新增」url設定需傳至<code>conditions</code>component中。傳遞資料會分為兩種情況，若將<code>import</code>方式引入component則，引入進來的component稱為child component，本身component則稱為parent component，因此會分為<code>父傳子</code>及<code>子傳父</code>的傳遞方式。筆者針對這個傳遞資料的示範會使用兩個component完成：<code>conditions</code>及<code>componentdemo</code>。</p>
<h4 id="父傳子"><a href="#父傳子" class="headerlink" title="父傳子"></a>父傳子</h4><p>父傳子的方式簡單多了，在<code>child component</code>中使用<code>props</code>option設定參數的宣告，<code>parent component</code>中透過<code>v-on</code>的方式指定該參數的值即可。</p>
<ul>
<li>Child Component<code>Conditions.vue</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;conditions&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 外部連結 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;insertUrl&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">           <span class="attr">class</span>=<span class="string">&quot;btn btn-secondary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">           <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-plus&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 新增</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 內部vue router path --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- &lt;router-link :to=&quot;&#123; path: insertUrl &#125;&quot;&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">        &lt;i class=&quot;fa fa-plus&quot;&gt;&lt;/i&gt; 新增</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">      &lt;/router-link&gt; --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form form-horizontal&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4 form-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">label</span>&gt;</span>查詢條件一<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                     <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group col-4&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">label</span>&gt;</span>查詢條件二<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-times&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 取消</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-search&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 查詢</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;Conditions&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 使用props宣告可以使父component傳的參數</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: [<span class="string">&quot;insertUrl&quot;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>Parent Component<code>ComponentDemo.vue</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;componentdemo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">conditions</span> <span class="attr">:insertUrl</span>=<span class="string">&quot;insertUrl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">conditions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Conditions</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Conditions.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;ComponentDemo&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">Conditions</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">insertUrl</span>: <span class="string">&#x27;http://google.com.tw&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="子傳父"><a href="#子傳父" class="headerlink" title="子傳父"></a>子傳父</h4><p>以上述例子，跟著筆者繼續完成子傳父的功能吧，假設<code>查詢</code>按鈕按下去後將查詢條件區塊中使用者所填選的值傳送至父component中做查詢動作，我們需要使用<code>$emit</code>的方式通知。</p>
<ul>
<li>Child Component<code>Conditions.vue</code><ul>
<li>宣告data參數值:conditions</li>
<li>將conditions參數透過<code>v-model</code>bind至查詢條件區塊中</li>
<li><code>查詢</code>鈕中加入click事件，使用<code>v-on:click</code>，function名稱為<code>searchProcess</code></li>
<li><code>searchProcess</code>function中<code>emit</code>事件，事件名稱為<code>searchEmit</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;conditions&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 外部連結 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;insertUrl&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">           <span class="attr">class</span>=<span class="string">&quot;btn btn-secondary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">           <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-plus&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 新增</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 內部vue router path --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- &lt;router-link :to=&quot;&#123; path: insertUrl &#125;&quot;&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">        &lt;i class=&quot;fa fa-plus&quot;&gt;&lt;/i&gt; 新增</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">      &lt;/router-link&gt; --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form form-horizontal&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4 form-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">label</span>&gt;</span>查詢條件一<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                     <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                     <span class="attr">v-model</span>=<span class="string">&quot;conditions.query1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group col-4&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">label</span>&gt;</span>查詢條件二<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                      <span class="attr">v-model</span>=<span class="string">&quot;conditions.query2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>下拉選單一<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>下拉選單二<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-times&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 取消</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                      @<span class="attr">click.prevent</span>=<span class="string">&quot;searchProcess()&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-search&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 查詢</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;Conditions&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 使用props宣告可以使父component傳的參數</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: [<span class="string">&quot;insertUrl&quot;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">conditions</span>: &#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">searchProcess</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;searchEmit&quot;</span>, <span class="variable language_">this</span>.<span class="property">conditions</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>Parent Component<code>ComponentDemo.vue</code><ul>
<li>接收子component的<code>emit</code>事件:<code>searchEmit</code>，使用<code>v-on</code>的方式</li>
<li>並觸發事件時指定執行該component中的methods<code>searchProcess</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;componentdemo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">conditions</span> <span class="attr">:insertUrl</span>=<span class="string">&quot;insertUrl&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                @<span class="attr">searchEmit</span>=<span class="string">&quot;searchProcess&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">conditions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Conditions</span> <span class="keyword">from</span> <span class="string">&quot;@/components/Conditions.vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;ComponentDemo&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">Conditions</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">insertUrl</span>: <span class="string">&quot;http://google.com.tw&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">searchProcess</span>: <span class="keyword">function</span>(<span class="params">conditions</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(conditions);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
執行後的結果<img src="/2018/06/25/vue-instance-component/Vue_Component_Child_To_Parent.jpg" class="" title="[Vue_Component_Child_To_Parent]">
可以使用chrome偵錯視窗中的<code>vue</code>tab可以看出<code>$emit</code>的歷程，也可以看出<code>$emit</code>中發送的payload<img src="/2018/06/25/vue-instance-component/Vue_Component_Child_To_Parent_VueTab.jpg" class="" title="[Vue_Component_Child_To_Parent_VueTab]"></li>
</ul>
</li>
</ul>
<h3 id="動態載入"><a href="#動態載入" class="headerlink" title="動態載入"></a>動態載入</h3><p>vue有提供動態載入<code>component</code>的機制，若有需求是依照某些條件載入不同的component就可以使用動態載入機制。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 動態指定currentComponent的值:component名稱</span></span><br><span class="line">&lt;component v-<span class="attr">bind</span>:is=<span class="string">&quot;currentComponent&quot;</span>&gt;&lt;/component&gt;</span><br></pre></td></tr></table></figure>
<p>以筆者經驗是除非有必要性，不然絕不要輕易嘗試，筆者在專案中使用的情境是，因切<code>Layout</code>時，<code>功能區塊</code>必須與<code>頁面標題顯示</code>同個div中，頁面標題使用<code>vue-router</code>中的自定義<code>meta</code>屬性來宣告，因此放在layout中統一處理。</p>
<p><code>功能區塊</code>可以想成是<code>取消</code> <code>儲存</code> <code>列印</code> <code>匯出報表</code>等該頁面所屬功能，最後設計是每個頁面會搭配一個結尾為<code>Feature</code>的頁面，會去判斷<code>route</code>的值，然後指定該頁面所屬的功能列component，缺點就是Layout檔案中會有一堆component的import及宣告<code>components</code>option，不過官網上的建議<a href="https://vuejs.org/v2/guide/components-registration.html#Automatic-Global-Registration-of-Base-Components">Automatic Global Registration of Base Components</a>，實際範例：<a href="https://github.com/chrisvfritz/vue-enterprise-boilerplate/blob/master/src/components/_globals.js">vue-enterprise-boilerplate</a>或許有解，筆者目前尚未實際使用過，有機會使用後再補上心得，目前是對於動態載入component有點卻步。</p>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>藉由這幾篇的觀念解說及經驗分享，筆者相信可以處理大部份的功能，經由這篇的Component介紹，就可以很有系統地去規劃頁面並重用，但傳遞資料需求上面，有父子關係才有辦法做到，但往往有系統的設計會需要無任何關係的<code>component</code>間溝通，需要使用到<code>eventbus</code>的技巧或<code>vuex</code>的store機制，筆者會在套件介紹會寫一篇<code>vuex</code>的實作，再加上會透過<code>vue技巧</code>文章的方式會提出實際碰到問題時的解決方案，希望這系列文章幫助到大家。</p>
<p>範例檔案參考<a href="https://github.com/EugeneSu0515/VueDemoApp">https://github.com/EugeneSu0515/VueDemoApp</a></p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>[Vue]Vue Directive</title>
    <url>/2018/06/22/vue-directive/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>前一篇已介紹了Vue基本語法，筆者相信應該是有辦法撰寫簡單的邏輯，接下來這一篇介紹<code>v開頭directive</code>相關技巧及知識，筆者使用工具及環境參考上一篇<a href="/2018/05/24/vue-guide/" title="[Vue]Vue基本語法">[Vue]Vue基本語法</a>。</p>
<span id="more"></span>
<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><h2 id="v開頭directive"><a href="#v開頭directive" class="headerlink" title="v開頭directive"></a>v開頭directive</h2><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><p>若我們的資料是包含html tag，且是要當作html語法輸出時如何做呢？會用到<code>v-html</code>這個directive。</p>
<blockquote>
<p>Html部份</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using mustaches: &#123;&#123; rawHtml &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using v-html directive: <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;rawHtml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>效果如下</p>
</blockquote>
<p>Using mustaches: &lt;span style="color: red"&gt;This should be red.&lt;/span&gt;</p> <p>Using v-html directive: <span><span style="color: red">This should be red.</span></span></p>

<p>以上，有套用<code>v-html</code>屬性才會當作html語法輸出。</p>
<h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><p>若我們有一些顯示區域是需要透過資料綁定及動態設定出現與否，則需透過<code>v-if</code>這個directive，可搭配使用 <code>v-else</code> <code>v-else-if</code>，可以在vue編譯時期就會去除符合條件之區塊。</p>
<blockquote>
<p>Html部份</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>No<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>以上，使用<code>ok</code>這個參數來控制h1區塊顯示與否</p>
<h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p>與<code>v-if</code>一樣，<code>v-show</code>亦是控制顯示區域出現與否，只是在於<code>v-show</code>是使用<code>html的style屬性display</code>控制顯示或隱藏。</p>
<div class="admonition error"><p><code>v-if</code> Vs <code>v-show</code>
若template一次性的顯示與否可以透過<code>v-if</code>
若是頻繁變動顯示隱藏邏輯則透過<code>v-show</code>控制會使效能更好</p>
</div>

<p>以上，筆者稍微要再解釋一下，<code>頻繁變動顯示隱藏邏輯</code>這個狀況，可以想像一下，若套用<code>v-if</code>來控制的話，表示vue會在判斷到需隱藏時實際將dom元素移除，需顯示時將dom元素重新插入。dom操作效能問題參考 <a href="https://hk.saowen.com/a/c4539ce5769cb5e719437a12ec5d1021c3d3a768db92746794b41225de9c2497">dom操作與優化探討</a>，因此最好不要因自己寫的邏輯觸發頻繁操作dom而造成效能瓶頸。</p>
<h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p>這個directive就是大家會經常用到的，頁面上經常會將撈到的資料利用<code>table</code>或<code>ul&gt;li</code>來呈現出來，最簡單的例子就是menu的顯示，查詢結果呈現。</p>
<blockquote>
<p>Html部份</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;example-1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; item.message &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Javascript部份</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> example1 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#example-1&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">items</span>: [</span><br><span class="line">      &#123; <span class="attr">message</span>: <span class="string">&#x27;Foo&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">message</span>: <span class="string">&#x27;Bar&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>效果如下</p>
</blockquote>
<ul>
    <li>Foo</li>
    <li>bar</li>
</ul> 

<h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p><code>v-for</code>支援陣列及物件，詳細資訊如下</p>
<ul>
<li>v-for陣列部份</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可倒出陣列順序編號 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in items&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>v-for物件部份</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 將各屬性值依序印出 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;value in obj&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- key為屬性名稱 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, key) in obj&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- index為屬性順序編號 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, key, index) in obj&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="admonition info"><p><code>v-for</code>中盡可能設定<code>key</code>屬性</p>
</div>

<p><code>v-for</code>中很重要的觀念是，vue有提供key屬性可以設定各item的識別欄位，使vue追縱更快速 <a href="https://vuejs.org/v2/guide/list.html#key">參考</a>，因此筆者建議若每筆資料包含識別欄位則使用<code>v-bind</code>設定<code>key</code>屬性上去。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- content --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="變更偵測原理"><a href="#變更偵測原理" class="headerlink" title="變更偵測原理"></a>變更偵測原理</h4><div class="admonition info"><p>陣列相關的操作/物件屬性值變更皆會使Vue重繪</p>
</div>

<p>官網上面還有提到陣列或物件變更偵測的機制，基本上變更偵測邏輯很容易理解</p>
<ul>
<li><p>陣列變更偵測邏輯</p>
<ul>
<li>陣列相關的操作<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">push</span>()</span><br><span class="line"><span class="title function_">pop</span>()</span><br><span class="line"><span class="title function_">shift</span>()</span><br><span class="line"><span class="title function_">unshift</span>()</span><br><span class="line"><span class="title function_">splice</span>()</span><br><span class="line"><span class="title function_">sort</span>()</span><br><span class="line"><span class="title function_">reverse</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>物件變更偵測邏輯</p>
<ul>
<li>物件屬性值變更</li>
</ul>
</li>
</ul>
<h4 id="變更偵測注意事項"><a href="#變更偵測注意事項" class="headerlink" title="變更偵測注意事項"></a>變更偵測注意事項</h4><div class="admonition error"><p>變更偵測注意事項請參考以下說明</p>
</div>

<ul>
<li>陣列變更偵測注意事項<br>陣列相關變更偵測因<code>javascript</code>限制，除非是陣列的操作，若使用<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 針對某一筆資料的指定新的值</span></span><br><span class="line">vm.<span class="property">items</span>[indexOfItem] = newValue</span><br><span class="line"><span class="comment">// 重新指定陣列長度</span></span><br><span class="line">vm.<span class="property">items</span>.<span class="property">length</span> = newLength</span><br></pre></td></tr></table></figure>
<ul>
<li>解決方式<br>針對以上的第一個問題，vue也提供變相的解法，需透過<code>vm.set</code>來通知變更<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vue.set</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">set</span>(vm.<span class="property">items</span>, indexOfItem, newValue)</span><br></pre></td></tr></table></figure>
或者使用<code>javascript</code>中<code>Array</code>技巧 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/splice">參考</a><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 將某一個位置的值使用newValue代替</span></span><br><span class="line">vm.<span class="property">items</span>.<span class="title function_">splice</span>(itemIndex, <span class="number">1</span>, newValue)</span><br></pre></td></tr></table></figure>
針對第二個問題可使用<code>Array</code>技巧<code>Splice</code>來解<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vm.<span class="property">items</span>.<span class="title function_">splice</span>(newLength)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>物件變更偵測注意事項<br>基本上跟陣列雷同，物件動態新增屬性會使Vue無法偵測變更<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// `vm.a` 設定newValue可以被偵測變更</span></span><br><span class="line"></span><br><span class="line">vm.<span class="property">b</span> = <span class="number">2</span></span><br><span class="line"><span class="comment">// `vm.b` 設定newValue則無法被偵測變更</span></span><br></pre></td></tr></table></figure>
  與陣列一樣的解法，需透過<code>vm.set</code>的方式<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">set</span>(vm.<span class="property">userProfile</span>, <span class="string">&#x27;age&#x27;</span>, <span class="number">27</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="可搭配使用說明"><a href="#可搭配使用說明" class="headerlink" title="可搭配使用說明"></a>可搭配使用說明</h4><h5 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h5><p>我可以直接指定一個數字當作數值範圍結束值，透過<code>v-for</code>產生指定範圍內的數值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;n in 10&quot;</span>&gt;</span>&#123;&#123; n &#125;&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h5 id="template"><a href="#template" class="headerlink" title="template"></a>template</h5><p>可使用於<code>template</code>內</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; item.msg &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span> <span class="attr">role</span>=<span class="string">&quot;presentation&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<h5 id="v-if-1"><a href="#v-if-1" class="headerlink" title="v-if"></a>v-if</h5><p><code>v-for</code>同階層，再加上<code>v-if</code>來過濾資料，等於<code>符合v-if中宣告條件</code>才會被印出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;li v-<span class="keyword">for</span>=<span class="string">&quot;todo in todos&quot;</span> v-<span class="keyword">if</span>=<span class="string">&quot;!todo.isComplete&quot;</span>&gt;</span><br><span class="line">  &#123;&#123; todo &#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>筆者經驗來說，<code>v-html</code>非常少使用，除非撰寫的是<a href="https://zh.wikipedia.org/wiki/%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F">CMS</a>相關系統，才需將使用者輸入及設定之html語法原始地呈現於畫面上。<code>v-if、v-show</code>會交替使用，選擇參考內文中比較，<code>v-for</code>最常使用，無論是將下拉式選單資料來源綁定於option中，Menu選單動態呈現，將查詢結果顯示於table中，但可以發現vue的directive不複雜，非常容易使用，那你還等什麼呢？</p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>[Vue]Vue基本語法</title>
    <url>/2018/05/24/vue-guide/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>前兩篇的基本設置教學，筆者相信大家已學會基本設定並撰寫vue application，此篇介紹基本語法及應用並說明。</p>
<p>此篇雖然想以<a href="https://vuejs.org/v2/guide/">Vue官網教學</a>順序做介紹，但筆者認為已學會某種技術，應該是要以自己角度分類並介紹，且要加上經驗分享，還可藉由驗證自己的不足，因此若不習慣內容編排方式，多加見諒。</p>
<span id="more"></span>
<p>簡單介紹一下筆者接下來會使用的環境如下：</p>
<ul>
<li>編輯器：<a href="https://code.visualstudio.com/">VisualStudioCode</a></li>
<li>Vue版本：2.4.2 &uarr;</li>
<li>Chrome Extension: <a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd">Vue.js dev tools</a></li>
<li>VsCode Extension: <a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur">vetur</a></li>
<li>Vue App結構採用<code>webpack full</code>Template專案</li>
</ul>
<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><h2 id="Mustache語法"><a href="#Mustache語法" class="headerlink" title="Mustache語法"></a>Mustache語法</h2><p>我們就從<code>Mustache語法</code>開始說起，我們資料綁定顯示時需使用<code>Mustache語法</code>，以兩個大刮號包起參數名稱。</p>
<ul>
<li>Html部份<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>Javascript部份<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li>效果如下<br><span>Hello World</span> </li>
</ul>
<h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2><h3 id="介紹語法"><a href="#介紹語法" class="headerlink" title="介紹語法"></a>介紹語法</h3><p>若想要動態設定html控制項屬性，則無法使用<code>Mustache語法</code>，需使用<code>v-bind</code>關鍵字，套用如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;dynamicId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我們會在data區塊綁定其<code>dynamicId</code>的值，再透過<code>v-bind</code>directive可以動態設定id值。再舉一個簡單例子，我們在頁面上表單會有下拉式選單，我們會透過呼叫API取得source後，render於下拉式選單元件上，這時也是得透過<code>v-bind</code>來綁定，範例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;item.value&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">v-for</span>=<span class="string">&quot;item in selectedOptions&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;item.text&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">option</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span>        </span><br></pre></td></tr></table></figure>
<blockquote>
<p>以上範例，使用<code>v-bind</code>指定其option的value值<br><code>v-for</code>可以先行忽略，下篇會有詳細的說明</p>
</blockquote>
<p>針對<code>v-bind</code>directive，我們可以簡寫為<code>:</code>表示。</p>
<ul>
<li>原始<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;dynamicId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>簡寫後<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">&quot;dynamicId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>簡寫後版面乾淨許多，不過這個完全看個人的習慣，沒有好壞對錯之分</p>
</blockquote>
</li>
</ul>
<p><code>v-bind</code>基本上對於任何html屬性皆可動態綁定，官網針對class與style綁定有特別說明，筆者就不再多加敘述，請參考<a href="https://vuejs.org/v2/guide/class-and-style.html">class與style綁定</a>章節。</p>
<h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h2><h3 id="介紹語法-1"><a href="#介紹語法-1" class="headerlink" title="介紹語法"></a>介紹語法</h3><p>任何Html原生事件event皆可透過<code>v-on</code>做監聽，最簡單例子就是</p>
<ul>
<li>Html部份<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;someMethod()&quot;</span>&gt;</span>按我觸發click事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>Javascript部份<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="title function_">default</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;MyComponent&#x27;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;<span class="keyword">return</span>&#123;&#125;&#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="attr">someMethod</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;Click Event Trigger!!&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>效果如下<br><button onclick="alert('Click Event Trigger!!');">按我觸發click事件</button></li>
</ul>
<p>針對<code>v-on</code>directive，我們可以簡寫為<code>@</code>表示。</p>
<ul>
<li>原始<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;someMethod()&quot;</span>&gt;</span>按我觸發click事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>簡寫後<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;someMethod()&quot;</span>&gt;</span>按我觸發click事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="event參數"><a href="#event參數" class="headerlink" title="$event參數"></a>$event參數</h3><p>我們就以上面的<code>@click</code>例子來看看，function中傳入$event參數，看他到底是為何物？筆者就改寫一下呼叫的method中加入$event參數</p>
<ul>
<li>html部份</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">click</span>=<span class="string">&#x27;someMethod($event)&#x27;</span>&gt;</span>點我看$event<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>javascript部份(僅貼出methods options區塊)</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">someMethod</span>: <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我們來看一下印出來的結果吧</p>
<img src="/2018/05/24/vue-guide/event_console_log.jpg" class="" title="[event_console_log]">

<p>以上，event的資料，做進一步的判斷及處理是很夠的，但vue本身也有提供一些常見的處理包裝而成的修飾符，我們就來看下一節的介紹。</p>
<h3 id="event-modifiers-修飾符"><a href="#event-modifiers-修飾符" class="headerlink" title="event modifiers(修飾符)"></a>event modifiers(修飾符)</h3><p>若有撰寫過<code>jquery</code>，應該對於<code>preventDefault()</code>不陌生才對，等於html原生觸發的事件先行濾掉，只執行自行撰寫的處理邏輯，vue這邊提供相對應的修飾符可套用於<code>v-on</code>中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.prevent</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>目前提供的修飾符有</p>
<ul>
<li>stop</li>
<li>prevent</li>
<li>capture</li>
<li>self</li>
<li>once<code>vue2.1.4以後版本才有</code></li>
<li>passive<code>vue2.3.0以後版本才有</code></li>
</ul>
<p>官網的範例就已經滿清楚的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- the click event&#x27;s propagation will be stopped --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- the submit event will no longer reload the page --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- modifiers can be chained --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- just the modifier --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- use capture mode when adding the event listener --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- i.e. an event targeting an inner element is handled here before being handled by that element --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- only trigger handler if event.target is the element itself --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- i.e. not from a child element --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="key-modifires-修飾符"><a href="#key-modifires-修飾符" class="headerlink" title="key modifires(修飾符)"></a>key modifires(修飾符)</h4><p>顧名思義，在監聽<code>keyup</code>事件時，可加修飾符，更精確的指定是哪一個按鍵，vue提供已包裝好常見的如下</p>
<ul>
<li>enter</li>
<li>tab</li>
<li>delete <code>delete鍵和backspace鍵皆會觸發</code></li>
<li>esc</li>
<li>space</li>
<li>up</li>
<li>down</li>
<li>left</li>
<li>right</li>
</ul>
<p>這邊vue提供一個擴充點，若我們想監聽的按鍵不在上面列的裡面，全域的設定按鍵對應的keycode</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// enable `v-on:keyup.f1`</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">keyCodes</span>.<span class="property">f1</span> = <span class="number">112</span></span><br></pre></td></tr></table></figure>
<p>以上的設定後，我們在頁面上使用<code>v-on:keyup.f1</code>的方式監聽keycode為112的F1按鍵事件。若想知道哪些按鍵的對應keycode，可以玩一下這個網站 <a href="http://keycode.info/">keycode.info</a>，滿有趣的。想要直接看完整的對應資訊，可以參考這個mozilla提供的<a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode">keycode列表</a>。</p>
<p>若不想自行定義，vue在<code>2.5.0版本後</code>提供自動對應keycode，意即會將</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.page-down</span>=<span class="string">&quot;onPageDown&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>vue會很聰明的幫你轉換成<code>$event.key === &#39;PageDown&#39;</code>，但是要記得不包含那種有爭議性的按鍵，例如在<code>IE9</code>環境中很多keycode，如<code>esc</code>及其他<code>箭頭按鍵</code>會與其他瀏覽器環境是不一樣的。這樣筆者會建議以全域的方式自行定義keycode來使用相對保險。還有一些進階的系統按鍵、組合鍵及滑鼠鍵議題，筆者就不在此列出，參考<a href="https://vuejs.org/v2/guide/events.html#System-Modifier-Keys">官網介紹</a>。</p>
<h2 id="使用javascript表達式"><a href="#使用javascript表達式" class="headerlink" title="使用javascript表達式"></a>使用javascript表達式</h2><p>你可以在<code>Mustache語法</code>或其他任何資料綁定方式中寫上javascript運算邏輯。例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; number + 1 &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;&#x27;list-&#x27; + id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="admonition error"><p>基於程式閱讀及擴充性，筆者建議盡量少使用這種內嵌式javascript運算邏輯，盡量使用methods/computed/watch等來取代，應該把javascript邏輯寫在script區塊中</p>
</div>

<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>以上，主要是介紹了<code>Mustache語法</code> 、透過<code>v-bind</code>html屬性值動態生成及使用<code>v-on</code>監聽html原生事件。或許單學這些語法會覺得無趣，且第一次看的話應該也不會有特別的感覺，筆者建議是要記住vue做得到哪些東西，等於是<code>大標題要記得</code>，實際撰寫時忘記了的話再查官網的範例即可，筆者寫此篇目的也是如此，希望也有幫助到你，下篇再見。</p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>[Vue]VueWepackTemplate檔案結構介紹</title>
    <url>/2018/04/25/vue-webpack/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>上一篇介紹到<code>vue-cli</code>建立vue application，其中筆者示範選擇以<code>webpack template</code>作為預設專案結構。這一篇就來簡單介紹一下專案中的檔案結構以及經驗分享。</p>
<span id="more"></span>
<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>先來貼一張vscode開啟後檔案結構：</p>
<img src="/2018/04/25/vue-webpack/vue_test_app_file.jpg" class="" title="[vue_test_app_file]">

<p>以下解釋一下每個資料夾的用意，詳細參考 <a href="http://vuejs-templates.github.io/webpack">vue webpack template document</a>，內容就以筆者到目前為止更改過的設定去做說明。</p>
<h2 id="build"><a href="#build" class="headerlink" title="build"></a><strong>build</strong></h2><p>顧名思義，建置相關設定是在這目錄中的檔案設定，主要是<code>hot loader</code>及打包壓縮相關設定。此目錄中會調整到的檔案屬<code>webpack</code>開頭之檔案，還可為dev及prod做特別不同的設定。</p>
<p>若你是與筆者一樣是使用bootstrap作為網站切版基底則，且已經有<code>UI/UX</code>提供jquery效果則需要多加一些設定。設定步驟為</p>
<ul>
<li><code>npm install</code>方式安裝jquery、popperjs及bootstrap</li>
<li>在<code>webpack.base.conf.js</code>加<code>plugins</code>相關設定</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// const宣告區塊中增加</span></span><br><span class="line"><span class="comment">// 載入webpack</span></span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// module.exports中增加plugins option</span></span><br><span class="line"><span class="attr">plugins</span>:[</span><br><span class="line">    <span class="keyword">new</span> webpack.<span class="title class_">ProvidePlugin</span>(&#123;</span><br><span class="line">        <span class="attr">$</span>: <span class="string">&#x27;jquery&#x27;</span>,</span><br><span class="line">        <span class="attr">jQuery</span>: <span class="string">&#x27;jquery&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;window.jQuery&#x27;</span>: <span class="string">&#x27;jquery&#x27;</span>,</span><br><span class="line">        <span class="title class_">Popper</span>: [<span class="string">&#x27;popper.js&#x27;</span>, <span class="string">&#x27;default&#x27;</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<div class="admonition warning"><p>切記：套用bootstrap4需安裝popperjs</p>
</div>

<p>上述設定完畢後，我們就直接在vue進入點<code>App.vue</code>的<code>script</code>區塊中import jquery以及<code>mounted</code>事件中把<code>UI/UX</code>提供的jquery code貼上去就大功告成。不方便在此直接秀公司的公版套用過程，先以敘述帶過，我再找時間補一篇套用<a href="https://startbootstrap.com/template-overviews/sb-admin-2/">sbadmin2</a>的完整過程，比較會有感同身受。</p>
<h2 id="config"><a href="#config" class="headerlink" title="config"></a><strong>config</strong></h2><p>專案環境變數相關設定，基本上就是在程式撰寫中依照development及prodution不同而變動的資料可以再此目錄中設定。</p>
<ul>
<li>index.js<br>預設會有兩種環境設定，<code>dev</code>及<code>prod(build)</code>，因此<code>npm run dev</code>時使用的port可於此設定以及<code>cors</code>問題可用<code>proxyTable</code>的方式解決，參考<a href="https://kuro.tw/posts/2017/06/07/%E5%A6%82%E4%BD%95%E5%9C%A8-Vue-CLI-%E5%BB%BA%E7%AB%8B%E7%9A%84%E9%96%8B%E7%99%BC%E7%92%B0%E5%A2%83%E5%91%BC%E5%8F%AB%E8%B7%A8%E5%9F%9F%E9%81%A0%E7%AB%AF-RESTful-APIs/">呼叫跨網域API解決方式</a>，筆者開發到目前為止，只改過這兩個設定，其他設定皆採用預設值。</li>
<li>dev.env.js、prod.env.js<br>這兩個檔案中會建立同樣的key值不同value，透過跑<code>npm run dev/build</code>方式以不同的設定值去取代，舉個例子會比較好理解，在開發端及正式伺服器上呼叫的api網址會有所不一樣，這時就可以在這設定。</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// env.dev.js</span></span><br><span class="line">API_BASE_URL<span class="punctuation">:</span> &#x27;<span class="string">&quot;http://localhost:5000/api&quot;</span>&#x27;</span><br><span class="line"><span class="comment">// env.prod.js</span></span><br><span class="line">API_BASE_URL<span class="punctuation">:</span> &#x27;<span class="string">&quot;http://serverip:5000/api&quot;</span>&#x27;</span><br></pre></td></tr></table></figure>

<div class="admonition warning"><p>設定值需要按照格式，一定要使用一組單引號中有雙引號的方式<code>'&quot;&quot;'</code></p>
</div>

<p>在vue程式中使用方式為<code>process.env.key</code>，以上述例子來說宣告為</p>
<blockquote>
<p>process.env.API_BASE_URL</p>
</blockquote>
<div class="admonition warning"><p>需要注意的是設定完成後，需要重跑一次<code>npm run dev/build</code>才會生效</p>
</div>

<h2 id="node-modules"><a href="#node-modules" class="headerlink" title="node_modules"></a><strong>node_modules</strong></h2><p>安裝的套件皆在此目錄中。這目錄就不多加敘述。不過有時引用vue套件的話，透過觀看該套件的原始碼，也可以偷學到一些vue撰寫招數，也是滿有收穫的，不過就要先有基本概念再去參考，以免一開始就學到偷吃步的招數而走歪。</p>
<h2 id="src"><a href="#src" class="headerlink" title="src"></a><strong>src</strong></h2><p>Vue程式在此目錄中撰寫。筆者目前就以功能面(模組)作為切分資料夾的依據存放Component，這就看各自的開發習慣作切割，以好找為主。</p>
<h2 id="static"><a href="#static" class="headerlink" title="static"></a><strong>static</strong></h2><p>若有些特殊頁面不與vue相關，需要獨立宣告的靜態檔案可放與此。筆者就有經驗，因在實作Single sign out功能，使用過<a href="http://identityserver.io/">Identity Server4</a>，Vue前端專案當作client與Identity Server互動時就需要撰寫callback程式，就會需要宣告於此目錄中，參考 <a href="https://github.com/saitolabs/vuejs-oidc-client">vuejs-oidc-client</a>。</p>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>此篇簡單的介紹一下<code>webpack</code>預設template產生之資料夾結構，若想要自己重頭設定起筆者推薦此篇 <a href="https://segmentfault.com/a/1190000005363030">vue+webpack起手式</a>，筆者出社會後都以C#作為主要開發語言，加上開發產品功能還是要緊，就先使用預設範本下去開發。不過還是要先看過這兩篇</p>
<ul>
<li><a href="http://vuejs-templates.github.io/webpack">vue webpack template document</a></li>
<li><a href="https://segmentfault.com/a/1190000005363030">vue+webpack起手式</a></li>
</ul>
<p>才會有概念，到時遇到問題時就會知道要在<a href="www.google.com">google</a>下甚麼關鍵字了。</p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>webpack</tag>
        <tag>vue-cli</tag>
      </tags>
  </entry>
  <entry>
    <title>[Vue]Vue簡介</title>
    <url>/2018/04/23/vue-intro/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>目前公司開發產品選擇<a href="https://vuefe.cn/v2/guide/">vue.js</a>作為前端開發框架，選擇原因不外呼是</p>
<ul>
<li>容易上手</li>
<li>考量到產品之後會由大陸團隊接手</li>
<li>Virtual Dom設計，效能方面不需要擔心</li>
</ul>
<span id="more"></span>
<h1 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h1><p>產品開發之路是遙遠的路途，就決定好好研究它吧，起手式當然是要來寫一支<code>Hello World</code>程式。</p>
<p>Vue的好處之一是若舊網站某些頁面很吃重前端效果則可考慮在該頁單獨使用它，可以感受model雙向綁定帶來的好處。這種方式只要將vue檔案載入就可以開始使用vue了。</p>
<h2 id="使用vue方式一"><a href="#使用vue方式一" class="headerlink" title="使用vue方式一"></a>使用vue方式一</h2><blockquote>
<p>載入vue.js檔案即可在頁面使用vue</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- body區塊結尾前宣告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>載入完畢後，來初始化吧</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// script區塊中宣告</span></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,<span class="comment">//作用域</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>最後套用於body區塊中，在任意<code>div</code>中套用id為app，在該範圍中vue就生效了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- body區塊中宣告 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--對應作用域選取元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>完整html檔案如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test Vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>, <span class="comment">//作用域</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="使用vue方式二"><a href="#使用vue方式二" class="headerlink" title="使用vue方式二"></a>使用vue方式二</h2><blockquote>
<p>利用vue-cli建立完整的前端專案</p>
</blockquote>
<p>首先要先提到vue-cli工具，可透過<a href="https://www.npmjs.com/">npm</a>進行安裝，指令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g vue-cli</span><br></pre></td></tr></table></figure>
<p>使用<code>vue --version</code>來確認是否安裝成功，若出現版號，恭喜你成功了(筆者這邊環境是會出現<code>2.8.2</code>)。我們可以使用<code>vue help</code>來觀看一下支援哪些command吧。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">λ  vue <span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">  Usage: vue &lt;<span class="built_in">command</span>&gt; [options]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Options:</span><br><span class="line"></span><br><span class="line">    -V, --version  output the version number</span><br><span class="line">    -h, --<span class="built_in">help</span>     output usage information</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Commands:</span><br><span class="line"></span><br><span class="line">    init        generate a new project from a template</span><br><span class="line">    list        list available official templates</span><br><span class="line">    build       prototype a new project</span><br><span class="line">    <span class="built_in">help</span> [cmd]  display <span class="built_in">help</span> <span class="keyword">for</span> [cmd]</span><br></pre></td></tr></table></figure>

<p>我們等等建立vue application時會使用到<code>list</code> <code>init</code>指令來完成。</p>
<p>首先先使用<code>vue list</code>觀看一下有哪些現成template可使用，參考如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">λ  vue list</span><br><span class="line"></span><br><span class="line">  Available official templates:</span><br><span class="line"></span><br><span class="line">  ★  browserify - A full-featured Browserify + vueify setup with hot-reload, linting &amp; unit testing.</span><br><span class="line">  ★  browserify-simple - A simple Browserify + vueify setup <span class="keyword">for</span> quick prototyping.</span><br><span class="line">  ★  pwa - PWA template <span class="keyword">for</span> vue-cli based on the webpack template</span><br><span class="line">  ★  simple - The simplest possible Vue setup <span class="keyword">in</span> a single HTML file</span><br><span class="line">  ★  webpack - A full-featured Webpack + vue-loader setup with hot reload, linting, testing &amp; css extraction.</span><br><span class="line">  ★  webpack-simple - A simple Webpack + vue-loader setup <span class="keyword">for</span> quick prototyping.</span><br></pre></td></tr></table></figure>

<p>若使用vue撰寫純前端的application則建議直衝webpack(full)，主要支援<code>hot reload</code>，亦可選擇並設定好<code>router</code>相關設定。跟著筆者一起建立vue application吧。</p>
<blockquote>
<p>使用<code>init</code>初始化專案，<code>webpack</code>關鍵字為選擇vue-cli提供之webpack template，最後名稱是專案名稱，使用<code>VueTestApp</code>。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue init webpack VueTestApp</span><br></pre></td></tr></table></figure>

<p>執行步驟為</p>
<ul>
<li>進入到專案資料夾</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> VueTestApp</span><br></pre></td></tr></table></figure>
<ul>
<li>安裝npm套件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<ul>
<li><code>npm run</code>方式執行Application</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
<p>瀏覽<code>http://localhost:8080</code>，看到以下畫面，那就再次恭喜你了，達成成功撰寫vue application成就。</p>
<img src="/2018/04/23/vue-intro/vue_app.jpg" class="" title="[vue_app]">


<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>看完內容中的教學，應該可以感受到建置vue application並不困難，簡單幾個步驟即可開始撰寫，選vue準沒錯。最後筆者期許自己能夠寫完一系列的教學文，下一篇要來介紹一下webpack template建立之資料夾結構及各檔案的說明。</p>
<hr>
<div style="width: fit-content;
          undefined
          undefined
          padding:8px">
     <a href="https://ko-fi.com/eugenesu0515">
       <svg role="img" style="width: 24px; height:24px; fill:#000000">
         <path d="M23.881 8.948c-.773-4.085-4.859-4.593-4.859-4.593H.723c-.604 0-.679.798-.679.798s-.082 7.324-.022 11.822c.164 2.424 2.586 2.672 2.586 2.672s8.267-.023 11.966-.049c2.438-.426 2.683-2.566 2.658-3.734 4.352.24 7.422-2.831 6.649-6.916zm-11.062 3.511c-1.246 1.453-4.011 3.976-4.011 3.976s-.121.119-.31.023c-.076-.057-.108-.09-.108-.09-.443-.441-3.368-3.049-4.034-3.954-.709-.965-1.041-2.7-.091-3.71.951-1.01 3.005-1.086 4.363.407 0 0 1.565-1.782 3.468-.963 1.904.82 1.832 3.011.723 4.311zm6.173.478c-.928.116-1.682.028-1.682.028V7.284h1.77s1.971.551 1.971 2.638c0 1.913-.985 2.667-2.059 3.015z"></path>
       </svg>
    Buy me a coffee
     </a>
    </div>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
</search>
